%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Tue Jun 21 17:31:50 2011
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMSans10-Bold LMRoman12-Regular LMRoman10-Regular
%%+ LMMathItalic10-Regular LMRoman8-Regular LMMathExtension10-Regular
%%+ LMMathSymbols8-Regular LMMathSymbols10-Regular LMMathItalic8-Regular
%%+ MSAM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi -o main.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.06.21:1731
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/UniqueID 5031981 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /square put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90FFC8EC5E93415
CEE8039BB28A5D76F9F68D7637DF098278D8A99D797D4F0169E9946893AFD3E5
7973A009094890C94D3224E75B576439749E63B7B1D7D501B561D3E184A4788E
3893178EBCAE7FDECEE4C72436F44B4F3452249DA4FF5005A959C34ADF2D9D5A
EB2B1483938BB1554AF95F7E0B679C0D5FE02E0CF9AA45628844A54272ACD915
2362D162698BC6F7535E14CF202C75FD9B58F3876009CC5D804B153916371ADF
860312500155CCA40C37B251270944DB64EEE0EB5716FC088AD867E935B40F3F
EE29A68FBAF8F95762FD3FF5A5A560FD903432A3A9A54A710D942F8A6C4128F6
5482D34E2542A74A0B5C7FE79F79CDC16D3D574A2BA722EB0525A5EF81FAFD69
99AFDE5158AEBF878BFD7FA9BD8962186FAABF1E2593031D084359B02ECE352D
E5D3D4331ECE4C3BEFD80599441F6C28F8FFC6DDE8EF94BE83EB86DAF47CA940
706D4B043040AA2E719D767DBE0D853B0FA15A4D58DEF4812FDF9458012EC691
73C8EAEC809B80D04EC0A7F06E07EBDBC6F9BC7733DE3F7DD495DAEDFC651D4A
329919AB72B8EF795FC391D1F4B1B3CFB3AE8D5BF42610E48E18C515610AA977
88FADE52905B691435176F4BBE80618AE6B86D98E1F393E24CEE3074DF7C7544
76591F390E2395BD735ABF43B96CDAAB034405E456AFA4A45DE9C0D1C9F4657C
659E233E6930DAE802AFA849346EEF63528E67F739FD8C584BF5F2330AFC6861
6FD4EFBC7133DC0B71114BAB2F1E01799A57F82B0DC22D42426A9C3A2032D7E9
A167A02EF8CB8F8567D37C24D129F55C89C3D36D2742C651A69C2272740E7B26
42E0172537224B8B442A1756F8A44BF8123F9442C97B78FC23239C6DD31FB565
92515D5D450F37044F72829669A06855415A52C262C9F00D59438435E6D69181
3CEFE43FE80E8301B091A9B0051AE24D4B97337D621768
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3695D634CA0684474DF6319B365E4A64C90F206C9482
B87592ABCED68E71CF21347EC1299AD5C3E089B07B4D82789221081D1C75F39C
BF89BE5BA6C53DBF61FB3614B78F4A8FCD6AA69212F7C45D50561C28368FC5C8
7A4507A5A16BD33271BB572126735E72BE44078D1F71342A97678A63DBD2B69B
E0D1124BDF8EFE3FF6FF5A943CE835E6FE57C59ED52DF91DF9A97F17108D4EA3
AADA25B85BFD07F9BCA9D7C412F535755FFA6B31BCE8F6DAFDE2CD6CAD4FFFB6
9A018EAF4E1ADEC4489276D46A89226F820B309E311279955EBEA24DADEF30D4
B53885899BDAA0254B708B440525163FD5EC1B97E073026515F10BE924CF9FA5
9FE0FA8765619363B21655F6F293D14230591A731D24C72D595CBA1C1DA945C9
A23B5CB2D2456970CFE1D8A1FE004BE8A0E7FCA182860C639094E35D8E97E518
127E38AA43238FC881601B9EECD1EFE20D2491364B2A8F5727B511DF9C8D83F3
67CE2893F206DEF275133D4584E84B4399D4C62D85341BFE01AD71BBDC6A1D4F
6E38A818A0FDD5BA66259CC99C6049141FA1391EF74EAEC63F1AB0FF359F28BE
CF999589E2765D74B44149144E392F633F4648A9D2C8B1593DE9ACC41A08818A
27F29B2163C9CDAE3F01FC56F70544EA8050E4E6A2DDC5B9B2ECBB1D8017BA9E
FE095875634628DC19959A20AFA73728F11937A13EB1144B939A76B0A1389EA2
E0CCB3666429F724616D4832D3EF58AD9F8FC74D9AE637E3B8B88A7010DC7373
445BF27D7BE316E618C7533BB914B7A10A1EFAA0E9336139CBF71A233DF1F342
94C6A7CB6082EF910CC52AFB1BDAFC470C7159C655E819C77FE6CA562E502F12
311F0B04F11C6A4ABCA96E277C55FF1BAB81F435721D499CF0B0F171F98071D1
5414F0186D782F0808B36F93504CBF302763A0129256A2B66EEF8B054679C8AC
86CAAEF5E0EABE1C38B405EA2382662F6F2EAA782BAA26A36384F901CF98CA35
645F69C33CFDADF44E8B9E89862AB357E43487526815DFE2902F8F1423C1F4DA
103E85EC1B9FDC6DC078046D12BE1854A07D526846B43B2DB0EFBFCF44002FE0
E5ACE129DC207CD22C970CBC136B4711A0E43D4582E61E7E13338AC7DEA89DDD
E39454A8570303BCB1054288B75F9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A918BF41736B320F9653C19886C022E40DB4E36B72E592BD406F
596D415478975E25D1E9A8DBCCD50E0F27E925AE25105C74A97A28AB3241B091
503FE2B0DB2B950C453DF3EFFA7A223A8615C973D1AD43A9C5769C335FA10DC3
44AC8E4A0D3565832E34152F416FE22F66986E23FCC0B20D6446FB7D0A9036AA
42F8585DFE21BB95D5B88AD98D8CEBBE7A83A2DC2F7C5833B18777BBA7DAB65A
1DB864ED22AA77B5B077B6E7B4EAB3007FC5717C2AF3695C8C00A08B7C7368AC
5FB79C3D85846A4E811BAD23DEEB9897DAC31CB3FB7FE00FB6EB11EBD1296E59
04B80CF64B012B4D84911218AD5B3479896D10C53522AB5E36D790BDE98E002E
CCDFA0F2CFF59D555D766785A28433AB2343583C8302152C87391D5E9D4AE29D
CCB61BFD9E8F6DB61F6DD1691D1AB0347196F91BF8D4003E95F831AED56500CE
D7A535D43E3E57D920B15C0B15AD96108BE8E38810ACB94B47F1BDC4D4F38429
02CB21AA7792A680D3361A5A79F0D819435F9294AADAFE196BA2C0AEEDA51347
E78D8170764E15827E40E18093C6CA826FC773F5E2A1A91C2D2A2B7D25DBE1F9
053489D24A57D9ED5BDC9CD8A694DBC50CC04329B0C926DAC9EDBDB5011ACA5D
13D6AD59640BA78D1949C744D9C8BAD9F39702BD7E103FD1CC02039FD691A953
923277A4E8F6E0EE3BFA3CF85994ED92C08F17FB8B4C5D2B9911957B074F5F39
B622E1C382BCBC2598E4E6EB97E5E44572EC4613DB83FE81A5CDD5E6AD399547
1D6D3D5922DB32A13F06A5003229905A5D616708B8BFF396DD04DA3C6AFB6FE4
277455A1DC8BEA4A09C5D41330712934D807DB58428BAF869C9E6E29336E9A22
E21C9C286B526F518231408E521E2C89F53D200F7547F27A44EDE5D8015BC730
6E2FD3E475B764C365A899594C4E3C0BD52623BCDE9A1C160D34938478EFA65E
834019BC7FD053B13B9B8554236CBB9A6CB2AEE81BE0494ACF949045E165D2F9
E716D328D0DF17F15FF78F11975556905D1E48CE5A9F1943528AD3317C3BC197
5E6BF2F4B51126AF6EF08087FD7AC3D8065DFBDF84B869774A19036C2294D528
E18E1DCE6B9D4BAD4BEB4DBAF9D52ECBDBDFE08B771A828B9679FE60B05F66BC
75989641C5BE353A29368DDB0C0FFD2882638BB6AAD34B58843032AF7AF32871
BD9CBCFD3F8A6ED6C0B668BA67F5F672498B7875FA7698260051BF09760E73AD
1F1897BB01A6B80BD261FF1D4598262F3E1ABFBCAFA7E462C88351E3ECCAECA0
F095A67BC6DD290BFC31F0C4113EB4D8CCDCBA10C5364E278014C583926CA3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E346203718C
ACA3E953E1E2A74FFEB0FD2DC6A1BF941DEA5FAE10DF5D09615E225407050EC9
D4A8A4EF1D4C0C97B6D22FE5C5FDD6BB11177772757A5E24C1E6B301C72039F0
DD57452323088A8E1C8640BD1740781D9F5739F1349E1FA949C12BC3FD501865
604B8529FB47760311D089125292B2177B7EA4A763099E838CE4FB48B68B5087
7EBC71DC5D60D3CB95A85FBD377396C9892EA5CB340B192E733865EE30AE798A
272ECF1B0855670A975E8F65CCC9880B36F333EF5CB09BFAE54328AEB8576D34
ADDBF7837F45F5DE03BE16375CD834D7960361D1B0C164CDAFF12095E52E0959
E3726734F8A47AB84E002129291EECB64594CB9C97A3AB21E2CCE13D555224D0
AE720810E94D9B0C849AEB1E1AB609A7D3DBD7D08D884F9B910C77801973B8D8
2E91B06A952D9CDC05A43053A7C878175B3ABE4E0BE0FA17F62096348FEA87FF
6E8E69977F7736B3FFAD04D4963E267F860E9D4E5506C0D3DD00E96668922329
4173FCEA66032DD70A4B05CDFF1D7DBC62A1141DDC99C232FA75711B72C6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D5472A1BC7C25898A571B1D72C1BD6E96
9B113B77F62C4B04169FED7902A5728F9AEFC35B201F835D79EF607721A82F1B
D22CAEA790C3EFA716AC7E957D7B53ABA05461DA404AD0266B212840BE0F2E3E
3F57947346A808AC9B720B85C70E2EF549DE585EFBA65178A68612D2FB323E80
85B6409F602821437D698E80018D86C7FCA7DCB8E783D017B246CB971792B307
9F5C308D3112F8AADDF2363B0626E89492F6DCDDD19434F6F4C143D8BA256D39
692AE378DA0634FAD606D2B0EA617FAB2775FA08A650E2254927E75430A1E090
BEC53A6276BD90CBF07FF6E573BB3D93EE17E5B9F8AB98A72827CD402A127884
3770762EC190DA2FDCEE9DBB69D1EBC783EF17D8C0C8F5A441F523E80FAFFC69
5F68A11D32E62FF2FD98EBD5E50DE5998D4C12572E864C40DAD69102B49DB552
0ABE53CD68687E9818AAAEC0F1E64CF79D776AC08792E98588EA45829D3933E0
AAF0C25D38B3F2A83EAD8AC468B93576DD5C286BAC800B6B0DC788866CC605FA
6F3BB8DEE5053201D651E77971F2B3EF974CC38E20AC8E8DDAD5EF8CDA84BF6C
21B30A7414C771FB0E7B1AEBB6595ACFA45D03FBE1FDB6EC65C8E862F892D1F1
22B8B1834B61A03FD1E9DEDA8D7D05CB0E2EBE29DD3F96E14D67258D480C2F2D
68FCDB4521BC609248ED6F2B6341D0ABC7F4ABD3B219C14D81772C438BB984B2
0209878FF59520F317D024387FF6E7A085576B8D5F808A5B0EFC3BD333C507DC
3BC9153A4E03FF2222938C7FBA95CEB1B5087548D50284E8012445AC04B283F7
E004F9FE8747558E591695808B2B1C68616E2C2E8892AB889DB9BE95F038CC9B
65865E842B10802E074892F34E72341790C7D75341FCC9B6A149E3848491430F
D972AC95EC9BC7AFE6E118E561E16FDB43FAB4E73F68F74AF35DC2DF0EB95E3B
FDFA0ADCE2B9B32AE48C5942A36DEEFB6AF415A9CE5AAA1B6E3688CB5F917FD8
3871ED1C8669FE81753FB4748B5E46F0BE290693860D5719B1E49C67CD3F176D
7595C460F4E677F5F9373FAA47E51AB1C7E027257DBC9A9DC919E9691876A8D8
EEAE7DB4D6C7BFE2B6C153C44A26619DC0766C8CB42489E13D788E3C36B74301
27CFBA05579B8082BF0160A336E79E49DEEB5926261240560B9E6AE6FE09655C
1A0788A556902A8AE763610030A9446FA56230752ACC79FC5720BBDA1C479920
1D1E681FFD0DAD52EBD4811ECAAA7FF81E670283
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5E3E00BD661
6EA0A416902D3AB5EC977DFB9A5ECCECE360FCD3B1A04F16826F1B2685EF82E0
928B3862C03581AE7F5CFB6E28E1D1C86D9C66ED01B855342AE4DB0F802C1129
6A0BBDC33436A35995B50C42EAD39029814C8BCE19DE1D6EAFE04776A6E23862
E9212C1F00409F1184AE358D6F5C5432DBA9D9E35C0C8D10D99B443B1CB9294F
D84C265B934A0857ADE490147C5AB8EBC973CD8D3946E50D5357E57CD8F73589
E001EFE2B853747CA6CF900D3224297F610CA3F3B2629EE272DF9530A35FC614
5232C379D553953F21303DA3CD71A95070A9FE43ADCAD26A4C067109780A8488
50FB9B3B0285C7FADB28A3711C06273B79FBD3438B9C18E6F4E851C2F2033AFE
6DA413A1873C063202DEF40DE082B544B4AF7127EA6D5B8FF5A07351987E5325
EA8D2985AF7B9F14EA2C7C51096681B7712C92271F818BFDFC8AF8099CBCDDCD
FFE15EE19FBB79108A5969895654C00A5F30A5F801DB4597333718373A3B8F96
8B1440C691B1FA7176E0CE92270D872A5B65E2A540432B97CD7F69F767A67AF3
BAE02C93A4D69F7A08162ED8FB6C594E1B6C10BEF2DC54827C9A368306780B31
793DC3588A170E5A20B20B7C7E7B74D57A23326CD8E2332276F32283CF0F7169
EE52BD767834B73D8592C922B8284C6C64525B4CB3EBAD79CF5CD41A9E52E33F
D14670C66F070D8CF7E7607B46F62671C05CC371159F0D61B7E136F99D4F86E0
A6CBFEE98BF2D01C80F225EE14F3FD8F77D0AD0DBACF1DC91B90C11A6D6512C2
7B1EDEFDAD3E3E67342B0432C996FCE6733B371BF36034355BE2E7E7FE9B2134
E3EFBEC16BA5B0097D7290777354D1403713C59D3ABEE28BFA1EE08172B1C2E9
6426A9797747D4E2E5E735378A10FB3CFE695C7C9A778DB1DD2B545FF4B9938D
2EE9029BD66526CBA20B0323265EB13FC896A9733CBD9F87A2FBC724621FC19C
3F62414281BCB53CA46A8161D536C2D0011A2CDA4BD7D71A5116E10B5BCF752C
369CE03BB374617AD20200638DF7E3599F62B0286A83FE867DE833DA386F93AD
2F241B5CA8B55BF28DBD16720BB1C42C9A97BE58542C45F05748B1A1A133EC7D
FFCC255E05EB61E60035946C6E3002646FCD01738AACB9AD52BCD0D6CE9DE7C9
D0A7C62D6C1EFF40A7DC27E4C022403E18AD9CA02B5877B53747D33126D4E427
FD7ABAFE5A711EF72AC4275FDDEA364B0E8DCEA6E5D95B0C3B9E3114AACA2D0C
BD42EB7B100B99333D004155898A4ED4C460E1F28340DF37AA75DB61EB4929AB
62872DAFA2D779981672F5D7278419D03E92B51E62CE40C25D780F60DB82EC24
53C76DA0E3EF221EE13C10CE461087B005576CD68727714EBCDAB1E069FB552B
244921DCA2ABA2125F364237560ECA59253BA1D99F332378689F4FB174E3C634
54AFB214A8944B2299D75F55E0464E42B1D8A06DFD70CDDB936FA8B7F15B6868
26B5EE4D5B6011D4FE891B918DC0343A01080548802256FB125714890F735BA0
46895452AFE7D73D975A793B5241778A9148CA6A48C797F34C92CBD4E803317D
C22FD3C9D81F1FFDCCDD170A6C690A75A165FB9D0C92DE6274E7B9341B3A54A8
6155156D151FAA47D65AD5350276CD0478CC177AFE57D15B1C247E7FC63BCDFF
874A75714FD324FDD866414ED5F0DD2CFF466DAA91839D038ED7CBBE6993BB74
55CB374C4630FB4137D55F76088819802AC0ECDE469085BCC3A6944D9AE66BDD
C633EF0ABF651BD35A09736BCACAA027E0F029C5D7372EF249FA0267C140139E
32A3C82F1A821B58BE53678574253555AAC69C4F5FDA21D1E2BA3F3C7D49723C
B3509F29909A009B6625CD539E94D15B13BC74CDBE6EFC6692B1EC142E866CE7
5F1FBD94D01A2D221E3D64D048CE34560BBF01C461E2A4BB3A7C9A4B24C0499F
B1611320491A48DED20371FA6B02A50091FEAF534CA528E5D88EFD8566893F56
B21C5F06F30EE2F085B06BFE3AE025A0542F0D7F681BF0FA3906F211147BA146
D78C62B62FBEA3A04583F3C4458CDACF7FA1C6FF8AF6320D750231B552FB90F1
22B0C238170CEE768BA5B6BDD6D1510EFB6BEF2419C91B23F690945DACCA92EE
9061FAC3A8E1B8776C69FE99207EB96A2E6C2297EB8656E59E82D8B8D8D9C3E8
C2D184E6656CFE6D2A1A68C78C7A79A202BB5A04157296D730F9FE2F3B9316FC
41775DF4F288C71B517BCD8228BF9EAF57081F57DBF9D74E7C3017641863963C
A3AB5D13CB0500106B9ED5D16E0B45FDCB6775C88653AA81DF891DF490B9ADB6
AE50712D08403465468DA164B82D3C3FBF6D1C7B96B726329E0436DA0F24728B
F15F78C8E8ABCAEBB05F8735424FC707DCE60D51BCA42C273B2E43D802111363
88CE2ADB1B7390B800C5DE45A3519F7136A882713399C831384FA1269A135F65
3A26842C9832772C15EB82E86734FF9C26917BF1D1FAF692F9CFA48CA51F17B4
EC3602751BA8DD89E21D8EFD175AC6DA8E033FF3DF0FDC7F4F675EED0EB2B765
8DF687C9A775D9EA3C72674A561939FD2FD163FC7D32096C6A7E4E081D61DD7A
3FD9373F9A7F4BDAFCD55BBDBEEC2355065FAFFEE86C8BA72ED4E9CE6645154E
C1B30B318967776FD2A50983CBE06A0A21DB992DBD811A09457BC00D7C2668E1
663315B430D1C80D2D39F88E87D4554095A2258ACC3A750E94CFD5C2D2ABD635
DA7FFE17BD725283CE013C9E099C3AD560BBC9A72A50B39F367043BA8C5B9684
01A3CD81976D2140ACC6FA3F605EE3C84A10A9B75142A4F86E27E5BF5701F9D4
D8E4170AF7FDBF3C09162E8A4FC6CD47C150A8C737BE9915BF08A536FDF606B8
1E306AA0F78F9EC9834A8D9C9B376D9B539BEDFBE4BF99F37C4A34A69D56270F
BBCD33071471AC139C90CE7F8D073A8C47D478FE1788AF768FE9FE3A7434E53F
28C0417E0BD2BF59C4723FBA2FC1A1AFA932B1485A158736FC5E3A6EA4ED4A4D
375B2D42DBD1B70D7A5E03B4FC98EB53F373EF24A82EDCEDCE509D926BD5E3C4
F6E6C2EEF52B464FE65352F56E78D58BF1E0922FBDD3D7BC680226F1D3861E1D
799628816A876C6FBAAAF8270E031485E13EC41B411C533A5CC6E2B556B33648
563A0D611223C987C29D1B9B88C659BFD9CC3BF9C51B407842090E3499948E43
E1C8C0B5376C5F3608892370DE073A17C2694902D1FFB4C32B93B36DC34FFFC5
8ADD6DFB3405F36409B4773C99EA24A21A41A2E09D3F835FFA6B64A7EF9D4A06
D0DAB15EAC74E87BB7E48C5097FDEC7E76941324E7E83F6542C7D49E060F1B93
C3C9C3DC4C5B052F3F4219582D45949B8C3A7907A725B3B781635DD650F404BA
14C3E9D3D5937698573BFAC64BC00CC0F161DDEC1020214029548ECB03F2BD47
F24845E7353D9ADEC689CBADDF0CDFA1B1504F28F2E20819835120A732F12A26
61AB1FC21CBE13E07D84E81C83C0694B5F4FF4FF72C4D5B371CA54ADE28C52C7
CF21123F7D1A402EB6E5C24F5DA0D65712C8A5EAD88DD4B0958454439F4D225F
75003C4BD53477FC18D2B44C6463C018DC79C21E0BAFE3ED87BABDA640218AC7
5BB0CFA15B8F75F819A887A605DDF26F4A763FF4A67256788F406EFD3377E217
A70C9AF04166E268511D0E65694C2D2E1C0EB34672AA7DAF9C84EBB32E50FEF3
F5C56140E8B4C5C3B5C7FA848CD18121A5299BB6E81ACEFE8A5D8B30236F7133
F753DEF248B43F3C1F13F4D2BF5379B7F868A25FDA622CD83F8A4E32C9EEC6B7
BDE1441CB5FA18BD17456E8AEED7CF32C7F059693BF5C3C8067FA3841B0D1B74
F45732DA28DF0BB83120894424603C5A41EDBB960A31B510A33BCC14C668AD3C
F719981FD9E8EBE567A6010D7D07A8BDB9FF44B2AC2095A39C74183F41E46F2C
56BCB59CE6AEF7E91659D913D860842BAEC5EB5C217FC685C06C5AE447C992C7
3E39DBD0C5CEA4CF1BDE5E6F73EC07B3E7DE00EDEBB08E7CDC7A964E28F583EE
F904EB6959B1D3A39766563054B2D2505E80A48D419066CDB888332A67983567
99E9FBD22DCC6CAD9D6A335B2BCFA6D000A7C579EA6EF930E74B1ECFB9AA7B9F
0E4E6C466BC0F5343D79F05E9499BA4B20478BE98D0CD6403A0CEE82391AA72F
E8C0033CBF44836480F5C02A3B5CC0FD8F5932C6DA4ACA73678C4BABD55602A2
234943DC1C617EF756440F870DA4B2D31DC8EE61B7BF4ECF255178D2D2C4B7F7
857E7F55762C7EBEF10EA61D28475F515B0DB9397A239415EA236BCC9032F4EF
6BC5EE5B1970D308BB3C93CCF750DB5B591F57B25137A409334D08A69CD50AC7
9F65939B07A261B6E71F3EBC2F8D40DC5F5A4833D2C2859E3C44F7E52389CAFA
EAEE1C86AA95DF347B0A98BB8F77D161F6D20EB2BC27D7EA91130CE1DE0BA382
8ECF2893803831810C6E9B0626C45A3FA811B759F9C661672919A4E352A5377F
9B6C9F0C91B5516A8A87B0FF0AA4C418F45F2D92CFEA647A6508A8ED9B06DAFB
594E0FCC622BB066A369CC2474D56EA9D08FC736992799D11555CED849422395
DCEBAA7D01D4CD352C66AF80F1F4FFFF093DD4F978024FB2968A4727E0288BF2
A124858251438F05B3EA1F686B35F0072DCABF52B6BB979E4CE06A8B8F462974
20FFE3156A9D060D4353F599E125B02401C79FF0F48D1832E838472A8F1A94A9
1A8ED5D214E8BF0C3E924CBF6371E84540487C1D89F391010DBACE017184658A
4E7A74EE6C22C2737A810763CC9C4ECD4E770540F478500F9A415B5CBFF61088
42C022A3E312FD1674F3535DAB490E8F051B47608C92E95FF8A6600284F80F12
C1F2882B24EA79F0D109276AEBE3711D1C5D22D820DD846E4D23028826312F07
F715DB71447FAC1BDB850C6D7EFD955F853F8BA0C0106657B45CBA9F34BF240D
FF74A2F754FED1D9ADED600804B7786C219A9020A8CD622F9B0C79E4635A10CF
B39EE250AD0FE4058068A46889B0D2DAC7CE9E40D84F17B6ACCD874329052ED8
14E463358D70DE7BC6BAFECD377B48633D0107B66544C7AC35374EC47A70CB07
8830DA49AEB80BFD7EC9A76CE1B70D90DF050E04CE4DB5A8C71723B1312A658B
257FABC2CF76D35FADC354CE9369D5B87FD45626E1B13B03CBA0C37EC251BD45
2805722C04F19A3B3F3C1B2E2A253AD125B82674AF983FC223A55FBF610BC0A0
91FBFDBF163B51D39167A93E61FD9B41053DB67BF164A80EE9423004FE6A5544
CF02B59DD72EBD81EB4A5EB4328BD50F4B6EE65D2DB6ABAE8133C7BDA5A03B58
EED7665DD42FA9522F630CA899A5D78A360E09596226F4E332E7A549BB5801C9
FCFBAB4FB3E2B0EEC47AC63ADDEE12117A621E46BD7F1EC1336A154B5490D8D0
CF74E8F4E4BDF74C53268E1A7ECA73776BA42DACC6F9C2926F051D0EE5EDD688
40C6134EB89984A6F1086258534155A42F6626A6E7CFC849FBFFBB17679ABA8C
37C79DF3BFFB1E8E849F75D79A0C7E90882BFDDE098D6A5B48FBDB140741D2C8
AA4AF19F22592587A05FF0A32618B0BC726979DE858914A95826CB2A8F0F1777
3C8DCBF70E24BF1959EBD5A4C5C2C994B9EE2519B09B49B3AEA66A4825CF63C1
3B40CE21656E37A0FCB6836AAAC07E52BC056C8A0157DB843CC75FCD2AB3FCDD
6B3459CF53B417748FE6F01A3E30051DB63DD51641589F8B9BF619FC9090192F
172D05BA3046172E87402DF3168CEA726CFAA9723223CBAF554ECBE4972F8B40
8FFD5309B65CC3461390711E0E9DDE26CCF1965E76FF2374E36CCBA1D9879AFF
E938F608AF10E3339F9F65FB90AE890627CCD5F9688F1304E33256C47C258400
BCE4FCAF84CD0C31F145EDF5AD4A686AD6A7C10A33C0E343BB16449961F30B34
D1933177E5EADC6CFCB6F6C298A1E4D21FDF8F62B467C4997EC131EC9D5A13E2
9233DC3E92F5C7379278D200DA126D47E4E00E31B3A578130F39EEB088CDBB8B
A055C8AF1CC34898887E535A07564A9D3C2275458700FD01CB5E99962B8E8EB4
EB5CA0BF16A759B1636E4B1AEC751061030E9698C3CDCB61A879C2C1AB2E7662
8DCEB3A3F5A507E82C8FBDF8AA3DEF8B37F6022D698727E7234CC16D1816C7DF
48D1A4A5164E968AE0B0AA201B4F06C7E88324959B936EC23A51C48438020816
16BB69E554CF799026733B7ACAAFB6C967D596AFD1BD3F1808F70752636219F1
7E801AF5F30613E7A2C3D32301ADBCFAAA054D2492EC2C5AF7D2458ED5781794
7BB237807480A0BBF4AB6C9B5D06C1992CE930EE2913F287B3CCA268A573A623
0A1B797ACE38376DB0321D7D2B33C37AE910E55A0D0E1F21DE664153B48D8BE4
8B2DC09FBFE366A811793E3A8EF97727B7AD57C1A0288517686B4FB0FA31AF03
94FC58CCE729816CB5CAC247DDC93659FDCEEB82C9E66D3EBD08047CCC106952
7F8600ADAF32FD6CD2EA8B3FCF342EC4F0BC92833AEBC1F3960B69424ECDD2BF
CD831C74E5262430E9787D1CB2FF35D21C1F8EAE49BE6FD22C33BF48AC15CCE2
A38F37D61FD9DD4D39C32F79AACD665ECA7277148AE89168C1CA90A70D335D41
F59317F44A60ED73DAB72A2F1AC1DC8B30C2066BB303FEBB2C20AB7189FBD858
2080248FA76CCC383C6CB99CD853A298A48721B1B1E140ABF948168DCCE12E86
1EB284C7F902B752BD405F562F31C628021C647B954A9B69AE62558ECEE827BF
8AE529717082BE36A157AA548500BDFFC20DFA02DCA07F57B5F1164FAB22A070
7B201D3D31032AC8A1BB77DD481E807EF825F48414FEF79D200E2BB4A8AA530A
DF5EEB2DA9FB58AB983095A58859BF949132B1C6D12D3AC919040E598853720D
3652749FF7E73259966B461435FF38987CDD4CD5F214B4DA5B948A22882BAC40
5187207AD799C1260629F78292967C1BE32DFF3E48051C4F3146917DF98C40DC
B82C07EE79D068039B663EDF0EDA6DA2414F34F3F8539D22DE8883AB78C203C6
D210C162942911B3230B8D462CB20A37463C6BD044D6F63233C4E83966F8B4B4
C033E07E8FC855C74A835C5A785E9623F0D483091D6F95BE42F08D42A1F94139
EDB251936AA43D02F839DD161168565E03AE5C713364C8B41EA510D612146659
C2BF0FB695968E34A0F86D26258A210A15C3EABF35EDE800133D57DCBB869A0C
17AC6B6DD86F6CAA313DABB7CE3A054BB979C02807262725A0904BCB5EA7C17A
39552A1F26283F54AB34D71E6CD2CFF2A335D8E21BDEAC7BDE74DBE7654F3149
1C66E217CC46FE08016C3DC5161B74DE04DA7417CD825727DF6EC29E90C08D76
17119BDC68150065FDEA0DD526947CDD08A647D93504EA067D21563F33124B63
BFE9F72159F34F65E8FC94DCBC1CA521E7D5EE19CE509A68E6B4D24E86C0ACB8
FBDA3F0FA3DC2979E7E5A36EB4C3ABC0D1A36A573708C2EC010028C55D9D6688
C530AAFB328199F1001371EEB6651E14D1FA85144C7D57622B57BD0557DFCBE0
8D7F586D9484EFF2E090F2B7B8349E918E5760A0315EF59D1B19CEFCF89BDFCE
2464D6436323A1CC2C4F53BE2B394825D7844127EE35AF963BAD34B3023F7481
3A6BAA4F7CF2CC57A84CFBA77156ECFCF3CA5D7C100DEB0C7D98EB67CE9C25F6
2632EB30BDE3AFE5FB7B1DB0A04FA4A80796D144BC1875A846990DF6F8909083
F6602661A65465936BF2294ED64C656EEA8A4260D9FCE2474FE577198E0892BA
1FAD0244E7A83AE34B92EEE141E38E374DE01977C142E0ED10318333382EA135
789F15A7315285D2565D7434FF3C75A20CB3C1B57D028A0B57DB8FDF8A6088AF
EF5FD1D7F8363E5D0A84FA747E5F372F14E95B0822D8FDE1D15B9F63FA5C1278
8A1641EB6748E3CAA720DE0904F423F05A0C0D2608EF3E5462B20A63B7304D5E
3C794C804E4AAC066E46A7603171E8F8A4338798655E61E18CB57B816971CA4E
00405247CC08127C60B9C1076373CE9983C9E69CB7B7F996B756C5AA7D6333A0
124C2C8F4A10605F842AACE8467481D16E8AF6A04F0CE4CE4A74BE25F3E7C2E2
C0DD5267722FB6ECF2180C18F4CD8BDF40B4F08B10FA58AA1737EF3E1B5A123C
1A8C4F2954D56B8F24B99DD5F1B638172E6D38E9CB6A8DEBB3097E6C8E065E83
ED4EA71DF17A9784569549FD755518688DB56FF76362FD9E1C29E1A340D86A8A
86C3D98CADF1E924E6C6725EDE1262199758B180C30D92C297BE6F1740C1AA79
5980BFD4498A70B19A2477374C15A410AC5AC35FCB375E20BD3D283BE2AF9661
5AE8936212F232DE54F659A360EAACBA07E9AE56AD3E575E79997CFDEBAC31E2
6DAB725237AAF487936401194546D530AB8C79E320B141657D0327D9E02ED93D
090A7631014AB1AA8D98D60F6425AFF0DE5B6428940FB6C5DB9DFD9BDCF363A6
78B06400B5F99891DF77169067A241E64896CC6DEA0F7E3AF4C39EE4E68AA318
89A371C4C87A28A440118DB7613A4CC0BEF80943F7692E2DB3DD74B480BD24A6
00EFAAD1B220F9934FBCB5253548342976D3CB7FF4EFAC1D126E5AA128B5956F
0EAAB791D24548FAB4E86A2AC98D76EB90FDF40B980BBA64CE3424D1FE89234D
BA4AD8E819385D566003B04D0603504C04951290F43BA455DEF0BAAC784F8748
70B8D6F7096E251C6B883608352261202BE5853C13A1479EFBDCFDB925E45B3F
17BE776D928D8A48A87451BB8D3A8FD9FA7E1522A322816CE6DE933DFE6235A9
59D465B74109BA1843085C27C269C751AB2C5F490BCC3E3E57052444394E4620
1B34B583A55D565AADEA067470D83E94791D463971F63823702ED2F3DE01F5C6
7A163DE6523F9E660D2CC6B59F7AA87B0624F5791984EFFCC010D53C07AE9052
6031B40619B4D27AEA553C2538B7ED6634AFE0B2C249699E2125098176388458
CE10D3C719ED40653C899AD3D2E76E2B3E50DB5E6BAE719942FD4936E47CC8CA
845F90A73358E9F753AA892BD9A7AD14F509BA49C6320EFB421CED72C8D08F32
5003BF6FD3AD3A9205A17BD54BE0908571D96BC48AB4BF001752E0793D5F65D8
D54F9887042104B52790D8A7479D926E7CF5389915DF462574F4AEEDB6C1B943
C4B9D41C4A6A03DF00E2D87F00952D0388BAE0310FB34C7F4924377BB36BADAA
5CC8F226222C66A42F2387CCB41F8F9F578737059CCC46416ACFD62C7DD2CF15
0D8F94874DD922AAC1936BEC68BEE119F67756303DF765AF59870F969EB6B887
FDEBC9069C29AF8A992BE947F7040FC9F06E92BAD21A9E581370CCDBD901157A
DB51F32A144AFFD8EF0F4FEE2DF1F839B2A5D900EC8D4E18AFE3F1E75D12229E
F8516D9F749879287F2FEF85C54E14B83AE5109C4256E148130E8BDD3E4D3C4D
86673C8471B9D763A34A791B13260AF0BF6D684FD9084AC279F5EBCA45288917
5FC90DD86493797440C314037C7E13F3D146873CB848F7B16C9A9FB3C59BE0AB
F7EAB4FC8DCA302AFEB280D3B07ED07CB15BFF34E6AD2C296293BEEE1896F15F
8594B13E095262A01703E669E2FF07E68F50C8DB797C17A3FEF19621EFCB5113
2140FF19F5A2C3548A1474B9BA96B1C64536B34CC71FE5AF9709409A7ABF3741
A64C41706F2BE3B76ED36626C93E57F28E0BD7E996BACCB15686CDC206BAEEF6
E6430D27A7FDA22C80CE90879E1206F6D82500B4E4476AE7277F89C5ECA1C7C2
FF5103A6B0AAF8F5CBE80FA5025BEA2FCDF13767A1D3A0AF7BCC25BFCEA010E0
23A2FB117C46C16ABE5811DD097EB0065B1E01ABF5E2D8428D248B1110C3F9D3
2CBF21C9A58836850C29B830D5A3E4CD9AF417C6AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EF5484D0EECF70D7BCE3B519FFA1FA6E54E2459EF6283C1ABB
BE4EAE60D6FC05A0F71C1F3AEBE2C2AE3872B19AFBC0250D1B2EA9534B0E4143
3C8E0F36E1CD8442A333BC392D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC8A8772
070760AB33B369EBFA1BABC1CA2D5134F45D29A6B34DCC297F981236E31F14BC
8FA2BC3BAAD162DEA2677D4473D206C4D7F6CB65990B7D718F6A16F933DDDC89
1E9C6042FF35DAF295574EBED60685F10EAE1ED416C434675AFEC0C7B3D1CCD4
23718AA4352155EE7C5B20A9A4C6B62D4B7094FAA48BE555CB0DC8E762D429B6
4C360D5CB8495C44FD9AAE7E228A0221319CE786D1E24A8B87C04D2981815B46
5D832CF24BB166B5BB5360EBD6263DF0D17F5C54299607C439FAA1E16B986076
5031E331E890C0A0221D3C1A3F922161EFE92BBED696A77FA249F7FA944F1C66
93CEA46EF483D1046E1A9FE6EFFA27CA8C9850D15429B236276FCC5A538CB425
860CC91CB0A5993C25B1512BA9E543752132BB19F3614335CFD3A37D135CE4C0
818154A049FDD37BF1A843F0983CB34BBA039100AC63167238A63ACE48D82E48
8196066256CA4CC11BD2C636B194FE71F102B1D457C422917E243C440FAA2B46
FA17CB80B728B77A07EF96D31D5EC80F1D0352863F68177E4F68BA76AC77EFCC
41BCCC6580590696D0D3812CA6E96386C18436C2938B36E3BCFF07C029D465A7
DBADEF40CC317216B6F631AD82CA957F7EA4AF071B045D2DDE56381BA275FE59
87D36507BC80085920AB9C3042879D3CA890BD15DE20FC75F2DF6D80192C2787
6569B3C7D5FC6630CBFAF0BBB88A5D0EB528D09D059CDF5F9B2A6A0D7768B989
66C8391783D179FBB013476335D39EA46F0083106745A11A6AB035D69BC4C78D
51F0A7E0E35DDBBCF4A23CBCFC76BD0A3CE9AD88DBCD9CA63673EB83CFF57472
F27BC0D111482C5E2407F0458D2839351007BB526053ACC5C0FF6206B2953C93
50E57657B376DD087D1F33E150C9B1E5C0BB3EE71366876EBCC64A3B68CD91C4
5B8261D9FA08099BDCC0FBB35FE44DC25B26ABD72A8DE84EEC46E015BEB63451
6E64EDA0EBF49A3B1004C3546ACE8D7F8AEF58EC30CDE3CD8C3FA0B952F4B8D7
AC1A5E941631878B1817E10C412880A414C3781B6AD8A67532A7B5F18FD6E1EC
4681AFB83A9E85CE3D05E3FFFA9C056045A0369FF7916EF6DFB4498E76A6BE44
91300AC5C68153E7DC46AC75E4031836536A9FF8F8DDF5F607C8D81FAC551B3F
CB526BCDB745ABA11C62B0EBB09B4770CEFB37B0EED373279A334CF98A4F749D
B1B0A1C6438D0FB1C687604D09B7D0F438904BB943CBEF68044C5B979E2842E0
AC5D9D07719E503A9546B9D219348D2C82A64066B2EBB6FF60F39169E60361E8
55A165A1D87BCD05FF887330D1BBD508552613DA140716CBF1C56244A28B766F
5965141696F4E017AFF30FE0843CB3324B5952B50F9F44C5EBEDA79B3D0B921C
0957F3F43EA858CDC795A4EE7E172F47D4836ECC48CCAE9F57EEDDC3B5027DCC
4DB60700C22ECDF0B2392FA173F1E9BF5DCA6B4037D93A7A74FAF4F5F0B7AE55
31D98EDB022B99F26C5F4257FEBE3C753FE30A03DBE2BC7EF46D7E84CE132D46
0067CEF7477B7DB35F3DD8F33E7DD74D587CAF5D0772DA9B71D1531BCCAC6C16
5A39EB148B25F23459D2996A7896CB21132AFD30303273748AF2AFD97E07A9C2
A96F4EF8754FA43DD6A07529EEC652612CE1B98728703EE0B736A0253A86C731
64C0B29C228E091CFC02785FC4D548C25FA40F43BED6F1A14B3B753F20205F80
DE02473E3ACB4D7570F70D2BBA4A565AAA955C4952C7F4E588098F07CDCF8827
EC04177712A79AED14FD6A58590CA9DC435B63C90BB1162AF602DA2D5D4F3A33
28392B5F3D585B81E40BEEAE93DB98DE236DEF8BA32A536C00BA899F250A8866
EA71B296616734020B514C8B677ACF46CA0B2126680D97565FE4D1E216A9C768
A454647DB379C5912D60D28A6887CEEE576D4111DBFDCFE9B3458F272D21E1A9
2BBC79252FA79EAFE5533AA647964242105DE0106D4B878A2B5D561F97176033
A7A3ABA468FA39B094AA8514AF3F36DF5FD7E3659796103F5B013D89DC6BB133
6301D1CF9D5D199E5F7FE96792D64F46123FDD5E8B9251EF87EAF7D39C885971
ADCC853799433B9CCD5CEFBAA4BB02D26465A3B7C450A0B6C5ECDAD7BAA8CECD
D581DC6EA65B0C82EFC57F42E20CC880EB0682B9BB414C8EF468DF274069AE7A
B410E612F0EA2D31C7B31D6FB0B57DD0899B62EC9F830062209A942EDA2F5B35
4E5E09F1D81CFB8F041A7DF0647C4175A9FB3D7E1F335DD113CC3FB7726DC814
F0D43DC49B40676D6859E3A1225253C279A080B1C200EA362277C7562AE7CF8E
481AED2F408899F770A26D72A2F390B82CAF5BECEBA08708A3D6B03825432A48
F3FE434C00771CF4751D8E85BB97A7F1555DE8E5D4934CDF36C0EEC2D3F2FDE7
6E16C93E9B118466CD3D66DCCF26D4DFBE5464B96C81A85C09163A6B52389545
B1D5CDF53E42E66C5D03762D9C98DABA1A7B35775BB069148683375E02AE8442
0BFCC53FE88134ACDCBF760A2E41C74ED56599CA1B203671F2DFC03B251D8A8E
2E11FD1710119FDDB6C7098134D90F8FB896D5153A2FA0B7FB0314FDF45F0510
6CB4E5E03072C214A0BC52141AF03A349AEF61C49DE74E56FF237D7A61B3E017
05C6DA2B4F217A7ACB3C766C747CEA397A5F74A3007E7678E2C58CAF3E801A75
715CE0E90286281DD2A688183420FC63F44C24F7644179C19F69B43CCF1D69F5
5D56BE380C358B794C2EE61763B49D63753FAB6F4BF4D7B35D01E3A198153B35
491113792D4980EFC41B863696FEEF72E35112E7BADE4F01CCCD8E78B6C55247
9B1E51C74F3BE16F39C0B59D107FFFBC67F76E7EA97E2041E5D0F837F04614F0
175F0EB2BA6446E98FE1B7C6884418C2E63614C86A5657A6F510851FF1197381
6C9D25F988B97A025C9805CEB46BE11CAFBC39FF9347B091E3DD790EEE5737E6
7ABCE5E8CDB3AF37373E145F340A6E7770D5A0915D4862F8867C39DDB530B526
265F1A63525475398013F04B49F67164F034BF82FDD40E02A5200C48499964A0
AC95698495E191CDDF1E5081EFB6EBBD8FF4C49BA9252A603B3E95EB856A85D3
762F7A5A783A3F7680966E741C04376928F45C0202C2A7DA20700DB0857B46F9
8992021217D666CAD26486FD8A4E1F4023DE116DDA8A0D5A826235FDAE0F2269
E6CCA5E6E543778DA375EB2F0502C87F60FDCD5C26A477D10A511BF3BF9322D0
A6D5CF358A8F64CD0CA264AA0476CD88D97E2B329B8EEEB62E0FC37BFC5FD730
634E2E5C3F61A28CDF1B9B22E9B7DD6B6C1E79369FAE640729ED0A010BBAD2A9
8CB314B16B4B33575A0CE6AC3E3C48AE1FC1A6A17F9585910316C0BAC2B6E9E6
B495C03D2A4FF1F5A0D2DDD0ED307CD39B3C4F7F46C54E3861D4049CDEA0E641
F2476A526E9AC050E7001000B2C6848457D632AF0F1DCFFB6E5DFF674F6CDF12
D2FDE4B981EB981AB0EB210E41CD56415AF32B47D4836ECC48CCAE1FB7DBBB6E
D76DBCB40D3A50808068DD12D1C1064A7EDCB584FD784D9CDFFF8EFEC680DDD9
7C3713D2D2751EBCDB6B4D935084759EDE56C15A51F4D95AA1618380D5DD6698
6E77AC8BDFCADD9BBD6083FE5219EB59A53C5F4FB5B0258F5785F7F317535671
6866C7406275A3206C0B981EB6DC945854759E17B5F9535C4BB445FEFEBB1E57
52CBC7539470C7635D749AFDBE73113298371228B82129BE4B0CA0D6142709FF
0FC27DB1918679E7E354A5DABF897D9C8EF5A14FADC30FC8D2140B854F2E7C3C
CABAAE3D2A80837BF7F8CEBF3EC2D6CF82E5601CC587F79AE0608318B9F7889E
0BDCE50DDAE88E34ECAF5F6E49A777D15DA87D810AC3F93259CAFBBB1509D707
15709DF16093A1AEB53657201295836BD52AEBA54FE4AC07567FF1D1D5B0A1D3
5D40B250493700C49E10091FAE714F63A24AA98A5781F2DA4391F484D4DD6EBD
8D243D45E089AC01843A0B408603CC12F6ECB0658FF099EE65B791C63EC6AF40
656D93D618DBF080E1D535150A6AB248EC5920D02B5F0678DC863A83C79A0641
CC2097EFFB9F6D14FC983E99D27F9136D8DF4C2773BA052B475D09EB09469D2B
B86F7BC232B844A44A7ACD91A39BA398B920B5729591E757D409E2827FC44B91
FFB505365BB9BA797C680AA9134CF23E91A22A2D846383AEA24BEDA70A1ABEDC
08AFAEFAB484948D1DC312683829AD9700B3205A433016971AF248EB25722FA6
8CECED18EBB01D8637EAE8FFFDB7356D21257EE388EBEDEA3D477C0433ADAD9A
A04C4B6A9E56344507DFC5527A3D23763B76BD8F81F317A7974C5A29C373261F
C480E3766BDB7F06B86095774B74948C839BEED6D6C31A27A75734897477BA5B
FECD08F2E9B0678F1C75B4349B13711664EC5561996C797412E8EB7FE362AE5F
0C08638DCABB6E6E5C1EDB206222974F0D7417CDE937FC52E44C04AA38E2F36A
0C5AE69E84EF52EC5EB1D04367A1F7950396B2E0C6564EF9A8E2D3ACFD8C67C2
C4DC81E7F4125C53B0F1F22A45D966C86DFCDBF699BC3E26BF856E9E398ADB04
340CB71315D89A0A06D4C8C61AEF51A2BF9DDE503E8981DB670CF5CBD09E176E
265CF148A200908069A356CFF8DFBB285BE2E378FC46E580326593693EC462E6
41E06972A5261CD7F6F20577E83176B2C8D0BDC40D2F9107F2A18F70ADB7D012
5C7326058030E2B5AC0F0F6F456B9753C2806CC4C2E9E615BBAD5F6818CE09F3
B570C08103526C7DFF028D788DF5373AC68A0B8A8EF4F78E74F724DB01EC7E67
FC33903B7DDA3697D159B7BE7662E49A4D20FE29087F469ADA8F5D5D8547404A
075CF9F94A66186C177501453CD3FE3582073DD86F044382FA78B0E924B11C3D
C8938A559F0D5BF2DAD4417253C14F18A015FC84E923D372C66C011F81855030
29B9A1118ECAA3F64D2E64AB21C48203C608CCC92CFF820CB9C8026AA899A70D
C8848152E951C0C3F6AD7B57B980E74A7368F5366491D1BB097D8FF4A71966D4
2DD988F4897A47718193599D9E987C17802C37E47BADCC1E0EEBCBA04700046A
BD2F6E793C31EBF5C89965E329D5452E0E644FC01E4A64DF3F74F36E773AE887
DDE805528C272B246799EEC281EEF14315CF0F9F714229942165A6E8E0BE6DAA
F7990882F149552ACBF1101C0CC34540AFE147796EA5DC9D9AA36A3480552044
F527BB093BBB0BB97E187CE34C50128DFE49F75A1FEA7FB038BD30EB7641081D
EE3432279EF8F694AFDE8C03B25BFC2B5CDD259157280973E5B501F24B339883
23DF970D0D828005E45C4D161840EE4E7B14727B086F27E43E6E3EA6EF0DE68E
1A63B501C0AF945259EF364631E8E8DF511894E8900D7BF2EA7412967A45B574
790D727DC68222DFF726FD1628B26FDA27795EFE5F6E32A89FFBC59649CC7596
17E70E0337FDCEABEBFDBD63C5B7CE8FFFE1D3D4047BC3147E3896B5C6DAA746
81BE30C4E671CD96973F8D37C19E10377B35AB90336BFCE45F11C6189F1CC15C
FF852770A13A599488EB3E098A4AEAF3CE1FC15922E4C38271928DA90C150E23
4D3A5C32A6EC201192FFD8BEC784F41328E586128A0A15C6653CB85BF452ABBF
5E8E9D8CCF2FEF433BBC47B9CF05DB388C0A6787B78A4967A5326577B1D19A02
42177CA5CAEA90D1B9CC6D71FF2EED18FB984B6871764BD1BAC318E2717E7BDA
4097FCB8FCB635C4EEC03C3504BDBFA2B4520DD6104F783317388D31B2DAD08B
C9A0DAADC0D6DFBAFA59CBE6E358CF0EF99B5C327D0A3D115B4AF2D9DF46E1E5
B36E223885BB7E1E8B28BDC88A3AC6F00331D9A24D10FEB8D57A12FECDEB0D9F
05C2B17E6B7B0934D43B9A24F5A9BDEA3D6D9690B071F9E76A9C1D20778C9B9E
07A0A9B9AFDFA66E765FE6B7F8E765225F2F36B7F17DA91A4EDF8D09AA0C3FF6
EFBEE1741A6D06C17FCC1069527F86804DA275D8C6F885EA24CD812B255DECBF
9CA92D5AF89E0EC3EDDDCC0994130B50FAE0CBBC936650D9886E8C3F79BA7B78
FB84A350349564E8CEA1EF8D26E4FCB55C69418D7A4DCEF51473A6E5104AE093
92546A9760E5ECEA9F2FCE0B991E85351DFA368B689AF6978D929610EB3B5B3F
86179CB516D72B8E8CA1AADD820F993EB7ABA18FCB0937095FE4487256A80DD5
0DC093C9E693265E828A441345EA5C4EECC58D5AABC0D752C1B0F86BDE60D7C0
4D7C218132B4D3680090B5CB65C8107B34C9599D055D786DC25523AF3CDCDBBD
4C5F579F25F6F6C8B0D9FB1B359EB83E522342753378E3F43CB223DCAA3F7B01
6E18B0C7B457A7055B3CCC4CCD1A91A9ECE26A7A50DEE4ACA130DD76A67920DB
B033E4EA6C08A27AC43C5AC2A55FDF4D6FF38C1F6ECCD99CD8F46A81723BB6B7
6B4C3C2E2E5B8584AD015374BBAF695DE09FA698B4855DCBF33DD70D9AAE0959
BE049B42DAB17BB6C4BE1C39B7DAE297CD9ED4A59FE7A1E8114514C81A7F567B
7814B47E09C2B12838DF827ECE6D275445CA4E7892D99644B225C06917CD8C63
2D443824A34096CADFB67B23FD0CC520310B3EF0414CB723B3506C5EF6763554
823377B7A5001036A96F08F6F5F52C89AFAA06C0F6DB1FD83F056774CC7F2283
B249B075479600F2083573D61FA865EBB3E287937147C9BE9926DAAAE3128D1A
00B9B346B62199A1AAA40D8B35AC2F519FA7AAC91E7AD4C4556A6C66B986A873
AFB901376427AC06A5248DE2E9F456286F94838CA9AD4C53DA0DCF5A4F60A86A
F01771072FF46EC2F7A7F271B49E919F88E75810626098049E92A7DF9313DC12
E050920A13610136D6E15343DBEA57F8154C88A985B0E0E306B0F9CF07D37C22
96B5D2DAA3116D2B7E450C8F7B16278DE567FB37E8F70F22861A00B9B346B621
99A1AAA40D8B35AC2F519FA7AAC86F30E1543C91903100B8AE9369DCEC61F491
A3E6D9C335F5B60E17C6665863AC03E8F8CE02D50F5054879620960ECE80B647
9023DA0394E3CCA13502D03B122C23CD251D796DC4A59A6A3159A5DBF34A9031
6A3FAC59C670323A6E550D7779D1096790EB7D8991E2D2BB4E21ADE908815E4B
59FBC32679188117A12E9700B7EFE75E9B938C56D9FE5CCAD91738167051920A
C09B4478300656FBA51BC5F00137C6AF5840026DA68D8DF87CD5567642C9457B
275CF0E38D7D0FCCB303A6AD3DDFF2F57C70480DD0D7C3C57F7C00D39011BB20
A66363233454A59AFA644C04DD3C883396E0CD2FBCBAC78714A00E89C93A761B
B4D1D66B10246A5F57151CA106F47974FBE8689B636460B6726DB5E056F1F3B6
ACCD076F6733596101264A9552A1E996936EC7D0A2324269307CAEBDE021B4AC
202FF4C6BDDD95BAB691BB29CFEA534319E195268F9BAE40C076863E513A5503
A807A7B080E348426805353EB1BF713FAB7DAC397C6B87F9890C273FF8D26887
7C3A3F546B4E659F4CBCAC34142F4E33BA61DA1E50699E9F9ABEB6207147B923
4FDAEBF07631833BD20F64E67056324446CC255951E05DE00CDDA4763AAFF269
2126B4FAD8F94A3BC771C29C5837FFFBAD42F40083C2E412EE5E686A3D3EF313
DA6EFC55D3AF10B647078CA66EB88EEA88E63169F4B4DC168A19486FB4C1D31E
05643BE95D9467530DEBA676168ED633145AE0E97EAABB279579DF6742AF458F
D152C0CFD0662D318787C108CF6922C96AD6DE8C9EB1D14DE9BB73AF0AE80410
C4FBC3A45FBE3BA447A3B8BA8ADA66958A20A94176FBCFC9EDD1195D91EE461B
7DB457EA8FCE8009D30DFEB19A02D18CA44689E5DC19F9C559ED8F7F8B7866E6
D3AB07968275204BB347F0A7291D658F7D31635BC15A0D56BA691658ACE98DBD
EB918008536574579DCE45F43ED178B421C67E51AE6A432F768BF397810D1370
567A791629B4F9CDCAD4A6DC41F9B6ED071B9F70A0BD023E32A55F14E55A2D5C
EE2F4722CC5D566003B04D0603504C04951290F43BA455DEF700E6B5310A31E1
9B37E2722A4F8A64D1DB569956005C3AC3CFE91544BF5FFA32566D2B54F3F661
E2B4C5739321C417626C8BE34DEF93F42EB0554BE826A2F95A98682326D76EE0
D2C62329A19C7084F6844963608ED2BD5FDB3DB8806D34BDE286AF78464D9FBF
4D80433243428C8814AE29342016D1C381E1215F0849BBEB95D3FF126AF3DC7E
05182EAB8A2552D56AA3C47CCD8C1D6E639E73B599C7AEF418EF47ACD1255068
A21969742C55D97F1AB9520D43364C2B89E30AAB7CAE12EE07B0D606F78C7BAB
5DF32ECB811357F69CCACACF897A7A1B155C720BF87AE66EB282F24B9846FC97
D61B3C91D81F3591168B48C81994954B9E6E669547342191612757ABEDE0E7A1
DF4D95C3052ED84AB231B88E71B9D3FE88048DAB5228DBA3E3C6A5EAA914B1A4
96AF69E0C2258EFFC8393928DCF8D9D4CB3F873C63015379AFD5BAB7653A44B3
F3E154EA81AD5393587DE61EAC51913F84F129AB03092104EE255A2C1AC7F922
3895C1DD6DE6FB1CEF7C0845DF5481AE10B9CD464F3D412A3A62AF75C9576638
A6612464EB0FD92AA2F54C692C70F9DC0AED76AAF5ABD65FD92F211A65150DDB
CD913E58253308B3C6E8C55F1E978E2A17EBD4CB1C0EB0BAB482FD03BB29E858
8DD06294E55CE6EEC50CFC9583463AB935630FD597049A134B62C26B1BDFD5E9
AD6E2BE622125051D7A6493A2BEB1555907C609EA71EC9D189EF1343D9BA3765
AA24649F26C2CA69D3BE328C3BB74CCEB33AB86E441FF7A0D33C34E978F55487
5BEC848BC7439EE78F86EF2FB3FB5CA0E460ED3FD00A0E2580BE46A7C2A53537
46B4DC4A61F72ECB923A8EC20A550FFDFFA93FF92C0EE106F4328882800897C0
1489932D065C8E9F0C04DE723C66D0519F2E4FF3A3381CBA80D5C54C0C653173
9BE15122A48B8D29B5134FB8695930CBD5C8F89A8704872D4BB72DCA67ADF52A
D049485D8916D491301D6F8F9E8864D2E7440A64DACC3AA024CA196B20B8C81E
463A5DD63F1D70FCC21D8661229C73C87E5AF5F1C05B1237C7D00ED8996B99F4
2694359D0FA92414B9E7B3696F457A2A87F04B50ABB220F876FD33990CB16C94
1FE51CA7359ECD6693806E1CFF0036CB3260A9C328A9101DB99ED03528E9C1F8
381F733F12BA264DC1FDA1A6A8E3EA0B3865C62BE8EED34B2C180A3E9BB80674
859BFA41C12003178AB1C0175706AE0549642344CC2FD853E79560A233164A11
80D858AEC1473B60740F13E12E958A83259C05BC5258940AFEF29825A67B7409
66AC32FB33DDBA51EF3E7FF93F04161883E39E975BE209A4D257BB4ECA6774D6
8CD3A6E89EFC4047386A45E5EBC99F1D217B97AF8A82A43CB5E5672055C5BA47
811E1A6DEF133EAB1084309C03AD304FE4C29EA0756BE3B09650DC618AC09126
891CE26CF3FA434F574C9453C49A9178BC1D6A7E0809B5AD420FC10115FD68C1
0B9A83FDE4E64CB79B220E19C560A7F781A9D97C773E765C0E165CD3D21243A2
08EF25BD8B509E8FF8F1F91F92103C79EE2D53B808382DB6936FEA057C0AD698
5E0375B7696189BD34D732269FEAD81DD35DCBC4D8FB33C55A0BFA1B9164911B
17EFFD65217CF397CE95F721DEAAA30038F2429EDBA0A2D5509ABF574D0C7D70
697B73BFADE92561DA5312AE94EF917D9DB15696E17035899FDB03EACC942544
0059EBF6692FB8A31F5A3E452F385AAB1FE950041B3C0D293597EC237CE5C9D1
1820E60714780B817596DDB5F29EEEFF18B7367833C6485609F4758B40EA0BC7
AB378CDC48AE9619F45A6523C25E29637E818F3DEF5FF71EE4E9D1B520A55B56
B8E998DFBFDE5BC98025B6A1740D272B23BF62835A75171EAD3609BDEE1CF50E
06B2C69142DA4B019A4A2D42E045C72269475DE9B02E6A656F5CEC25E2CDAB7E
3E2BD29D6E460691CBD49F4CA39B6752D27C9846CC090E752DCD752DDA1BA07D
21852C7D77471EE9DEFABD0DB4DB4CBD2908537122BFBCD3D64463C8D558D47F
D0D0331085614FB069CA8D80059115F30B8A703984954AE3C94BD04AC8543FFE
CB79D1A4F946668C6E61213FB59C1E38BB96FDAE49E7B0E04DD4912CC89102F9
599ED00542250A1031F74F239781FA21B2842FB54689E1A7DC88371D97EA9710
9E5575FDFFE5A07A63C9F9DA846D9E6B3C1D7E6423D108EFA37875169B1EEC52
E73789E307E68F1D95C62EB297D9EF122E069C85A40B91D4E91AED7FE13BE59A
BFEA6A4C65603D03DFDEF92C3AAD7F159CC26C9FFCB212EF94BC4C8C0CE36A84
A3197D97FB2F10CC9D7A16A791D4EBFED98F4175AC6BE1B345653F916B04DC02
FEA6C43A9F4D177F253649B5658F4021A89672BB4C632F807D6CBA65A5CCA350
EF00CC9A033676EB3EA4D3D0D303B45E5BF4EC8735BEB5E46B25C9F41DE8AA57
17674B08743CE2FC7FEE5D44D178DF32584E5C3A3613CD02A613B7867004EF84
5D4ABB332CA2BEB4E4FE3BB7AB9EC21A9D303A4831DD982DEB8DA0644F63B8E5
AE91FA70075A9228CDEE16002FA6F235D96256173888C1FE2DAB34C5A75FA907
9B4F8DCEE43E14233719E4A69147BB986FB6B4969B7DF5BE3DEEED0015EFCF10
FF7736A80FDF2CEB855792E5CB3FFFC0911E9687DB875AC725886B140B041F46
F624C5D26FAB85E490416D5D9BB3CF18A0AE45B57CACBEDB851B18650CDE638F
A715936196669B0FB9116989ED92C7E43EF64B2693F7B58C1E4A5AB472438E24
B87E6D9EC2F6715021E8A611D1EA6D672F7547E91060A48075951BA81B9F4564
DA6C51C3F01ACB1AF5232DA1040A2D1E36A14BFE0E4AA2DACD52A8B284340086
2BC38D1D6D57995E2D1402B716E236E2A15655F704489E4BD09067E17ECF47F3
DBFE161D72EBDAC7FF59B7C87368BE3561B46748B79CE456F0C5EC26FAA781E6
D0A2594E39AD746BAC288FBC4597E69604CB367BDAB0C7C8979275637C7C3DF0
736F60F452C75EEF3919EB6C56385E676767FF1A48838221A3FAB6E8027A1087
3C04482CAFFDAA0BB145CE7E1F6D6055DCBF374AB4D6560B31C3DA1716AD5B28
6678C5048808436AE91132DC6EB0005EFDB3B6C651F4BF6E1AB76B805C2EC479
678C5B84915DA257272FA40AE018349131EAD730F71E61596F795CED92AAFCA0
123CECDE73E39C18C808A3B6F5AB92A2B1FB5A89B9A0804AA09700272DAD2B73
05F0CCFE723C152A3F4A162DD5CDF9A6528DF0C563563C2EEDDD2E0E9D49095C
0F062494D7374550CCFB2A34FB9469E4CCCF24ED625237EAD55FA9C1CC2A0BE2
2D9FFC4CF5D97E5C253EC6CBC95C776157B26448E6D7B006FE2D75FC3219A377
7E7FA680950484007A5EE0B37E7503F9DB18D0810C26ABEAB60C81AC7231B4A5
72ECB05333B28688A402EFE8A17C676C08DB5FB4E6F0D7F93E3DE0DA2861E1CD
188B86AAEED6F04E845FE7CE9A373C5331B7EC59D99273AD02AFA06E0FDAE671
9B0A475F1237A89EE47EAF9B93FE2A825ACC13C5B1D171268B38732EB1EC33A1
BBEAC0D6C9A67671FED1E50936B0CE6E364B62411E6DF77D4A4B716DCDF67888
77A3104070C223170140A7516D83EA6B4E31E0880843F700FC1F6065FA37F248
AE52A1FBA983CF46AB07F0ED98F38BFDA1907B8DF5490432EF0053067F9E117A
415946DA7D8F3577FD99AB0611B52E510D6D4448E7C1746F649E0B779099D4C4
7722DA9AEE0C2B72825B335C40FB636F54D8AB49037C36E00797A7829D99B369
F1F0D0ED9932B956C4C3926ACB558D7901EE1B7B5A3269178C6039E177DA96C5
506E21C1841D67064E8755283BDA1A14F2AF700782F7B3423A172FB55F8CAD34
1C90FE154344F677A4930BEF4F9CDE56B87E38A46BB89475D0F61488AD740909
A8559E8DEF13CBB4CD0167E0B39BD42A84204169EDB75716BD866C0B45E89B71
176A54E56972D3D7132A19C4D293FE03DE1B4C63B3544B1C8FBB9DE795630A09
B14FA05BF1A9D98D6D7329C1E15AC730196F58867F499C07C8CE074DA68BE825
1D60396D29235B1CBA8A921AED823820DC757BE496DA06C5AAD0B763164CD047
799EC5765A12B965AEEC16B98745EF82404447C87ED40706A2A3339850F8B706
FEFC81EA3A88B4024C64A79740384D09CD8FC987550BDAE91726125C32B8BEB0
D3107CA1AEE073345F225C0EDCFB23FD0636EA28FCDFFC8EB7BEB2D03FFC655C
7E644A8A5B623D1880F13BE6F1F26CB2F3B73A0255F93D6FD39E8EADF0771E91
A9EE16AA5B319E71526D3008D574491409677FFDAFB274BB53C8BE22647A3019
CF331D5544CAC53E66B46EA4A2140C81361355DE722FF620CD44643DA047D06A
810E77AFBC83F1E57ABDD95BF8BD6A37B520EA9464C8203C7331FB8C8BDCC356
4A45CCC3BEB826B39C6C9C9246F8DFFA8CEA79A99AB0622795E40F1A099B6FF7
FB5A606F7A211F725C9931364DDE168AAA3BC83B6BB8D13B429C59FA26CC58CE
E10A89E782D1E81F44E7A3EDFBC0CAC9BEE2C4E60425462EC6CB943B58AFA7F4
BE652F46D82AA121C1F3D3D8077F588F7760D0D4985AC70A9F210479A5194B3E
1F2E1AE3B7D7558946DFDE29C61BF7C77CD72E3F2DF7D4E665AA2C89390FD632
79E9AE472819AD23AD9DAE2581870DF08BC74DF3A8F645825C9F5F9D7109871F
31EB98F5CB8CE8F84A9D9617F983A5853C0A86EFFFB94024CB2D6F57CCC4134C
B607D56892AAA0C2FC060BDE6601C282FEB8B53E29F93F43751CEBF414AD61E9
36951299EABE77DE16A11A5AED88C76B74A29A78318F922C47C95FAA06B2B003
F79BEB49B54DF13644C8559CC19E52A7EA9568AC666B668B42A8F75767248192
4FA699E206C54C2893990FCBCEBA1D2B1ADFF8634B8A0627EF3503F29B5E8F7F
DE4B4984660FF726BC9B8397B3612131A68659C1B7A35C28DFAA3D32E3EF1ED5
9A6D69410423D25FAA52A3C3487F6F26DE042249A6412E7F19A4B3CDF0944E13
2F864AEB79652A4B4CDFB168F136C2D0ED6DC353848C4D839B902B20B8BD55F3
166A2942E7F5D7DCBD49CDB76F9CA389B5806E81AE64981D3233B7F0C6B2516D
90EE6C484241A8D61FAFCC414BD84E24A22BD08CE22AE0E104D634E62DFFF6FF
B389F7703CCB87B10B13245AB6FEDCD4CE9451305750F05D13C849B6CB10C595
AA32D62A6D6C94DDCDA4746A3632BD72522BCC269D18B0912C285C8D590966E6
404F4D3D26BA6DE9D9C440A0E06B0DD4430890D937608AF3CDD6A51B56156499
A5317D2CB29FED2749139BF0242103882B7C5C866C3C05281F26319435F592CB
C918B59AF19FB116E74C37B6CC72B6C616D771E33230E1FEA74DF1351ADBF9F5
FD263642940E5B7C1575E1EB12B03660E64B7F27E363CDA728EC49038F6CDE81
B9F105ED1B3A31422EC91536FE89F23531632E6972EE227C7BABFBA592BDA358
B1A86D43736B869F6C929ADFFC2F1C50DEA895512A4C1F23D68E7C332D8273DE
D975BD53607ED94253CB78FFAD6ED30A87147B90FAB621D02C36E94ED8321302
33B6BC8D93EB1165116275AF74C9ED633E09D90594AE512DC3771CFC6BC26325
3D519691036D00A00398225168E3F9B02ED03901AEF413AB04FEC99799BB58EF
F28389F2B77C3B8CA1FEAF882B58AC9EFD39064899037F290ACFB564CE4589C4
DF73DD1C1C7877365C4A3D7B5990E99F52621F01B39E6DF6CFBE43ACB62C0EEC
AFBA6BDEA59930D45068DD374600A6ACF8B4FE9ED5B391A5D2DF077D00E17F74
2EB7A807172475F15F1AAE6DCADA9751CA505B75F5C6FFC9D4DB5C342277746E
17AEF252E557C85216D663E1CDD24726E3F6052C89878548D963DC81852D29AC
2E87A67D3E4A50B73FE01737EDE05F8173A8088D4318B39DD831F8D9E349ED73
82A54FA625B7996592FB0395E029C1124EE0641A8704FC0B84621688A431AB0E
740971CFC1FD7E5705C65569101693F0D2A6D6A8B057BDF7E5BDDC894D78B118
3835AEC8B11687D44D4CE0DFB8FD0B3736350CF7A4F12245D58118BBF06AD22E
589BEF21E85AA9EF8EA2A9657BCB42984D3623B06B20C69DCA89193F1471C976
670028627FDBB4B7CE584872D8A63EB430DF081FB86F26B3410BA3333480C81F
15F5085F6024C0FABD33553FA79C8FFDB5C541F585E3DAFA262FB4D11E76D5AD
E366664746C541CBD6FE77E6D18CE70581BED34D39BFFC802887C25D795C7EEB
DD21FF273CB5E7DF52D765089D0EBFB4DB958F58DB271D03F7221C88D424FDFA
6E12FB13530858249C1D98DB89E0C42CA2DEA17C27A95AF55D9CC0ABC55E08B8
4C0014F1B56438CD221BCC55C376AB769A4ED30D575C56D158D9553FEBEA5BF2
DD73F868C1A561C110499E7BB4634A5A6DE29F9BDFAAE650BB7F31566A6CD6FA
854104F583B6B476E96E12E56C01F8F96729A7FEB86F746A713B84202DAC6FEF
888019C8E0CBABECEB0F7D00BF0FBEB30B04DD7021A904497E4CF4C248948E39
7F88906EB73EBED204EAC41E27E9EB7827913863B6B95E58BFAF0DBA18107D6C
C5C4D7402FF7C4C262F22CA4E7C7F7FBAC94A22696EB425837C47130BFA47401
56084D9DE011F705E3FA9AAE210AFAD1DBCCD51D4FD30B0FE4C312DDDBA9807B
B4947DDCF06BFA585E4D8471325F6ED00063C31A920F8A273D0B470599521F1F
D9A7C90BBB6B0F70101E27E4872057819EDDD0F3409F4C6081A106519CA01B98
3975F3244DF4FF6E2C0D7CE9384AF4BA7A0E2C440B19CDF4CC7849276A1AAA5F
957A1D5CD5410D25AC5B5B0040A6F24050E126309B2ADDD2AF889C0C5B71CB59
6EE49065FDA62C59EB53FC6C0D711D39671D42612BE57D3A45730BCD2F5C198E
5F9D4FC36F065E6DBBD945686FF2C91C11B17F687A2081D9BEBF187360F7F1D3
AC695AF0FE90FAB2560AD582DB1537F28B6D485B997CF8BE91AA0B96E2AD3F00
81D6FC11A0735D0AB9036F31F4992A71D14251649AD47DCBA56E983E91B272AC
FB0CA2F9A6A40A709ED0B9082EEF5CEEB73DE2C32B8CFAFA944A167E45CC3957
2C91C79CAAF2B726074DE680D23B992D7F754479CD369719297616419BADAC95
BA87D730F9FE2F3B9316FCB29B850E3E829021A882D244354C761373EE3AB534
4BE85AB8EE2E6595B9D3353EFCA4B2836E56FF0A65474AAA2AF371F7FBAC9B28
C86180BDB7DDE666BAD8D096FD007C14CA94C18B2CC80C14A9832890828BF47D
60AF5C8350BF46775AE4A71BFFBD1A9BFFF360314D32873EBC32C45F8D024917
618245C9F425EE1E9D66510A1A86F807E957CB8698CD782684BF31522E467460
EDD603B86380D6BB826BF4E27AB8F87A9E413651F483982560E84A24FD33C2B0
97F8E0E059BF47891D9B173AA71B77D439D62443B9D747D37CEA7E27BB0AA488
08E70DE8EDFE7D803CBEBEEC5F06D14E4FB96F0F69193E868789380DC127C1A2
F3EFB31E73863967A4FF7FCCCD04CFD61476B4495F908CC73391041E76B7BC14
C0E3C03464CEFE78EFC1A19240918D8BF548D0B7DECC04E1E7C16CADF953706F
C723C9A4C3E2361211E1B064A2B59B90EA972CB8CA3E598869CF15FB947C4D9C
05092A89F03CDE0E64DB4231848DEFA109F6A7C3E2C53CFAC71CF2768873BDAA
8BCE5877650659646DAD9686A86B6612D514BAF399BDDFAE4583B3EB9CF7C35F
D451FD5057C244D51509C7F58A01A2537DA4777BFACDBF48EB66B3168801FBC2
47476D92FE6A3A729B9E29FEE564F9E7D9FC5233222B80F521295DA701DD77F8
08F3AC38F48E25EBF47C7CCA97D5F70632336D1C7F5AB2BDE984AF511EC5FE36
25034D0440D13DCA3AB0CD17E5DAE88D33AC9465A5B60046EF8F61627487113E
D4682C5B84F61C5C8986923BA2DEA79577580F5799C825BD4B9786473E2C20F6
F8CD3E245D58F0E585256923F98A702E416765B8FFF0B574F28CD592FC06CF33
8FBD80186BF4455FD4E54959F5E419FC14228BECC209BF512BABAD5F897C178C
341B5A6CB247B5A594BDF4ECAFBAEE2D8E5A1993F2B6373BD5D37D69EE4EB9AE
AA95107DE25B35A77B17CB09AEC3E3CDDBE723B11A8ED434C2E542E624183924
22CE48A23A0E611F6048EEC694AE2E874C55D98379CD559FE34D302FE67E6983
1AD0B2D09EAFBE660D21B0E5221546611A586D2B2C1A60C29BCC9CF53232454B
E77D1A5415993C53443C1AEA72367BE7FB3F57B215DE8B4FF3DDF94A5136BEB5
268C1CE99CEFA065001506F3916D1330D6342EF9DEFD365915E3FBA85706AC31
267DED1727735E6700A22DC6739A76A5159C0E6599607534E588FF88BBF255D3
8DD7C431CC1EF45E7241AA216794B73E40DF9992139828AE670C571684DE9EB6
8EC3CF63ACE20F2265FA755ABEDB9BDA56B9B838F6C0CD3B0B504858B6C98118
B042D04CE2C41BE29D86823A051D5355505873F398F83653F0BFF36C3A579E65
A3FAF83BB4A32BB09E717CFEFBBFEF27CC371583DF5B86A556402853FF310996
D457C4AE4F5A48DF55D025654DB47B805E2F6077670F970FF8BBEB62D1D4503D
746B945A1642F37306A0534CBBC36779F45D02B91AF5CAD867C59FEA52197C2C
FFBD16B816602A8938B745FD329B97EF5832FC993DF62FC14593FB1041F77031
D14ED5A06F34DE233562EBE46EF2DF7C4DC2FA6D157F493ECB482AB4B80CDB02
4DD088F70C91419497C3B682A50F2E711F65A13CE7F0975D2DCF0F095C1E4D60
45DA8FAAA15094F4380B7407263691B710C91AFC97674F2843FB709E08E28346
2DDB18B2E9C21F30D40C7BECBE1C6EBB3F75D1772C823AA04C6D9D2943A43793
0481F6F3C05C8D7AF534665C5CFF2D2D090EB702572D3C2049C005C2FE55E91A
87CBDCB58A8D7F8E98047C22987B005DD2B0432D330AE3C852F9D90DB9A2A541
8AA997C16C2988EF7E0148A1DF74DA038B94770A995CB3AE20F3D8C391A5FDDF
76F5AA19350915DAE9630A54A79E0254DC88A9C4413A41B31228C2A7351F89D6
AD783BAAB5EC5299C45653409F431E97F66392537F8C5B5E34C9C6256349661A
8872624960BDA3395B9FCF935F98768A98DD288428DC05CC52F59D616EF85F9D
FBC2884C40AEB0F7B210A16F187998265FAABEC625523524D0374E34A3A78F5B
436CF000514A8E7BA6FB5B44EC192EE2E298A333D20D4CD01885C2AF1FA17CD5
DC6C38DBE001CC381E57D7B00FCF5F246C5AFD97D7F7DAEBF80928F5367EBC88
C3F36121DE0957AD1610C7FFED2F5728DDCADBDE63E1CDB4CDE6CEADA87D16F3
BB71F5DDB909BC002A3D6D50D8A7B453A4A15E8B8137495F25DBBEDCF055666E
6B6DA2E75BA9995538EADAB74D3DCF35CE7CAF034464536B4B9BC7B808FC7D29
B548CD78AA6A6FCF09547C27D34D3E982DB93A891AAABA4C543AE5D534E65CD3
BEBA889345D7A3FF6A4CD12AFBA4FEF4F5AC772928D69C68693DD247618F4746
A6DF49ADE51D696D133DA3925B0C77FC7C4F3E6D865AB97565513C1E9BFC37AC
BC24FCA141C20D01298A41317FEBF2ABD6824B0211CDAF6D02B1B53941ADC817
1F84874886CC9C2DCE86D7F37CFEF89833AD1FC0B7F466A8E9366E0BEFB97591
F9BA5D835B77624B250F783F4334D268CD33668C976DEE2B6D22C154BBA43B13
68E983F58E9C1E574F41ED7A5668110C3DF3982180C735E9B6E88FB396525A0A
9D0F8A755C82F37F33A68B06CC895154DB44D5A187F806B5D7B12FE096BD13F4
515A4FF4C3CF1EE514D77041F132E00B13A76A105AB3EB6E4CB99DDEA30FE832
C4FB773F52E37A9B385E8A28F9064B7348896469D83A6A168B34B0F1FF61A2D9
9F8C01DF740E4BEF397E66B5A87C5E297B9D70710F1A72D8C3318220FA0F4CAB
B31D5E51339D70328ACF0B7BAB4EBCDBCC6F902CB44AA85ADF6C9108935595DA
856256A5356183742911F0F4FF29D43DE342018E67F6B116ECD19D0A6F32BEF0
B7928D3BFD35645B530C49140EA4499885CD939F480A4BAF1E44C01217DD585C
9FAD7B6C7AE9040DF981FAF2416397F77AEB83A29274A3A95A53FAEF286E0F9A
7A0D786C2BA7B3698572D3A550CBB2E690677D22B4D2EEA3796049BD9F12DE69
63BD8C455BC5E048B873B818EBA19035ECCC3FE3684393D36D7AA7F323F1A17F
FB4DA0E728C6AD8DFF966E4EEBA5B05EB8B197E71BC91760CA2142BEC03AB7FC
544C630911A288B8298A64627AFE82A90C703DEF0DDEC0ED585CE7BAF408D129
3ACE84852AF383D764C80B2B951CCD295B41B97A44BA3BD8048F7A4B4A893697
81F1D7075857A09755AAB0A2D3619AA7BB3C166862ED796B468E68A6BC19FBD0
7203D380AAF49289DE4F4861B968225F2F36B7F17DA91A4EDF8D09AA0C3FF6EF
BEE3D71A5DF0BE682193E60B2B5FED8BF8541250B992E39E3BA09B482AB45A87
B7902B28E5BF820716D1B70F8A5CD6E4F07D174E63681C9719E498C62A7FF00B
01DF37736D82C6BFF69CF7A9F685F2DF499A89544CE21A194CD68A9EBF00783B
99CD163233140EC770024530E517F3E970202892464A968A683690327ED109AF
AEA9BDCE7871DEC6C8A3746F61EC7A019D03EB58193409217051DB41277EC5E0
3777E8D3237E005E658053D83669F67258ED7929A72D5A0A2EBC2A3BCCDB6285
878A969750B2E49D569E589657BF7D17870576127856D990B158DFE918189117
7C57B42DD323464DE4CD3E76C93365E673DE9FFCFC6103657BB1B5318B5AFC21
6F54E618541BF10A552F3F78EFBF38016205621726D8C83401F42C6CDE885C39
67017081B701639BCA947ED76A19DE4FAAD1CFF3BFEAA81F5D11DD76BADDD812
2A4AA388739AAB1D8195A8A68E42601813C1E8BB064779C78810020A46BCBD75
76320CCD85B077DA331A705CE078FDE84FF26A3CEBD7FC535C46F777E8FEB112
B711881B45375EBA5778239343C1A82D4A56D1CA6629D5A259B1F704A17D891D
F1FDED0C515E16F653C7F38A2F8452E01B0FB8C9090B966119E09CF0F2A5D796
32DA3D95367347D1721D1A90B7633CB2E8FF0FE9B304F7FC61582ABC8E79A9B8
FA10182D8CBC365B0A7562DE0E527931B4AFCC32857F922A40AA22F1760C3D78
85AF654507EA585D0F84D87653A811C8DD08009B2FF1245C3478C47BF8F0EDFC
4ABF84F6030D887AC6A64E69CAEA27CF495AE3EC6EE9C4FAAA5FE19F2EFDFFDF
5D4B40B6A33154CC2283CB9805DF18924909AEA2A42651F4A1A5157EA76339FB
2E8CDEA0C0AC77AFBF57CA8C924587EC8E69E087F3142ADA7893AC78D4B9F224
3A03528359F9CA0BC7FD7E77265441DBB89C9FFE006DA5585F9EF8D12FFF1130
B63D78F0A56D5902A8C9EF78D4122013757C6D445496CD9E665C4CB2B3CDA3B1
081F015C69B17C27CC63FE8835D2FF6CD58F6EEA1A53F151D7DAA69BE637F327
278D929EF3DCB508EE5F973E39B6815E28D7E1B0DFC01D712EB9351B54557B05
BAD90704D226749249F2DFD0CCD34A817F83C468D238E01DFCD7F73BDC406961
1AB189B81F8D1BA098074266404D32CBE9E1B8220F1E9FC3EB2E91AE8EE43F8D
077D340DD31B820E7D29C872DB93FCEF2C13567B53E2CD41BC7C02A96F721C52
CCF3351AFE4188D52022668F609203AF8E67A01BB6A46BDA2C23719F083A2E96
B4E081C5BAB17C6EBF9D5E1BDCF7DF04DF478F1DB7B1B7657E7B291E803D142E
37E7ACA66AB279378F36E9209BE7062DCA91768C2C9CB6EE2741F28F26C0F060
F2D1CB8EAD24B2F8DE2F54038936FB2D9659D413E5F7DF901D7508E17C81A519
9A57BA3B720C1693D02E3F5E40673C2E7442DB7B4B326CB1ABCCD61754F54A0F
7F756735782E3794AF5BC45F5818D5000B62F851EB09ABF9A27E28FE4BD009FD
9D9DF6553A21F6414DE87FE840A7D83BC14D5690EE4BCE6ADE20EBA3FA90A30C
4C2DAE3B0A5D4BA4A68C8F9467EAD47506D2F6B527576F1B7A18859EDE149FF3
F07B59EDA5362CDECCBC03A24A3847EBC612072E87FBEF1A4EF1FE73D48B3ED3
EE3233736F2A7D77A990393CA5CBCA996BE2E5186292AE66EE71B9094808F6F1
115CA55B7BE5F2018ACC72A4B70D66D1A07D47CD82E6891224A561B95BE32454
F2E703E7C590A3F89AF7AC60E0184E24AE059C8FC9DBEF1143F0F121072D4BC0
F0B23A3B18467AADA16CB372B9C5ED7AF45E36D0FBB705DB00488BAEC7EDE0CB
CF1AC4B2432B5FC671FC5A672F5C8FD02CD8175CAF404032DF21CBA457DB6577
0C16EA31CE31F9CC4389F36295AF9A767AA3A9EB2E5C2790F8B1187C9BE2B471
4126024DD013CCE6E2B4DDF83466480BBAFA40730E278828CBF869D7E5E8AC62
96D5821F1DFC98C4CB8B994C16934083213CC51C70A320DCBB09A451474D8610
3CF92080EF360F6AAF06DB6153478E7778107A7734C423C87BE97F769C0BE4ED
8D3D3A5D8F1D02C607217FAFB79CE17274860B546A6D81B332557D41CA702852
7253FB65190F2558D993D06B95478EA5C86A030391CFA5CE273390784FE0B4B2
F235B4EDF079A9408A9BE8FE3E0554B271FEA6971257734F374134DF09895804
413D003360193FCAB6E40E4859823D5532B40A2FEC7C78C35C193A8A01E1FA25
3D089243715F21EB9601217D77EF6B691BB1B3E49E42E7B668D99299AAFC1A49
65F05C17882E4286E9DB31983877FBC16B4E5EC481D8E9EF87B75A7763DEA975
0F5D6B84A0C17F76A9F49D5697EE87F9A690672FC8D34605CAE39C1DBE132F9D
F6682D0A24901D6D138292F2F3BD650E492ECA67D539F5618E25570296D1FF48
9E44C5390BA39A0DE57212027023944DD1FED7A99428D8731ABCF5D2C83FAAC1
AA920326C75F62F1785F0953645949706C496AA58E47B44A9CF5140968E463B9
6970DFB390317A8F1B0971C84FBB39F5FB235268A417E0F66519015DDDEF46F2
28FBFA9A2B597EF2230E6A33E1E7B992B2E6977DB02BD2AB761094056A55AFF6
0CFA4502E7877994043E695BA5CE9E2B08666CC6D54C31D0B8C1282DC784E4B5
441399907422B53CCE01B56A7B0FC859F6A13415FF25D97E30C6DC1E13801ADB
E116E0E90EE12A965E8E3D8F024E60FEF6DA64E39D11B5E33409B43B6A616127
4E91ED8977B77A71F8CD07341EAB622A755D0B41283186D67327CD487B978FD5
0D9BCA2508355C5310C155BBDFA80B44E7B86A5F864C31CEB2ABD660D2B3FB9E
F85590F436635DBD68DDDE8996FA2403795AB210E794BFC582EF3A79C9F067B1
C1D5C9E915592F7FABF355F46CC0D133DFA2A68A8D2F4056A28280387733ED4D
0BFA6AFAAB0557EE93F87FC7A5DA5D62B266C68434F610520D11D0CD155753D0
1C5DECFF1763C4242E93A3DE0C99C117EA063D8ECE0B22065B88BF730E6F06BD
68E916CDF73B0950B73B83B651BC0DEC312BFD58FCD53D79FE302575C96940DC
38473E98152BAF5C1769B5A250033A7315C50E1A0D3251BA7D3E82FBC4218BFC
B1270A2853938D56A9BC0120CD61B56115A4207DEF9096D27D3D6B6179010CE0
990F2A98633876C9EEC666E45CED430991223CED8D3FFFB246B66F0E152FA3D1
24A3E50C07F8E804076C9D9956C1FB02C3D396C2BB346739BB404183E327F790
14DFB9FF81E86D2C2ED21595512D22B472A68643D844B4F85DF607574A05E768
6DF03F80B23E478C5ABCA26796BB67894DAFA802481ACECEE7243807390B2D12
C84419356F6B72AE1151B6B6AEBC41CCFCACF35D9DECEE6F9E9FCB81BFF6415A
BB27457FB4CAE161388B27191728081F6C30B4D65856ED16FDB56125FE6239E9
653544DC6B60CB471818A3D9E9B07EAB048E71B51B3BA1AC0CA75FC5FB483282
D5589D95092ACA49DD202041617140BBB65155F6786FFBB998B5175764E68AF9
FE2FFD5E0DACA11B3CA4DD5B1DEC9F09C0B503A4036C453809DF0E66F95AD440
508B8C31AC2D2779A40487A757D625B26D4C3174318D0C636600CE5352C41DB3
39C5C59AFF653C2FD3734F9ED7823B840ACF32FFBFD9E8DC6ED9FA9FF379C70C
8E42E7FEB89311C8D330F0AD6E39865395536828DA89CD94BAEC3762684C3BB8
CF107864C3D34C29F89C28469F20F237309BF5ED9D8632C4BD136C89169D4571
8A88BAB87294EF45046CEDA5A2C849EFB86F21F9497121887FC0D03E042B5D49
A971F125238DE14F4F908066D56D63BF3972B37F6DC5B93BDA314C4167C25603
722DF8F19F19D4B4CF9846CD383D3857F11CCE7FFF92A66704671E50045CB975
6DB924A61258BE454D9F70400F5366409303D70E28CD183D707D3F0E3EE831F6
7EA52C8B139B17C00201CAF70989799D9D24281EC83E6536996D29B4A70A4110
92453F5050DEA499563C86523C08C94F417CA517537868F5366491D1BB097D8F
F4A71966D42DD988F48A28C1581AB40EC799FD22B6D45FCEB6F4FB134A21534C
A66DA7129862A20129AE3E4BA0DD9B99DD8DE4C3EB7DCC0190C78571F3C5D5EC
4C59A4365C670700713CCE3FE132472DDC7E37340E5B4B5B858609A41C02D363
7C5EFA4885FC8B18625F1BB8A9E7BB776B37107CD588225511FEBE1F1652B0F6
CDA3F5E40246DE10DF2BF4DB56F9758591EACAE8A8BCB2AE2F2774E3AF8C5A15
EE4F4CF26DD7BC4F4D192C4C912A5347F1FC0A88D9E1C5F5F049C6D467E5E0B3
21CA341A03ABB6E90785DB2D0C4735E5A294FF7ABBFF2A12FDAEBB284C3700C4
9E10091FAE714F63A24AA98A5781F2DA40029533E848BA45FBD6DA80780B7F07
B15BA28781C1F5E808486F3843716F052D31C82201450C9A77CEFCB48F5B93D5
D7DA295B9F1BCD4B0CF16F9989EE18526B1ABEC3E33052C6E1335873D4F8621E
892BA8651241A5C7ADDF2B56C066ACEC05C85A26DF835CF0A83D7BC91AD4E67C
CE7B5DCCEE3A4C458D55BCC4EE3500EC9AF91790671E766C422B54743603B3DD
80D94F90EDEAC8A3A82051D809DDA25D4DCFDC23AD9B5B3080E9F1A4C52EDC5A
ED17379CB63CBCDD729AFE95811EF858DC7CBB6B161424FDEAFCB4B635CC9D88
3F117DA7D9B4500EAA529BC63458709D2BAB95A16E19BB5D86B1FF855E460298
DBB1EB1FD9E60B51837B2A9A6426F6010B1050C5F50CA931A8AED0902593FA0B
555625DD74ACAA44FEFF11F36BDE0E2B1BDA5809D49252D85F6343E2E21E4F33
F327509B17417876AFFE40DFC034DCEBB45CFF25552373A81065224C925E7F59
347AF032498320A4D71BE0F7AACCD43B747A0EBD45CCF9F2C782D122BD4F277D
BBFA6649080400E25D70A165C2ABF05426DB2CCEE6BADA0AB587559112A9FB28
6774B91188F9AFEA9AC5403EE8BA26FE7B1A394683551CE25FFCACC544AC6024
7137244823AF5104CBE95341C48676342C1C7BD36BE3E7F54D362136D36F0B07
D54AD25411BEC3E63960CA99DA6C51B040E1E692BE246ECBA8F41A4BC3C8794B
DDEA5C8A55BDAD410D13310D332113ACDC8BE5129A3B47E186D584E4E06BCFF7
08B6DC29E0E0E03461C073EA8D90205059727637A7399FACE02A9D3F119E9C9E
53EEE95F118760B2DBF17C292D7423A0CA3DCF7DC05E3875270B15F637F2B625
D3A4C5717F7AAB0EC6DEB96170BC44437726FEF8370A38E142AAD5349BC4773E
95182C70A5288D668D17B5DE1B8D5A413287D9E221BF6768D98EBFB7E371EFB3
28B583C840EF710ECB23DBE16BEBED01C91AD181C34E62D5E268088D47B52097
6CFC21F029256D76FCF7CC85EE25AF847626399CAA221DC09190CF963D904C48
20969F199BAF6C36A54B457D8FFEB126888D025CA2ED0BDB25651C9E60B3A5D0
8B4068F1E152127AD8B55D65E399E1E43F03EC6D8F915AAF95548A7C45FE1F3D
60BFBC41465667F5491A4A41B10FFEB04C92757F9636F074F820E3F918A2DFA3
BFEB23F58D9B53E278CB4D04CFDC187419026F198BDDB718C757728571420BC5
E863C2983D55412A547986381F19D0C736E8B34DEAA74C0DFACF1202C5E8895E
20D821636CA7BF79B5B8C0925EC8B40C478B138DC7662E3EC0039B8FD2ED53A9
B2D2762E1F265C11BBB5B54FF7A64755981F6387E865FF8DBE354F374D57AADE
ECB82FBED648C29251C9F500ACBF8E0FF8E9B2BC5FC50DFE897EF2EFF5024F89
636ACFBAFA134AEF1562B2043E1F75ED9A06590378C5F9015EA6CF86972E3C34
5588FA1AA814E3CFACECEC15E6C8E65372AABC2D1F339D1F2ACE6E53FF0E8CBA
C642597373C612E87B273DB68A4A83F1390445FD6ED259DB33A4A8A1BE6742EB
71BC09CF1FCC9E7E83A8981140ED4AEF84057FAC50C227D23DCA957297947277
0D1B4D1C493BCFAD6209703B06B52BD4EBB66F78E2CAC97808D281F5762ADE50
6C2DA47286A8A2312B11DE4642E9051A8AD76459808944194470029DDED77E04
F816D047D7A7F7F7CF258B8F37ABC5FD468CC062BD769D0181854EACF61A48ED
07D54A9670ACB38A6CA58290D557AFA6B2F76D3C2C0D7C2FEF3CF7572F8168DD
E778337122FBBD1485F73B4EEC2651CC864D8FBA1B6D5F1CCF350E3930ADAE52
49B3D5CAE21002C0BC2058C407F125EE256A951D8CF895A44E006FB91B75A270
E0BD7EF1CBA472270BB123C2901763A5C715828EFA82B47D9D001CB7C05F3A37
4D182906892912A7FB37FA68EC37B45D17E0BB034E5E2B7DC8C9A39E768026D8
01F1DAB166058080D42F90499B415AD8AAFD99A16F6A7494E68E34391E254290
3355658BD278E676961C3090EB54F16863203613AAAD505CCA785EE521B5D533
92F303DB0ADB994C5F5824813B6202E7FAC10D391CAA7D3F7557062E887D7A8A
67C00F11C1A05FF85C0A2CD52DD2EE3DD716C6D7EE18FABC7E6E15BAC5D3BBE5
694204AE852E6BAA8F264F70046B4E9EF7826FEA7D38726F2A1891340BF1DA9F
49EDA513DB3E8C41176C4A8719DA2C75A3CE10FCC29EDBE9205C37031415B5BB
2C49EC8DA7B66BFAE6FE28C81DADA704646C4D3EA1543205DFF5A3186673AEED
2BCF1E95323BB5E3CD50423BDDE0D8A1E8C45FC2B9474FC4A738C024E1B26393
9AEFC3033B88B33AB67C5499D2A60B5321A907836A2112D15D025321F8E68DD6
2EA5320C3DBBAAB39C221E2D97BA8D3BAB84CF7068EB16D13BA07154D1F9EBB3
0A0D81EE204F09E4ADBE5BB5BDE8D8B0F73B4A01C818459D0F5A82372EE5B315
A21C3771A0A88650215A6CB9BAB0350418C420C1FEEE2449EEFD624739CFAC22
BCC7104EC4EA851AF4CB1A21C11AACAA19D2F316E125358052E8840782D6DB24
9C727464A58DEACC2EA67B2AC033DE85212FAC60052545C40B1E2316D35534BF
B49CCE64613E5274D98E4F2B23DC47BC6EE0D1DE6EBB6D506361A069166517C7
4B64EA8B89AC8F8BA8DA67048E5DA26AC7D0ABD2820C2F4E7B76F2F0D5999883
7FB951E69F5F24D03D05ED34391BF881DDFE353208212CCB48CC57C8C32E97CD
EB89CF5E0C032E81DE382F5F0F6F6F786A20316B992F547DE9372FEEA0BE405A
1488543D83B3EBB1F1EC7A558CD8D86DAD66D3EC933ABB5EB3CA9B1F3952D101
D6CE60D1A0A97C99EDB3FAD64E3945C2101451A5903126FD80BD493627782C24
ED195DEDB9592241DD136479A65905FD0062C91DFF73498E148C00ADFC43DF9A
0143E2ECED58D83420F4B02BD74BA0647AA502EECECA267DD00B5CF3957699F8
7206A021F65993964FD431998133454CF0A83B9946D6D2235AEE92E4FB528CB4
E8CFD3A1B17BCD1A2D9695130DFB445DF1524E85513A94BE894217DECA2F18BF
6FA92CFB8D5F21B269AB964878C02328BD3084C1B9655FBAC01D419EA814BFB5
A40B22C41461F35292C32C33793507E6F6C3D96D712E62BFCEC18ABB300E2984
04F601199BD3D3486FA04EA2DEE42F844BFA980ABC353A0F86A72F587BA908E7
0047A3671B1C39DDC69219079DA8D59E61A8962813BD4C7D18008B2F382C5862
38DF599991D07DC53E1DB82D58C6BC26430662D2EA4F4ABD625E32FDAAE83BA4
2C1045FD7E0F586CBF2D967E468B2E8E763415DF4FEEE399A7BAF3256EDDFCE5
F0DCCA5162F7A61A2CFCB47C7776B87059684FE70A0D67D92C6DEF173E0B552E
9E3CB4C26255E4C48B23738C38C522905337A70F25F822560173B30C9278BB04
28971C6A44005B0D621985CDD13159C9C7C097338E1841F86DBB15DA7FF83A56
61C658971A05F216B73A11F4433BE9D56D2125766949D36835F240550DB13451
1BD8B13FFA2D9FEC18A7C259E33442D7B374356279F57331831543727013B6AF
798D3CDD0F83DEC76BCF3CF60BDC1DB09467179704B9F04B677164E0C0AB82FB
AB2A72B5C5839D67E26A540DBDD8EE8C8DDBB7A430B694598648D332020D18F7
BCC1C6BFE732449CE52B2BC3CFD181277D371765E3F5FE73B7D1E304F4B71ED3
0C7DDABE98B213EA5CA9F0C24AC1F2C37FB696E7ECA43ECEEA7A16305AA88B0B
054DF589080FAE0883DCA2F9B4BE5A76DAF30053CE655A7C984B6BB390FEA489
B7070E2DEDD1593FB0DCDB5087484584C2F73564340A7478D8B6749EC08D9B25
CAEB5877056DB521315C240C93419FDCFF804B9697E07BCD8BA8FD921721FA4A
44FBA832A28378D5955C2CE2C8F166B7D18498AEAB8B022BCC74B2620156612E
B4B29F4EE156ABEEC43401B24025F2D971B0398468408AE8A9D786D4459F1AFC
F28F3DC5AE6894E3E1F1B36A7A8D2F5A2E4990020448BC475BA94D91725A8940
8B4B027801CD67AA07CE8EDB455205B7EF0065A32D1D7A1B2A657C53690209C3
5E6977332CCC63B45582DBC707E686DD952F6F820A42877488121C7D393FBA4E
F2C7B980377FA550242A393A1BBEFE0F2E86B9F997DEA662B7342EFDC90B3BCA
B589A886481BFA191C6B468BEAE99C6135BB5A7DB8EEDDF71CBA1900EEA734D4
353868B94A8BD3B8CE1283FE0C30F757C82BF20FB6028CB5025DB39C4CF5EED1
8E2DCEB40CD450DDA32CAF8B79D7E16D8A10C19550C7EEABAF9EE3D6D9175C79
E60A9A037DCC7EB12999F55592F3C702276681AF7D0333C625B8CC5F45EE9B08
232F8734128BDB6370FA61528B418E14465BEB7E5186B81A6D8F2B49B09177F6
308978F8DCD0443BDBD114436D3ED475AF7F20B787F28C961510CEBD6BA25D3B
44BF5B02EB5274794BB993195EDA1125D6F292C7F49CA87FCAA703FDC65D3E4C
25AFEDFA95BB7A781B1A39F59417C35B62AAE47E6B8FB0B0570FACA94304D159
89AAB2EDAF4F3189798C803D1A9BF7A5656F204F4982740BE6AC21B0004044D3
859368E9A22379CE386A13FE15EE5C338C1DB1E36E8C95982D968424AF107D3C
B7A1CF487AD4FD03F9A0BD9D0AC07FB785D29A06D4BE6149E49E067E75B36D75
1A4E7C99377CDA59CD6B5F4955DEFC7A1898142B6BE8BDB10A9D9F899D5D6D24
F54B1C511E14752C9D52F5EDA7A50865B743A32C5DE4E430D349B4996735300C
E32EAF009B79F33B839095B61F2140D5CF62DB1EB02CC1666BC47E3C46BA1D15
F6BA42E04423EF315D843D46ECE2BFAB535913195FF9E4719025E33AA0C144BC
F2AAF1300D457FC1198BEA23A75109FA64EEB0E9BE9A18D0EC8ADAEDE4B2A37D
0EC29801FA96FDAF1C02E3E33761738394E6EB9BE7D53B54A745A913379F7FED
56F2943D13E5687A98B7004C6CBDBCB1DC3746E816F6B84E3B8C63D8ED6DB75D
BB23AD0CD3123751BBFA5F346BF050DC4929A2745FF5679B0573B8293B6DA268
F6F9FA8D2E08C9CE1B239DB8272E45E0BA8707B4D7F7F566435952352E3054FF
1B42D508874DF4D54DE7B58920E19ED95180FCC6B10E7CD6635C51D815964602
278159B6619C4D7EA92F27DE17CB153726ECB2EDFF46C09517CBD327190C948B
7E8D5C8E76320694FFF36761C12C01EDA689AD53AF5E7CEB102EFDA3A481F5FF
D9C1F5F70FD913DC74EBF9846F5E419E074DB98F50689F20E1F37781FEC5BC06
8CB19B09F868B2FA10E4621145D1DDDA77000BA00D26A48AD7BAEB9C89B9A611
A5C44A78C31DCBD3F7BEF02A7AE14469038F06175F94D904B685E981D04BE1EB
17AF392E9139F72CC295ED2314B7C5E0876EFECB0625980EE3C63CD862B7A5B9
F653603952F2AB412DD28B935075350F31E87CFF0A549FEF3DF617AEA06B0BF0
6599C0B45A069A14DFA1D9361BDE22BAF340B62D5A655EDC957F3F8EA8EE2418
92766FDC4B843851B37FA0826F79BBBA1CE68308F3E64B28F71EB0437E324848
6ED760BC67E2F58AE5C01F7A53E3F33CA52373F6F2B2EFB1FDF30C480F6686A9
42B2D7F2466F392F53FB8C258B0ECC48F24BF815D2D2EC428F46B78CFE41D15C
91F23B9F52F52F7B221557123176C7184C60874656600CD20A9A118FB319FEBA
039AF580553378012FF9A6835DA458935E945E6ADB0C8D23AF0EA45D6679DC60
185E6E7301DD39946DD32BABBC1A19065178646C8CC17A3A24B2FCA18B1C23DC
D5769E040F83B659208AFD713E8C75EA9DCC22DF79F20B2EEF9B9527169A133E
3CB2BB8B078BB7E084796C8DF0B7A693916BEBF719CA4730F8EEC1251C9E046D
1DE6095D9A028BB8A5F01F7B59B81EFF84A12F53E882E6FD9F1F9AFB092DF41F
BA1A819501D075857818B95D69DC389E20EACCD3FC844F9837CFEE8737762078
A5035C5BC78A974F8325BDB6956B16122FBB244D769584BD57E5C8D24F8607F6
43F734E662AE7A8B5FF38986D7A6FD1933AEC350A453FB01CB47465A0D93F2D8
7167B6986312A57DDBE4460E37E94E225A483089716621AE996BF6B0C33D7F47
741E63B0C2319710E091E65F1BB791D7E5DAF9EE8FEE82D76E0FD4B710A8B1A9
B914932C96875FC33D85D1313F187494A0FBBD3BE0AD0FDCD15A79925ACE69A9
80C4006CD05925C8BF284DDBF5A2B1A45F0E4ED66FBCBA2B83C0A10DCDD95ECC
4DC77E32284F2CBB8C25459D9F308BA06CC93C2259F4CEE8CAA0D80E36B33986
6B13AC4063966F9D6E27ED283139890C17F3FC2410DB72B79483DE686EC463EF
372981821FADF86B93426809CC7D542595382797A092B2EF7688EC3248D3EBB3
1943ED401397955748137F9409A5E0B66F382F0B4713B3208BACAFDED15DA3D0
49ECA268AEDA0395267820DE8DD433373DD6DE6384FB0AE7DBB96BEF1F67E41C
B60276475235048EE95FF2FB859F5312D8BB8560C654FECF3131CCA8D5066603
136D68C5901CDE24DF61F575900CA49EFCDF11994BD6144B8F560FF7DA98498F
D0B1B3A7EF942626DCC4F57540302F1A50734CF475DBBEB205EC6A892F7B58AE
D5DAD4CD9DCD331BD80CE68D439C83A20DCC3AC4289789A23BB7E990DB8C2A0A
3B5AEBCCA1B9F2489823ED8CD2FE3AEC2978B02126E8D0EEDEA854DA3C196B7D
FE837D9C307B5AB309427A89EDCD57B5DC09B53F918BBC774253B5CC36A06A60
9F480293A0C2C8EA3724F350CCABCE7C608BB06FA29E296207D36DEF696112AC
569E626E1A3A38CA6500A02E33CC9A9C74C9E953C3BDA3FB995F8336D056FE25
2F8FC626887776177DB290DE25C836F950412E04FF9FA89D29066A977E2A7881
A691DB0245BB920FCB9906279E9C0C374A80909D3DFCF8016BBC058384A21B9A
D6FFE34CCE6142840CAC7EBB5CBCD039332FD969BAD34EF99AD642B738961542
8DE4573ADAC6A74FBEAFF7192AB1EBB293849338EB66FB67C22587FCB830CF38
A9404B363A4AFC837688254853BB334669F9AA511F0D1E3280A5B86BC3DF5CC3
5CC582FC96DF339CB5F561B847AAA6861CC3D9423F25AA0B83B33CF3E049C3D8
205891AF008F869DC13E9853100AFADE02A486CF042BB4B1D5BB9FE894200A7D
627362649D82A56381EA1344AF5AE8C20084D6A1C8FA0AA87E53784893C7F81F
950E9345624B913D79163B76EA9FF715A8DE982172565BD92075C8B3D66FA976
3D1FD97BC3FA8CA9A7416F29D86DD3A4BB00A0494BB27198DECC08AB20670845
2CCC1BD0DEB82E5D69143F64CCFF32A7372348A29BB0B491DAF10735D894594D
6C2D5669FCE116B689BF9B508AB66AFCD28D5A7B28A4443F2FA077AC8473A219
D6FF2029FCA6BCF7A12E83E3E1CA90664987496191E9765C4CB1869EFDC849C2
2D36324CBD11A3CC714989D374804808C980CFC1089E9F6176104E0E35803714
1F834BB155438CE64119E6D25B813A44CD7CC488FCCA867EB4A3F658044E4C45
DA5C1B988B3E9F6D4149D1E5308455CE264A7EC17A14AC55B18B24387F7D0A15
BDC384AC81B3796B47196E125A31FB1E50D60790101170AD84E88D3BE118BAF0
2ADE0F2A953A4C6F6537A8CC39550F22A71C23BC061AC658B276E8851C6623AF
E273A16F65997DF4172080D88881855C916C35E0A5A41F92DDAA5F7B783C3117
F013702F65349BF3161C3304C56997843F8EEC8D059158FA30771979DAE38B20
3B3A3314C5A7D52BE9C9F642102F23DFF55BC9A420D00333869F848E38410207
795285AF38DEBC33D2713889E6253DE706A48743156DACC2B6E342BD98F222DB
C6438DF66253A839FAE85F636E65A16EE1CD87B28111724294CFE999C5336D31
6C74138956095992142B377ACB1AC1EA65C92BEE8B8666098FE3A03DA00953E3
40BE70BF0DF265350D40CC9726B3E212D74F336ED00A10C613AAFEFF6CA945FC
172A7D6DF5D49F085FA10B900DD8554160E2C5B5F7F452324D6EA42151AB6326
95EFAFBC424FC525EBAD22DE1E3EED5DCCA29AC023E772EE6EE87175CB34E7AD
9D50A4483AC8870B4655DCA4A6667BB22C84D2CEE51A9A1F5ABE4676D3446951
CEA100298BDC680D025741E8091831199F70F50F8A10FDD19007F8F67408920F
7FFC326C213796DA3133AC0A1B62477AE6B428AFAA0C4E1EB9712C38D974A3A3
1EE08BD503C1F918920F72729CA01AF44ACFBA1757ACAC0A04EBF8FEB0FC74C3
3608C1624923AE6DB89985C22F9BFDAFDC303BE0114798BE2BC74A996AFC84E3
6FFC043540E044AF932171954CD384238950E84561DBB174B4A48B1EE3918E31
4D8988E6174025C4E1551A3FB5D5882F227F5E369102315D46F7AC827BDCC7B6
D68385D3A2F41367BD91E07D49C89CE363ADCB31A22D6C988CA5580A55D3B936
0072BA9F998E1F5F58F4610AF2105FFA6F24F614B755368C6E0A4A9C6E93F228
FA4DBB6069B95E802BA6EB4D1773DA93AAAD0BA2AB53EA80426D59A7ACC940BF
01E0DD11CD7596551D36BD2B491DB7649200FC5C77003DB7439C34C936760BA5
40E71229875F40E098B1FDFA55C329F62F60D060DC9C1412E8E7B6FE52AF35F1
2CF0D0BA083B7DAD2F21FB94C2D83DB86AB6E0FBB6D1D0C2E60BBEB209C9DE0D
8CBA2E5696730C2C21CE75D67B965A58090E86060267EF1F5811102847EA7DD0
A92D8598F459E35981F24F66C3477F7D2E50F72D87B3B761064D4350E8387EFE
05BD00442950E2978823596D235B15974F099FF1DDD4FA55925EF596291904E6
3B542F83821C56B4F4ECB1AD1DDD3F3B5B0BED4BBC592C362CB61465B2BC0429
162B40C11EE41D8125A2E090FA5E508D26CF9C1BB827A2B5219637729149B50B
4E6527B2F4B0402C9DFA9793BC9811EC6A41392633B700490B0A8041D558B646
9407E24E13DF5727C2CEEA453E0ECC463816E595F2D0EF90E2ACB04423B07EEA
638AA078199AD4F9516D11EB18D8212A84F848B3A7EE651DBA23B54F8B0EBF12
3C5BC8A02509D2CEAF73759DF5F85FC870178C8847E0754FABE675732E8593EA
CC3B6A4723FF758FD33F87986D644B02F7C9D82CA361F735CB0DE1DE2507C9B8
7A71AC56640152A5010D255D85DAE4F7861E45B426D03652249529E30E39AD85
DDA55524FB12331D87020938478EC442A46B89B55B3F13D72037F59A907AF824
77169B19F16139ABA775BD17A5C3E95FD762F20D3A4377A77B36CF5C636779F4
2BC16D8303EB234360DF0B86361A09C24851F50654B96010E1039EE43F5F9D39
16539B9DFE8E284C0A5BB28F36B6EB9F29BA835D7BB2037BAFBC79F33E07256A
EC59FDE97B4A70560745DC60F93ADEE32304A82E92316B9AE315FE73C7B80E61
093D827DAF26FC956070179801ADC0FB39E95829088422DBCBAA1D87B0FE4041
9B5264C50C786F398AFE8079A07CDDF972495C641E77725BFCAB36FE5C32C0A2
4624C9A1AC0AB697C4ADB37B77C79FAA6E64532D1FEF9A44B147AE1F32F9D2FC
35ED0930E257787CE409A4BDE8925E33996468BEEDF8B4267386B1CD162FBC8F
B3FF207CC5D6535D65BBEF91FB7FAFB9A64CE2825A0D85814E6518993866C3ED
DC6C191C8C8987CC8E06281A37C3AD203A5701BBCD200A94A5E28B478A77734A
B58AEAD09014783CA45E850CFE87BBA5B33D2AB3C656E5FE89EF829BE8261126
27CE7C6DA13CC87F8EC62C7BB9BACC0B37948CA3CF8AD3730990BAB13C766BB7
4B4FF0DCE4CDE3B885708C6AB7F790C02B06AD6C2282A10EC1482CB2ED7187AF
E58F5A87FEBA30C9F60AC76D740C55A9C3BF160D32E45212ECC0045CAD132717
1F2594725A8FC792E809E0C72380B983F1658D739B33788C1149134631F03E3A
499CAA402F81E81B9AD1C5CD4860749F82A0494A2B5BA90D2546CFB55B0E0B26
10FB878D974AD04A7709D00B1AA193DC9AEFE01A57BBB70F10E55292122AD86D
D05C1C3173520A54784F6FDA4B43E911D4688445A73832470314AC1149D7541F
96DFAB8CD85531B94646BDB32E451ECA94576E7AF3C5B4E0032A6A25837BD0C3
08D3347920F1AA1B30C48A49B154D82939F47FBF4C4DC32357405FBE0A97DA2D
BB26E4B5F9001114E7CD4691F2BF1135F45B230623DD994111015987999DDD1D
613AB9A72B7A2869C68B5102F808057C202DC1A9F914956A90BD463DAACEECB8
F8B9BB9840BBEF88DDD3014A817E70E53117501BA9C707CD0045458468BF4BAC
7BF7D6DD50EE5F6FC164A08CDC906AB773FD2B2A1111ED01D96BE4A0352C1A68
719CC4E3D7872C1C0DFC7D441E80517A76C8A7EBD19FB5142FB1048722205A4F
0446EB5EC060560659
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F768148C131B26525
D173F07ADFE2C2AAF32AA669FEC85F27BEDECACFC93D5466237119A44710846B
AE75ABD59BA013268CA45E353D5FBD18E38C3FB017BBFFFA8C36552C701F6348
65DA6E5ED752CC206EC6FF852C85996873C9CF8A1E6C29DC4365DC1D145E63AB
30DC3F3BB4B4EFDC6DD658FEAFE642F6F316D50924DFBEF21AE3C1183FCABB2F
4E65F5271B585DF5B91E9BCB80C73C09D36274C91F1149C89024DA3E3E034B9B
97599AAD4EE55393019EEE61EF4B3796F6F20F50313B3DCBE217F0AA2588D086
52288FE7AC7559D8CEC51AD836AF482F2E48AA56435A4BFC57904CDBA6BB2FB4
0F52CBD805D3FB3054DFF46F83F65741B1017E96CC1C6799394A944BEBBE20D5
795B41C85D883A7B825C2C676F4DADFD8AD1D683777C41FD1488FCEE52E2C0AB
0B5ABA7A3F7834D125F12A97B95F6A354624C31C68A7AE974A51070117295482
2C27F9880C572EFACB6CA4A82FB0F083A4565EDE9670F8C123A633E5159C6FC5
9E70A2B6E1AF4FB0AB0CE7068BB7B009022D77068E4E2776F3E1284CB562236B
8C4F251293A9F335FACD43444A3778178CD7821D71525D4A5AD26ACB89F2272E
00F8860E60AFB26FD9CE873AF43A7A7DCB3BCDE6B35ACEF88340302A7281B095
3F7B60816888826930854328C5992B80368A39D854E8841836A407C3243AB2A1
A92DBF413ED09D98769F099C8FF9B12A99BB88B018D3A3FE77FC1D079A1068F2
57FB2784CC8F66632695B5C8D5535F8278B4A1B2D58C58442527FD1B230401A5
50980BF7F3735408A1249F3175E659640825731A12F98C3C20EBC11F619BC67D
712BF7CEC27CE0B7ED8D31A29D7F2D8B10E15CD3BA66EA1C024FC80466EBFBDB
0F04B473097AB6D21D0EDDAF6E7780F00DA62502C94A10EC87F2DBA1948DD0BD
89A89C673790C29EA221D07D8B742B87CF1A9DE435E60BE83D8AAB025DD37D55
8C37D51209A50DC3EFD76BD8681CD2FE5AFDF853E1020D7DCA0782E78357F024
3806F30D13DC8B1A60616CB434CDE7436FBE5D607865FC923AB87182C9D634BE
8B5E06993230B0D07972F380E76798939F0AEF7E64F621BE09010CB6F43790AD
1D2B9F6A6966DE25D75B644AE2C16B463727A8AE10C3B86061249C43A10D5C2F
624E2116CC9174AABF8FC76C7A038CE0F1E7226536AA7589E6118B332B7B3B42
882F956E329FABA01826377C35067A7C6785ECE0C669C0392FCC883B12D59198
88568DE46A14AFF9B53476140AE06F9206B5D21D7E2DDE51A0EADDBBF0BCE98A
E75735DFA3991C800847F92B7E4F5DC3A1AFD438EE08BFAD9BAB11AB0775A3F9
71147F03E4C46915B00329A509EFD1D95CB3785BEEA5DAFF02758FB7059BD360
0C7881088CC01CF3E0672AD64EBB14C9F19F9E6DD333B78E91E4D70278DF8191
7A0935303EC1823825BF2E2F5C26BCB2EF17311EF3842F2C9362414E03C6C3EE
7BFCD2D8C6A8AC5D1D5915ADC71206D284543B6B22F3D56B15719B27BFBAF532
2A5B98281323C7EB5A6A1BB84E58E792C362F03B48976BE214AC88BF14CB44C2
10BF44141C72291EBB17C033D07AA6F56EC07545AB05B3175433ECDF6F8FDC16
A366DC796D1B7C9AF629B6230B0E0788575608F2FAFFB3FC12DA2D13F4B8E2D9
4A2567BD000C1F8359A11D4BB5CB15C66AC1B0A6A4E1784FD7D394F8B2C54489
E6D6A8920A9E1F5564FF1B63899BB364EE08DDC2FDBB5C9650FCEB9CB15A147F
504B188413D191582C61017A720161EA2CE5BC374CFFC9EDDE8F932C472C45C1
CE04C07F49CFE7A8E40CCF6CFE964A70EE9F86674045257BF43591473F853FE3
A2A43B7CC317D9E51A25CD1AF401D01E56B576F52469452A88622F592BE5A6EC
40CD9E45022A81934CE5B9973ADF81D7EC9666F7E819B7F08114AE0E56A3D310
D6958AA2348E1D304D1653449A46CC5716E1BDA9EE77AD3E44DB02447082F8D3
D953C8ED0FEF53FFB91E213252C58D39514E9BF54844789AAC1CE8907F549657
0EE524CD9C9FFCC8DDD98DBA4ADC7B454129E6DD0803880E1EFFEFC885746324
E5D95485BFE8588C946F09DABCCD5FE74AC5D873DD41494DC72CA3F920D15628
C16E671D3E2CF4CB9C39E511C1B77BA69276CF920B7BEC2E368A095DC1E3A421
F0C5333F72E8AA4588D5DE9F3344CB844CCFF0B65999F5BFDA1B40DB03B6DC14
52701BF67FF30DFFE27926F7BC36D21924BAA076116C1C2D27B9DDC03BC852C5
D7937B732E9F27369D2455765BFFD8239D0EB37A83045EA686214DFA096168CB
6D42230045E7AA3F84DC7F506506EDE0ADE26F7B6F424CC20A98FBB384FA3452
AAAE1AF13B492D0153001309AE34EF4E7CF2799E7589449EF35A44080EB96431
A59CB8548D2DDD50B72F99FD64C63AD02717F66D745C57E2346265A9D9B4DDC3
01936A65100FB57B1F9B423F84FAC7710AD0368D542E8A629BBC3C6E2D85EDC4
BA8747D798ABE0A28C3F80352864A3F80BB3DCAB90002A011308B37C2903F6FF
36A794FE4D1704BC0AA1D65C8185672416F30BA438505EEAD3D3BF8AE26C48F9
7D797AF8A4E981E67A4B499454376EC40B15A85645C637F3FF49721AEED75D85
66DB7289296E46845117CFFF250D79492A44B7F43E4219879931BEA2B95C7510
EA319F41897D664831567DD71900E884258FE920301DC50C2DF280584056D02C
C030BE48814FFA0AA41F08AE0D5B34F653289C06D33486429269E12A4FD6E5B4
F65BC8E13DE3CD5414CD559F65B1728DFED9A13E39976C99B380E4A0271A9BA5
FDE6D30F9B08478DF3844BABF04CA767E8BAABADF9D24B2EB524C6AABD7EFB03
CF1B8F6668C8B05103ED2B999CB46D339DDD22319BC0732326C35A3B19E4C6CF
BC094FA2D39A046F77E82A8479D36538B1ABC8DB00960055A88EB090534CD23A
881E6D86F82C0A23BFE3B71287CC4D31BBC3C5C605452A1D9522D16A67574A3E
5F1F7080AFFCBFBB82DC55FA52076A34EF8C82D88C3F945E3E26329C3AEB150A
340CF2C6B6E847062270D5E37BB78374263AD37C10FC1098F92AD5419695DCB3
291F6867CA83661FE8E8FD33169BAD40D0A599D118553935A7B7FA82E8E15F36
6CE98A40838258D452E731374B2F9A394B15F722CAC04FBCDB9A55427D0A015D
A9043DCE827A80FF3B4169AFE951EE366495F4E6DED831F05BEA44195777CEFE
93AABE6BC49EB010086114F4032A097DB0CE75E467680764A4DF585AA8EA461D
7B9AF3392806DA89286C3BC2D58E281A672CE9703F8A049F057F134DCF4EEBB4
14C741759F68C2C9292B509FC3F79A012612507ADA087210CE220862D385C4A9
7750300F7E0660E54E171F41A35364E573321A926C7C3DE13338F52F2E740A7A
BCD781F10873619010B4C21F46955BCD54FA2279E6CA65C90FF5931DADF03DA4
8AFB8561FC2E71008540FDF49C371BA351372DDB97AB64FCCDA6F82933AE40D2
E612FF9BDEFD1CADCAE9F8CA8978788158CA027DD88D9396842AF50BBED0BBE3
BA0D089E11BD8BEC95738465F9DC5F32566CEECBBE3EDC5CB643AE0E6AFFF1E1
321C29308D575A409EFBAAE5D96D65773EBE8D69A606A70B356250670C41BEB7
3DDEB6099C156F65478D26C2CD996AFB09F35EA042B3B551F67D4F81FC0F0766
E196C52EB0E495E6C242EA7B5C525587613D335148791C6FB74D7BFE1A936796
E59409AB7BC232EAB93115FE51069FF495E18D4175AC6BE1B3456541FEB1FAEA
783479625296D73480566E36545DAB1BB0423C34755F88AD248786F55EC59C9F
C0E6CEEBF7774FB05107D8EE462228AA23820B492095E0C27CCAA30E0DB63F02
F11DC0CE8A94BCEDAD62ADB2F4FE7F99D1340D27C4479C144AFDC37E4131C8C3
9DD554294996C46E69902090E3E51F1A1610F692A246ADD81969BB7B6E75FE0C
CA1D5EF9F69BBD6D5C07637F59658779E1F56C5D8A1589528DBE0C561289A53E
EA051C6F35820FDCD315337BEE01107C02C8ED058A89F6BC30765D6775BB68C6
9704D0BA5D6DE6BC5E103694026D0A741AC388F04B00DE2653B18C99512BDA16
12DAA02B89E3A4939C152ACE83E912CB7AD280F09997BB380A82B2470726AD1F
8E045592103ABB689244F248F11404FF0B753618A374051DF4097191C6BBC815
C3DB97CB298E93A8F3342F0347B8EC0280AAF49289DE4F48631A6CEEA8B04D46
246C61C6E595467D8ED38CC64903212C361CB2682E0EF94B6F2C482E965CA923
BB65C781A2DF929D54550933FC4B7290C8C71C097F48AB5C03B5D55F1B6CF232
7A86580D7C66796029CD2C606CA851CD3341C38AD791B4EDE291A7B3E3431CF3
B7B5DA96D07E2CDC1041C15D5756CC52CA9EDD64727BD3BE976D4963BA105BE1
C3F70C7D6D2D4D97AF75553E5C2D06D80F724A14F92A6A42485387E9168CD612
0B8A1B03ACA50578F0DB7CCD8EE528457C14B635AF49AD96F4316349A0C9B080
4A7DDF328FE1C6925884EDD2049ADC2E45DD3BF0F3862DDF05E7298ADF778943
31ED25BF6955E13DA0B4DE325E2F2611484398B81A9F304CCAD7AAC7DF2A8EDD
758A36B7AF6043F860D5D548B166C25921D8DDAD33982C2297DB7DC60ED38306
755FF45027146DE12236D225406E5FEE73AE766B4CA8DE3C3A2CAB1A9D582B80
77D374940B6AAF566752654E81648CE01CAE6B824B07416075E8CFE2A3529B73
5031ED0B3FF53DE7A8FA45ECD89CC71CF60B54D5B9AE32CD1C4026F46BEAF7C6
BD6B8F8DD7CCBDF28924410F04C89AAD7E74745FF9DBF2BA7652738434BC2B88
918F1967AA6877ED67D971958F3D80A9E2661DDFBE9B4D20B0BE8BBE3C1A5459
A27799E63F1368C6B8BFAFCE1C65F9E73D86729847ED9CF46EE6DC5B520E9C25
E724380AE722EDA58756E4FA9184D9C324D2DA8F1EBDC584A6665F8C59C1A2F1
1A4F507FADCC056E214F458B1C0471F995FF9B16AEB06EFA17F88C1BC49F0AB1
C2C8F8C4FCBCE04F3C65EA91889541467D451A5EAFE0B90194240BEB2B017C9C
4F9E43D85CD32C949F3D90302B0D3EAC620D85C2B4C0C637EE2910757696C3F1
34FDE5B22525A6012729A4006203BC8A46C7A6A60DA0F3DD2A947F2328348B3A
1D3B71F26F2F83281B0E9F6BD8C8203A8F7AE05761B5334EC794BA47E30E92CA
26032FB1C4CB5B20DC64095D442198D9D530581F1C40D357CA5BC25805601364
32FB649DB9DF113D5863CE4143295008BFB4B59F7D94FF33EA3281C5E352B4D7
C4C1678904B179234D8B851D3FE8B9ED08ACE959392226C2D9AF9A1E74DEFD07
0173D7AF2FFFDF728B7EB14228DDDDCFF6392CE1057991478CD587D08576EF5B
4A94B001F198E6589295D2F750BDCFCAF1E66E95CD51FD3CA7793F8CE9243D69
8AA060ACD6CBDA8D00D12D8F361B497A5239CCF726BE9AF67AF35221CDE9FA92
225A5F5E1D7E8116BE1A91D6F56F1BE23D9AD3885E2CF29FC8866B0F82F15A1E
918C625939A0A69BE82F083BE7E00E79197F001EE81BE2E45CBB75B7341F06D8
E37285BEAA9AB71AABE3CE0225DB26F736772974FDE0F0389CB5AA31AF46279B
2581A030D7A4075E0BC6F094E9ED5A55B9BF4AC2EE65D1C4088ACAE49BBA679D
9E0D06BB86BCA7E5FD3881744B0B05492095E0C27CCAA30E0DB63F02F11DC0CE
8A94BB33C8BA0994A9165727AAAEC6FE417204F047097E04281D86D64C5F4130
02A79249F6745F50963F8E2B3489A50CC8AAC437310F1A7D586CC05048684AF2
7EF3C09F75352CDDCC2A5D4F1C948FD5F508EF79A6E58394BD8310CF44A71DD2
DFD10FAB2CD911298790A1A918750549B59F65138907FAEE4F24AB5E19292866
F8B534249B0DCE61BFBCCD3C64C08E32974EE6F6CFAA3CB2DB259B0E22D6CB71
0E29409BCC90E1B54328E6A0C7231547157882223122C3B1AE04709B28E38E80
485BAC718F97F2805F0FA776A789F59B3D595DD347079EA1554A4608FE9440AD
62A663B5894F0DA159792577541DC4FCDE2F9A9ED73F9F898745610FFAD3AC14
3DC9CA8CB1C3931E36AA82EF8A0E62BFDB2444411986183617BF19EFB5DAF155
F092ED84AE49B4054206AF4126A23FB9D6936078F7F9222856BFD1375704DDBD
27629BD21AF86AB7E3D686CF1D6A03172736AF77CAD155DDE3704D09DDB65428
854C9968351E390B2BB6E073B241295747F4B23DC40386FD65EFCD0518B7AF4F
C2F56904C2849F7F05BD9E5029B6C1EFB0D04FA90E615D06A805EF2EA704243F
B382621C060FB040CE43444A3778178CD7FFA7152F5351D55C683CF64FAFABFA
DB8BE47AA6C623BB1E86BC855FB26CF97C235328328970333D68C7090E454AF9
E45392F1B4CA75578E9FDADB33032C1FE6C3F486108289E9F1B5E29E5AE689EF
4DBB83B3C77432EE201F41C83B213EBBBC0E6BD248CB70FBB014CAD6B16DE575
7CC78503FFAC28422BB29A45B28C1C475F8895C6DD4E1BED3AC206FC306E60B4
5FA2918393950E1F7E818D51212900AAE39E289C1FE5F8ADEB6A24588446552C
30CAB001D5F9DA84FA530D62577DBA553CC32E103B9E26314B306649FD15D7B5
965D3797A4E6D3099446FAC0032FD40411E8F3300A8A8E3A470F63F2F8A60EA6
030C5280EFF0AB91AE4F207B855297DAEDB801F01459540E1BBAE50115918754
777590F69D2A7F5A8E1ECA63FC9A5ED285837271FAF6CC611ABF571CC2EDFCAA
BE8E6BE1F2BC739461D428AC3349456A9F5AC9DD10D3BB974C0C92B89BF728B6
BD03C5A92D24A0DAE6040C150F8FCEE87A7483F92277B32B4863BB04326F80A1
F38683D6190095CF2CFA79C49978A94A5B4D70338F8C0C93FAEA6B72F763BCEF
DE93D5D7FCC289C18A4BE43DBFFB0C6D14EE78FC84B1BD61C526475C33CBFAFF
4724A8BBE1392FDD6F261EE615054441DEAF69F74F18A3CDD0D72D52948373E3
8251C508E4505E84566F11A0372E799AF99DEB62F1FB386855F555961A476567
2B93487C2944D35418E9E9DAC3479D3309DE69137A6E3282228BE7F075CE96A5
3614ADDA732F0927DAABC639BC260DCE7E8E80C3C81CE748D1B9235993843992
1510C028E91DDFBEAF65EB7B28D41FC2ACFEE9D6D55AA8F3EF8531A574C42BA2
F296A2166926C9D207751DE0B9144FB2DB490C29FF12165AE2B197B7E3A33037
F0AC9E0D70D5D02D5B14BC98B1900173514DED0F14C5CD9EB6B2D0AB54453E6A
4C7B7F667C14A284047744C14EDA3A13669FE5449DD1BA7DE9ABEA28C4E2496F
8761C0638F322C849DA765FFDCAAD86026AE6BF312CDF423D6EDAE46A632F0F0
A3A02D479C48D67816F04AD0E3DC993DC37A56452944B5BF3F9610B68E57D333
78ACB8ED7DE1B0D7FC4C7D441AA62D48801769531ED7EFB3C438EFB1B3BD9B0E
9E3155CB94633C9CA212ADDBDCBDDDA4E87A9A8AB0712445052550944E73B03D
45C39AB7DFC251A7851BD9402CCB878CD3955BDB109EEBB8F504436BB8A83C4B
9054695BCC2FA76C09DC21A6FFE886214DF47B13C4910CC7FA4A9154690E3F2E
D8BD1AF09AC4E8A0BD65C24A4B9CEA08972754E1D090E3889B56BFA096258B22
7C24A7E5401FA6479DC0309A89C78837971855488EB55069D395373CB0F8C088
F35F2CB696C516791002120268058B55FACC7617D6BA28E7C99EADF0C0B1E8BC
AB177B12B4636D02AF9989AFC62E8940835751EDD0ED2C92182A14683829AD97
00B3205A433016971AF248EB25722EF43731FC6D236BA47C5C52A83C1AAAD52E
4279CEDF3941933B3317E339B3191F3B728DE40ACCCE8E958E0390CFE5F18C1B
074589368AB6A358AC2E23291325A17D6EEE76175B38A6DAC0F0BF71956B5DAD
5D06C98514F10D1AC4AE6B9AF13A25D14ECC5FF4C6D1DFBCF8CEE94B2BA6D4AB
682381245DC37D8E95406B91B7CB06AF224E96632142876A4760DA16D3D24B40
2F62BC6975B78218F5896C225EAE85E5CE593D4FFCD7265AEFE9BE36A4736876
D080E94CA387F4ECE353A14E82FF7D86251B59C66D829CA0ED00F273E0DD044A
7DF055D633040BF5853FEDCC47754711D99A68E296DD3E74E0DF56E079235A8B
3B1D4982C684A0205D94F0A3056466013B667A3F47EF66D716CF088B4875981B
3590EB6254FEE152B8F789FA9AA1A333B445704A546A9A1AEAFC042118AEF126
FCEDA667E84D3ED8950B75AF0B6BEDFCF429BEAF8B3559A6C050701C75FB6133
581595F46226B4DA81F09AFE275D13A9001D354C0AF52388BE94F3F9B3AEE160
AC879F572021BAAEBB27F26A5A3389398CFAE168DE655CCB85FB2F2980D1C295
FFF3DA9644FF0D2941614936BCF433D4FE4D3AC459ED7811962AD08A130D7781
F378AEA202939558A63B9E2457A326E9A5C97A6858F1F198CD09E67E8C3FEA84
AFCA8D7AA9FD3459A7A0E1D38EFF958AE17E88341BB82D0B85C4629DCDCC7845
1DC450426725D35E39ABD17023463DD07C26FF1769A4C8A2518CFEEC51A39295
1DB0C567B17E1E0B3EDC325FEDD473DE05BEC16416205EEC2767CAE72563F58C
453F45C231219FC9727D597530426240BB2AECAF921477FCD299B2E5EA7AE199
7CCE3C0CA0AA2C44D0E1275E30BE3FD062801BEDEB1BA8691D3118ACB750D980
62B2D28844E50E7E44723EB427BC71812F7D7AC9C54D0DDCD12178ABF50BCFF5
13171703A5ABAC0AC6A605C61E4920319CB934901AA2D80ADA23A4C922E6588D
3D2FA727918A77E7E68B876CDA3AAF51E21B6CD3542AA43722748EBAD8C81EE7
3B03FB45FB26419FB6F7B0164FAF03ACCD9DA7833A213F9F08DFC527CD5EFAB9
5DC9FD91A124F9F5AE28E844C6C3EAF7DE8FADA8CF68AA2FDB9A09A73FCB0089
56FDC4CE39D277CD7A40A5F235AE1BA3C6F3547FF24606651E5887FE8CD12E5A
FD700D89FDFED2693BF145E4A55AD2EAD722B1B281D170A9C9634F4D8720A555
2B5A3F17430C320B0FED34BADE6D74857E0CEC3B9B3C66FDE7436030382F9A97
C16F6CDFBEA8F56A2BCA48DBD42C11E120CBD1E6BA705C0620DE35BA53A5028C
C2FAD6DA11F18120152D054426729A2C7FD9A30D9E8FFA9D0A9D090B86A2B91B
8557B5C4A04F78A0399AD1358F5C8A814CB377C8FA4486F2078548215773C0D2
1882DCCBB1F74559B6E245417A3136BC28CFDC81E41B8AB1123729DF3D047F8C
04BFBAD54A9B2759F715EDB95FF9CEC0A52CDCFFAFF5CBC9BDAC8D9A12B47380
CF8C5797F43B8A931C3923BBDA0F552088CFE4E88CEFA22AF1F55D6AF74E3AF8
020367A45678FF6FBC16365A7DBDFEC0608AD6F60A6988B4821CE197B90983F9
E558F009C668538901E869277D88B7488B1D04365E30BDD6C5389164AD9F746A
A7A575300D857A185D7B4A39CD7605904A5B2E233B1DADBCA23EAF8E4234A549
BE5BFB97F467CFEE2F14D41FF5B17083E3AC00012ABABFCEFB86237252C3B31B
EABF4D57B2A341ED546BB25A11C28B5846B247465231691AB4881837D40C7BEC
BE1C6EBBBF065C283B7C7B3BD0893F95C7A9397156839E10B3B329E90F3DF32D
C7AD92309838ADACFBFA00F3A9244BA837A3603450748CB9D0D1E896A3F9B382
3FA6ABB6DB6354661340033C94E7B936A3A7370AB3C99088BA3E5E9954C28F54
CEDFC72A14168E673042FC09D14C99A69FCCAE3D3BAA6C3EFEBAACF14D12A115
ECFB15B40092DC0D71B8C221F564E3B93CE360C97D24E2CDE66BC6BA989EBB3E
C8E44363ED00547A268F0CE49022707C03B0945CBCAFC37DD287FA96E36DCC56
6FE08DD26E0EC1C981E7703D9DFE30FC3F11D353B37557EFD8E4E9D8B2A1FB58
162DFB145AA8902B8D63CDA9058EA55E58F59C374DC6AD4AA8B125F401148819
C7F752E92CDC3ADAD81E2D2AABE09DD98F5AE00F69DE0FE42E2C52010B061C7F
0254FD0B85AAD7CEC50BB4465DDAA3D6EB4CE7AE86F0DA8AEAC48426982C0CDB
79D892BBE4CE31A179B6ADDBA24E6516F2590A765C2F6B5A93FA46B493C93129
6C585907E223BD646A982E578E69B34770B518BB58D16D2C7889ABDA857A6756
D60B4BE5F9023D225EFF251BAAEBDE9DF76DAE894A5F00A676A61421BB765A7A
FF8690BAF0702C3A736CD1F4EDFC1E43B5F1673DF075469A9F9FD65284A656C5
B9CCFDE4B26BA3EFFA268AD4F7DC9BC80EEE6BFCEC846CA51B2CE2857AFEC47E
25004E50DABEABA4B9646E8EB39F2EB945F8CB2FFD2E71F2065E3CD468F393A6
187502C4D904A26BA22D3EA5867047B59CEF15B45200693D9EFD2E0110B640E3
8CB4A7EDCD428AE21D8EFD175AC6DA8E033FF3DF0FDC7F4F675EE0877D8CEB6F
526C3E6ED56F4F669CDA65742ED08E465338083EED6CAC66FFFA0F1795731A69
860E393C9CBBCA511F7926694EC48CB03CF1EACFD31FEE3C7AFFFF0C590D1169
433C427EBFC14C67EC12ECA650670FDC930ACF1C28E4B46F8EB3B207344F9CA5
2989AD8A876F13387C26EC39A5974177626618AA5E29B8E8EC7CEA9151BB3824
D1FA96F38E5F3B91656FCEEA5466934B7B24AAD00B88456141CA7FACD96BDBFC
373E1E1F87881FD7BC3A7AD2D4BF8F10D832F2BD3C5BDEB65D65D942ED54E36A
6B69AEF91561508D4F286F58CF2232CC5DE35248DE1C27FCFB9320A14013C540
DC0B2C7702F09131A46903CBA26D54070790C12668D96C827D82DC4F14637E71
EB29B480F590F08E13E483D3EB2263E895FA3541582667A783C1F05A664E0754
5CB249F1661358CF1A88932587B306C4EFEEF114F60F85935BDBDDA3362A11E0
BF7854BF4FFBA15071C516BBFABB12DE585B297E55A609522A90C2708C6E4B63
F8E9BA65BF43438EF9F52AF893BBDA215011B76970DFB390317A8F1B0971C84F
BB39F5FB23526A0A11A036ADCC813FD66FDDFC026516FDA258B0E7B326E298B1
066B58E4C322B453CD516787E516422AF06424376F3F90054ECC85F78DC9DFEC
B4D9AD9FBA49EAE1E6339648A66562E3EC1F9F24CC986A9748F7DB238540E167
C25D142102BD8B5D32AB14F86DA764A2A843C7B1F57BA02F1A02733ECEFDEC39
E758B4F36A1737C082CDFB1E73D3B52C969BFBB8C47A0975872704FF7E9A8751
D10054867B96D565268B60A938438EB22460250F2E2080660A26B4A346117DE5
CEE30B37CD3883EA001C76B681675F5E4400D758C423D376E2C5BC3B0B4D2F92
C01428AC9051C9F5AA344BCA6CEC10B3E2E3CF46FEC77739437A52505EB64550
2B99547E91CCBD137BA8337DD20637C60CC7FBF90EFC89E6F7488905B55482AC
13268CA45E353D5F4E3378154FD0C9971F468EE84AF46A23750F8B09959CF714
F36997CDAE9CEE295966685E89A494F32D78674B1187A93B44EF2102AF94E0C0
D8F52122B8BBB73BDC31C477A7F1FC73B49906D8D3D0EB2AA61AD3B7DB9F1AED
5FD39E62900A9DEAC708A69133EABF0FDC11E0564EAB95A2EA372DB1166A15B2
82C3E8E27CF34B972AD10DFD269E762E83D1FAF55AAE2E857B14C5DDC67F6C20
37E455BF0095264043E6D5CFF908B3A973CC43AFC2BE532ED012C3EB58266CBE
EBF12CBC031826588A4234FC70CC583D1E2F6C5322DFA80B60A774D3650E0DD7
64FC30DF63F4250BA74E0832C6DAC924CAE1603FF9910BCA11A6DC6A808F0840
5A2D0AE3399BE4B36AD99CC1898194B8F1A08DBC5D6A6F3D17F435EAC0972DD9
69C361DF579AA9E59D57DAC75BFC23B05264BF9269F429BEAF8B3559A6C3FCF0
C8586AFE88F80719C82B41676A4AF3E762FFDD4358A0E77F2EC02FFCA16E51B8
0A519D24B1E2A278771E9CC9F73BB1572F7875CC54AE4EDF1087D5254167A21A
6B4D844C99130FA462E978EF1895EDC4B79EA6F9721F2968719BAE108F344E5F
0CF9DB294762537A84DE04CFE97474C0BF359F4827067C0C258D32F3A7039384
03CFE9A05528AB3C9A630B8EA584A415A12FD2CDE2A2B3FBEAF92A9B0662335A
2DB9C80EB7BF67101B1F500FEBC999C042C853E4936F420867903CBBD57FB065
E3B9EE81227BF6333A5C0F5514AEA4CC65C257EC4A6C0F3441CE4995A0ED4E79
0A79D8AD67234A2C9360790E49816719309BD231BB07679EB2ABDE895E122613
15A776E25795D7AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538A9DC828BF
CA648599B81B1E5F956714F9E17000CA41137B6DA960ADE0663431603335A8DD
49D99E769BD73853AEA58A46553A8A85B8F34AFE4DA1EC3AC2D43E99D94DD50C
489CB78AE75236970181644F995A049EEEB89040B15D915AE1A7B21172D02E3D
78E253519DC09411034F7FD6F761F782DC8D02D23C8646C6C70A5B9506848856
5EAD606B83F77678B642E1E8A32C268DC6FE77C016E69F3F925DE2302E8F26BA
FA9C8B162D982EF5902192B79D05A67BCBB18285BD9C0C838711A76C5B5D57F3
56E8E229D9B8F060B969D4438A98A52B02183737B9E9E6D729161062BD000C1F
8359A11DB860D2CDA8FFCE3D416E9D8FE46B5A66BCB6C210AF684333A64BAC55
1A3C5BC065D2BAB01501D07654C470FD226F1E98C07ACE01B110BCAF5E9E0544
E4AE8839EDEFEA9D648A7AE9B8A56100A0DC390C32A10912E41B77C22EC0D1B0
F31398B13B3B553A41D9F4437F9AFEBA80E85A7302FFC4B5D0A21DD7A3F3E3C5
76E45B9145C6614172A38A90C448FDC45A9D6E6370A78D313F992FFAAB30A5EE
A4AC13C5AFCF78EBDBF77E4D3EC16BCB3C2C573D10A0062B9893DE9B80BF4B30
F09AC718F307E80B29885BD8B971C8670EB6567FCE686DC6C00AA4C418F45F2D
92CFEA647A6508A8ED9C310635A2988F74C13F38BA26ED7D36C34AC14C42BDA9
0058E7DFC146AFB27C32BD7A3AE60ACBA39AB615F9544EE69017420D9EBFBE2F
454A7D8613D0CF64AC5BCC7C62622289353980885FE5EF054D5AE538348F5373
6893292BA18A1F5E4453A41E2104508C1F0683360F2D36236EF2F3A4EC26ED65
81AFA8B6D5AD4F28DD5B022349FA38D89A4E67E7A55169B3CAC15A2E49B48CF0
46E74063A39FC0B85B754A6722EA3A4ECB508038B454E4357042F20ACE9D0114
0CDD1180DAEBC19B832356649E9860A9DF9FABFE3EA9F9B94A39346950647496
D9C68950E6B1ACE4524AA9D49C1082C32F22F2A99D8EE950A877FFE575AD3D74
39FEFF5716F817640136DD6B7F4ABFEB1B1A356821AF48E890DFAC684896939B
824344645AE115686B1DB56837D01D5BD03B3993178364BCED6E69EC110EB262
81CFDB3950A3533D78EDBC910102F0F13104AD668D5A0872207FAF08E24C5D0A
20A385910CF5CC9590B7D3655CBFD5EE9253C6EFE87DFE5A7A153BC3AEEF9A0A
9E1DEFE8E530CCD921ACF0AFD7A972250F2EA50E2A559B910E12DD59CC296BD8
D69AE3E4FA2CD789ABE07054E62C369B7E10ECA06B51C2717DB5BDE8E80D6F29
B33E9AFE4A2493201FDE2D2E1EA7349E324829A88CD39230CE851C4C8E807806
C7D90F8C2414CA1669749E13E6748B25A37738923689F96FA3FA86AA4C503C7C
A2D05701B26C6396DFA7F12A43828E3C49616FABA8A748F021AEE616CCD3A627
1DD6C27CEA2D32409DF97C2A92B344786ECC573D2BEE7D6858FD8EB114AACBAE
769A5115F7BFDEF066F29C31DF255B64B2889C78BD387E56A5326A6EE798602F
605BF1CABA05623EF1096B387D7FE68E6E64259E461CD7A15A0E77FE17FE510A
0752C14F2856988364113DEA40B5ECC6468467EF1BCB53C942F80C2313118CDC
5803D6C3C61B924612C160DDD5172D98DC5DDFA80D97F9D15678F773EC435F82
4A95B61CA0427E6CFCBC313C7910F05719FAF20F60E5D15B630ADA5342D0CE25
2B668DFDD22F04286271B0B047E7337B66EB39E4F675D2EE8EE4EE23AE4194F9
20986C6CF3A993077C0B2501E3EB3CE1B34EC2E2AD193F4267384FBD38E55D79
51FE1F98FEF1980EFA491B29D5154B44B92380264962BB765355FD506E3ED45E
DECE8A9243E3A6697AEAC8555DB97027E980F7C1D7F378B62DB43CA4BC3A8669
F6E924D719F5D7BEDA111FB2625069E57129652E16BDEAE32DD4672F762524E1
3613FAA8BA742F3165989453BA3A994ADDC898DB32EFF893D6315C69652F112E
6D2AC9F733F2E0D2A3C2D155984F2C2E5939F7FBD5EFBA078A330AA3D47A3A5C
842AF43D57F70718498FD85E7A99EAB7423DAA52C531C12FE90865168B0EED71
019D6AC49CDF27B0F24FBCE7DE90B816AC700557576242C3771C9529F24EB9B8
7069B424A262AE0E744AE5D60CD3A8379888E6847DF4036A85EA00525372BDE2
29F1BC277751454170B6DBC898BBB11ABC810529D06C3726C6B9C03E26CAB468
4ED3C9770FC60882E920EB1C184DA0C0396BB3AE8446D1F8E7F93E6F861A0A32
EE23534ECAB1259C875ED86B498950C5107FFFC9AF461DF6E344FB6FFA16DC77
B781EF010AF127553081FA9CED02E69B4C058DEA4F847FE19CDCF3C519EE29BC
D29A724AE4024D5B5A6A25612F73787128C527F58A87186DE1B496C4C928041D
1CA723188D852ACFC67DAF6DD7825A6CBD56048BE3943949B1CC8EA28B7E2170
C511EE704B4308A3727F64393E392FB6E035EE01529C635EF4F0F627F510F88B
13609014E6BC50659605F5A033D320DF88BCC1F9A10BDF85BD44CA1B3C85743B
6221A59C6AAD10E16FE5C7A72657A80F1CFB288A1DFC021F77C2C3E2096C4DBE
15B542B3138331B41165DBF39D27CB74DB2CC263413888D1C4B8121EC2C5D4A3
D8A7FD057F51ADDF7DC9BEC731AD6040FD9B804FA14242D61D0B5A2CE1E2C033
D0CBB3BF6270622EEEE00258C0BEE55F731368F373A67893FEE2BCE051279788
C2BBD57D7A02A6CC5310ECA24348652BF62276DFED27FA166CED183C45A58A08
0E74AAE427CDD274E4BA9F20652AF841A99AEC79FBBA92A27965AF40A71E05E4
BA8D7FC32A56808798B648EF2E5A7F38F01298636F8E1A427D4933E43DA9151C
6CF638019FA597CBAE4C28A7C373DA1C72EDF65356AE63C280CCB48D08A06917
22396E413A61F5A0399AE9ECC73A9ED709D0BB0FC3A6C1DAD1CA0A55961A4766
1C01F6875890DAF09D18C3EB567019261C42C5D42919CBAEC0D6D1559DE16723
BFEE1B4FBA65ABFF7C516F5C3989319A73F84CE822BB61C6C628BD648CCDA44D
B60B6507E4B9B04395D5A6421A98D119D26D5F911E38E2691D27F03F6D79DC01
1146CA28EE32BE98532AF24D5D28E2694618239067AB0D70008BB2ABCF06E283
F5507F6C73A9276706EC7C748A40418CD85FD323D46131B9284E44CC4B0A794D
061C547E8F1798A64F9917FF908D97D746FE0734C14F8F8D31B1B2C357FAAA44
467CB2180AB465B3942225BD45F6FE01CB6C10015841B66CD6BF4C70A90F1D84
FF3E1C152FD1DD1AED48BBF2B65F5D053BC24C7BAB4BDED1134230650AD2AE42
517997FF7ED694FDC46738DBD1E11BCB2E5323B4D8E08C2E56EC2B520F08CD98
7C0B112F18F889050AEF7C63E8A7DD0258EFFB9386B530BD40ABD4B9459C4AAD
0A5CD393B69534D6E2F854A64FE2BA8B2BAD7C2F670BD9087F7531490409D02B
E1BD02279E15456C72C9D5D0A44F2547C832BA3D991A55A1C1AA00C6C757576E
A0E4C8F0F14614231A275835F7FD186E0CF93660BDBB489FB5C5BFD22467E3B7
B7EAE88D3FFF42CE5D0AAB28D29BA62C2BE02FC7C9FCC92E68AC156FDDE61BCA
325A76ED52B327D02945DCBA64E9A72C8CE52AF94EDF33E6CC70BC0E96636EAA
B676E720F2D2A2F8327642DBA85B9D06F421C94770B315658DDA34094ABAF2E7
2109A764DB70C0C2B6A928553E7F0FD2860D2EDCB1CDD560A14E93017099D246
63633B06BBE5A40E82ED03A0C89B0EF64BB3DA65F519DD4924475D47C8D19F35
64BE4C153AC91451F122BDD5C724CB802331A59BE60EA498309BD9EF487733FA
D3B703CCF8812EE7FD9E52B1731ACC17C5615AD01DD26C08A41B8BE616FE6456
5AD63F2CA0FF6BE3B8CC09301BEF5ACCDD50E32171389D48292FBDEC55AE303F
B7ADF8AFA0646A4031E9B15A33E509D76E0B21B5D5A252757C4B7893DD9870FF
EC8C1648A2ACA6D4B8ABDA4D671F194C4A1DC79F2A559C7B73BDEB0CCA2FDA8E
FDC9424E3D947F3E93E768E0ADF5E51D8D14CFF9D60B39A6E2E1AC5F4EEEF91E
7F4575D155D7832EF90A57B7930BC1ADE2F3B45CF3C4E828DFCB0B47EF426774
9FBDF55FB67694B2E7F47D34C41F3551553B02B7017DC7778496D1A7100D9A91
5D2A8FECD33B4AF829C39DB36BFA67124053D79DB19F848987C303DBFA61F635
DF10C313E5AA3FD101F7027BE6C68A1EF7A4AE0C60BCE75CC544A6471C8094AA
8C8F3509B2C7D6782AE0633C33C8E4823681C0A61ED898C571006204AC52AE12
54675CD0EA94A638DBBD0D0627A5AE85B3B56FF180E0543FB75D1649D0A72873
2E3701A8BF70A3C633E344F82D1F079808B3E847A873C89176E748078A8B08A3
9A253017AD77C899FE86E5BB0BE234999A8DA1EEC732C33B7210E423A88F246B
CD334CE352B1D019BC1C43D3CAF8E551E8186C6190971AFDB87665AB55586F3A
72BC1E72A5F984E7235607EC39E49ECCEBE203DD656132D020E394D87FF4C2AA
92B696284A5BDD1B74A03D20EE9159552685785AF28FF9035EA3B088A8F38DE8
FE4A400A7141F2B42864AEA61576CC7CBCCB3C00B417BD21265C047DCB885D6B
AACBD08BFB7EA96EFA01D6D9E4D1C94948C651B5E9973BC193A86543ECD7D27E
80E7C4B49DD29B20A9B019C760B2BBABDD49CAEF54385D3A7782B50E2A43FC04
7E17BBA4F8F298ABFF2780BFA07D77178F10FC477E27C780AC02449CB784B65F
D333DD6A1DFD3F3CF2476231B11E3005F3FD9A6737E1028862E19D26FF7E13EA
FFC05484B0011D880F843A777D8B455FF753AAE7C922193008169CB9C24E27DE
D826073E37CF15E878212BA4B4823E482FC5A3EE0CC33B283796A9AD847424B4
E6508546C36223A3B17F50EC47F9AD8CF4505C45A38D08DB2EA29D2C00B939B4
CBCB1D737A647B484728F2D914417B7C4273FDD95DA8872DBDA1A81A0D8E7588
0EF3D7798AFB3431A9C936BF9B526DAB4F85D9E08E692A1205C9D68F1E9D5BA7
BBC3EF0C794409472BDCB4B9267588A641F087BC3DE74A661C7DC02E68FC5C48
B58141C7E8628F25C313F891CC49B37AF1D47DE4897284B2FFF95A8A508A19C3
281F49B2F6D577E6B768F35E7566E858B2CC4E9DD3BFC7614957F9404E3DD408
C74D5B91193386E5F01FC2CD49DBCADBCE55A419A9C1F47891F67F19E3E2051C
F3F7733A0627EC630968C2FEEA9583AC25DC5807A0577DA629D93C1771DFCE55
2712BD7DAFDE8ACA844DD34A2EC1F5C5C771C175AD3C0A327A90E16092E727CB
2BAA0128995EB7CB6922B79312E42FB01F5D430BDEBAEE24F2EAC8C34CB98D5C
1F7CA26FAFD56023EEDC6A1D3AC570D6CC1CA8D3653BECA8FEAA0B463EFDF293
CB7104E3B4F73F14B337F5B538359944962E09541FBB7A00956D1ACA7D8C2353
C0DAC6086BE4372789A5E4A8BBE7C909E080E70BFD10D510C2DFC870A1A7E340
D504BE0FEABF24B5BC879E7769D6D1303B2561A4D010A395A1BFC7A2423D1E19
F328AE2066FE65ABCDAA308258FCDDD13DCBB18E462B56FF043E14395F170DDD
4AA55929F95E30DF0BC6D5DC0606AC0737FBDDB04154DD1C27164288A1ABA66A
60E06D84EDC875C870F21C2C3F4462F60F08DD98D0B6A2BA0ECEC53316E24AF1
14F730722C5EC66F25B5F37140C27032E69A6558E901C8F115621D64D487DC50
21788F5659D33EE934E10CC11A48823EB219B1F0C24C94E849E904A1FE2265A1
FF6BB0F2511C6947BCA4D4E4C32BF6FA4A82C684A0205D94F0A3056466013B66
7A3F47EF647197D5816166A81DF85561DF48DAC4C5DB5A2AA6B01DBF250D3EAC
620D85C2B4C0C637EE2910757696C3F138390BA4FFA1AB0196CF0B21F0851081
A26969E75BF0281B21DACEB1FEA3B1B0764588EC4A652D1A7F8DD8C007580C8A
CB6507E89B97158EADF677C788A0FFC3EEB386F5539A60BEEEF61F7273B23833
662C05C23C5D0B2DBF81B8490F425291FA4017E674E43373BFECB05B121FBFD7
61DF5958351E4475E5FE364BE9123F3B3ABBE9C31AA7F0E31516F8D9C646740F
451CDCE5E45CBB75B7341F06D8E37285BEAA9AB71AABE3C2B95F69A65EAC76ED
7C42F48FC144EE377D810BA79027240B5C31014F7CE5B394E5C468943C93A222
AD65F809DA91B0FFFF2646E94179D30EBDF73A25B991A8B7203A90407B5473B3
DE1F4A38916E55055891BA976FCE89834C74DB1355CCF8E3E54C3BB8D661E4DE
F3D5B062FFB7D340E3E8808D61754CAA63E526980A6F1295C15C74D7F0D4F125
518B48040D40CBF94EA8E15DF7F0D97F71AEE5B1F9535C4BB445FEFEBB1E5752
CBC7539470C76351A68381A39D50B6B39335FD0B631F14AC9D91A3260DF272EF
177B033F9B4060A18B6D6EE4E5D1A32026B5D61FF11196EF9322A1BEE0095949
F22E99CBD1AC1A0CB1EAC24BC7BD8FBC66A3E4A223A4BB37641F9CFBD0B23C10
991D532F6AB4CF487FC29101739FC070DCCA88D2BC77393D735ABD099F2B3584
2AF2A6CFB7EFD6B57700B11FDC2BA78154EAD1B0AEEAD3C32B85164D51756160
50482D4F4A7CC48A29293222794C5EBD54650D834DA175AEE0A00E94426AEF2D
5B015C5196CE77FA94318AC24FDA52C237858D49BA7B27E4904BF8D855940AF0
DF3BEEA88E94B74DFC090CCC40AE9DA65E5DA02E7A7E8A840B48311CC7F4528F
51479C03EAD7477181F724D242E49D3B62E5ECEAA3DA7A33AE9217CF89BE38E4
310670F1187AFF7D4DEF6CE2FDD0986C7633CF5D3EE91CF5FDA380B8BA4BE881
C0B9D6E14B783F529E7D71EDCB645D75EBECDAA5FE73C9E3F0777350BE92FEE3
430FB8AB8090825AA1017BCF159C5E7609EC3AC708FF6816598772E12C107EA9
9690102DE366BDBF007C713A7D9687EFB4149F11AD948F931B1BDF5997800902
2FD528D9B213F4A4E1FF3BFFD300118249B27F5F7BAE49AD6BCE4E68B5CE1529
54630BA2C47F1AA11A8AFA6B6E722724EFA556D7C2679714D46B122DBE850FAA
EC89A5F4C6C40D3D76F2FD4C69682B3DA7C3FE91CE8E9B71D1457AA8D3D684C0
382B6B44E5E6976B6687CE5E203E48B9BC0BB641F0622752741247F43A87F250
AF9CFBC19BB9C5ED843368A40C23317C6AD3EDF0ACBDE1C823F1E5A36A707735
17E339B3191F3B720897811A8B80585AEB4501A685D51D4E684D5D3C1EFD9041
D698737B279D0B5A84B3CD23F5744754676F2944DE6E6B639C37E8E49BD4A6F0
903E0C384E72E865130948DC92813858A464130EA68615B1B716254F2E66800B
98949BD58AC4700364A93844E903325CA15466761E290D9E1774A0955F7A1770
C2F25785DB6522C7A9B504EEDB36ABF690B6559D09D63C715278529E746A36F4
A1433A77F934C02E11953FB34BB9DBA4D9203DA7C282144D38DB31BE72ECFAAA
DAFEE78E1D8D2B9E94AF57AE0A20570009A7CF3DEDEE81F75D8B5CEB20542544
2B328703A8AA118EA539669C3098666CDFB1E317462647319E38C8AC4BCF6ED9
5AE5AA6BFDA1A41707F0FE74F0A08276F6A52BC38F896FCB285FA5D7E21AF5F8
CA1DD90BB7149E36077BCC9557ADE417810A48AAAD3EAE66BBEE79E19BF6B5F3
F6D42D0B1804227B1F17190B56EBD27CEDBAC9B00661449D3B57B509FE3AE558
65902C743B3754A3A2FA4376F107191BD84EACA3B6BB0E0B6F65BE4FFEC81313
64134AE2CB3B276FC7A03B593C2123C513B4202A301C4083A238349B82BD0EFB
82FA41790431CA16082699B5CD3A0B1EA301EE8BF7F102D69F47EE35F889A710
7E9499488F762EC507A3BA71D96F18FC65FC73BC484C6947929E7422C2C2489D
209D78E0A2FD3FA71C28EDFC1576296D783F019E874F2C339E74CEAFAAAC6085
F994AE3A169FDED56A594865E9453E9B6E46BA3DC602A2B21AB6CB629666BB7C
63FDF830176F5CC92B1CB8711D5AC60F3B68AFE40381C7005CFEB6EB45DB01F5
1784DA23C2D293B1FE8CA6B0F74171235393FC3FC703470CCE9A7C8B75E46EF7
869EE33224B06D2560C5B4EDD0AAD33197875BFD44BE53E6B5FA4F4F00EEECE4
AE663339D02873571EDA451B82C2D7E0C45027B028E62E9E16DE8D008A4CCC3C
1C64687E53156290ECB28608927BABB89859CD26B6727DEE1312FB9ABF4D5F30
15F0775897E74EC5BF03FE929E4C75111804A1A39D31B9F22253FAC197B9D7D1
4AB0D2EE8E68536A76DF5DD51DC4D909013D101F46CEDAD0509D82F255396C4E
1D44102DB04EB64950E22C2E110DB07E9CB5E0E44F30BF7EC58F1233B9579D0D
3B6711970B01DD647452BA1FAC5261C933805420D2B64081767532E4799F0DCF
5D939321176245EB40CCC09553D5D06983ABAE585FB4FDE2B64593BBD434FFD4
F21AF0E84593B780A07DE7466E176880322B16147C102A6F0E41C025226E2E9C
AD66A9E07374FAD24A0B3CBC3DAE464A0D24EA2C61D509565711B0C49129E177
BAA8F2ABD764BC00F8BAE5190CEC180365D843E8A3E5DB723D9C1FE1B2E096CD
2E5525392278BA778837A7E80DCF16EAE0DD408D7F1EC520BF9CBD773EE507D2
E3D36E85C32D4DD00720CEAD275AC1D1BE9789A15047900FE2081725F4AEC0DC
C4DEED48D03AC91217B48013034458DDE2BC109A31F66B62D3704BCBE14EA529
669995498B60E93B364B8C933FB8404B138FB34524579575B05F23323D875619
4F5AF282CB259A2E7F66BE2A360F961F860593385ABBF4D165E009B986346F04
7489580E7393C1568925FD499F5B89FD141E7B3D704F5C97A33461D3AF9EA3F8
A8B0235367EE026795A60A9C18F52673F12725F3894BABD263278826D9A5EA05
BBA402A093DB9AFD13E1283E441B680519DC8EA19781AAD19F4E39A73DC25C0E
F4CFD5FAD12C7C18AAB52C966650DF6DC2A8D5779DB06354CEC6739F7B0C556F
57628574B40E7E63EE1DFC150D9E9569EFC6D3A83FF5602D8E8852BB2FB3D358
A5BFD4027DE2552FF636B525DACE43803151AB98ED570C347BCB3C08C522B5BB
F8C8BEA53091D050B05C2B8FE53A726D881CB272F283C63BF14E88527EFCDA38
6F651BF15646CF7050C5F987D7D08EAFA3C1FC3989FF0679231CED57CF2FF2B9
B8641B56EE46C3449FCE084CBB2D852961B1023D0CFDFA568502CB8BCC9DA4F8
342E4D7F24F64C150263031FED4E7FE3517430341B7DF75A4683D5EA25DF316A
ED71552398CE01611A0575664C09D060FB5321B54CF50BD6D722B3BE16D76FA3
8C2C33DBD7893D26EC4F10DD0D1938AF24D3AD3B6A94
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55F7E47F8CC4190CAD924CFD804CDE03EC60563D081F110
CBB104055979B93481E76C4D12A3E545A312C95C6F263FB469142FE488F9EA5C
7F6511BE330D228B4EAC4A163E08F5A824ACFE020F88E665A1EA40B36D9A6110
CAD90C568431CBFE3E0BF24777EB917E73BD2FB9DB6751F7C31EED8E718E3BEC
5E192ACC1F38615493C0E8101ED08A8BB3C39D282B7BE238A1456BE3627C2D7F
29B4A50A79A9C3DFF0D12FB989F9DFBA0CB091D4575F9D4EAA135FC788C698AF
41B18710F6776C75FDA09B5694D38EAC6BD587BE8133A19AD5F25941F7232A4F
7C2DF89FFC8F337CF2F4C6F0168AA785FE3341FE4E5830D0F304FD7A9EB6B8AE
E7919322D2FDF6C7D792D7EA5246FC5C99973AF211F2D09C8FC127D58F0B1E1F
B83A5F44D5A641040624E6C698ACAB5E841548B3A8366740C94C953AAB569E69
6070EFFB5C17ACB3FA3FC86291C8ADBE8B953CCBC767E8DAFC0D12DA117993C0
7374602A5192297F39661768E24E3112037734F0882D6EE4AE42E14D98FCACB7
8A549F2403488CF2897D65FA1A02318CC3F90635CEE5941021C13062CCF39F64
226C97418181D063694F3F23ABE24940B69CE8D0D5529BE77FBCCB3AECF8A78A
4C2460F0231DE959FBE2ED4AF0BA32835BEF5573DB03BFF39AC972AD2237B21A
47ED43376EBDCD1206243547DBB78294FD8B63FD7216EA3D9D9CC7A830D54468
CD6B68783C493794BF12502E04FC52064E63D005F2034A1F38BF65DF1F1DA543
9DBC802B4A9D803BD635C05D622C8D59DF2DD5881BE5AF673B1736FE39987766
E0488F77AFC2022271FE6205D65C1785F299C80FDAF6B393CCD10C045215C334
AA21432F7B87CFC3379E39BBD96924A2CED91A65032FCA67033ECAAB246290ED
38211CC88F0595D6BE89E46F5232B759A4516C6C2E54EEADFB98697E21F7AD3C
F2701D9F1B53A1483E9FD813E44A949FA54339BA7BE576F5C063F73996005815
4E0785C3F4AA9DFF3028F3BDAF1C5318BDB258F0683E9AE3BA1773BE899C23CC
B7AEBB5D60F011E319A23D2D54576AA26E1C796EE0F1E0B755D519B3F9147951
0A09A9177D3EFB16636516C6190C9681EF5494CA7A44222AE28B24C8E0AEF59C
A261835523E983C166979C9357FA3D1EE93167FCFBE96EC4737CF81B5C4A8AA5
8255F214F84DA293F973B5FBDF6B2AA91E523F5F52658C7DEA4F5D90CB4A468D
6933DDEDA73C52C2FB4B57406E692684CD10FADF04B4DFCBAA02197EDC790935
7DFB4C6FB6446FD6AE83EA4BACEEF6D651E10266D330813BE00F18DD754E7196
FD347A8505D4FBFBAAC10D78F58B703B1277E5AA10A1FAEC1AAA3D7E952BCB3F
88959658835F6DD1A7BB0500F5921FC73097D0B47D9104DE5CD76002E6418CE9
CF16BB5E61951DAFF2A3E9E9B46B9A5B29A2F799747B66499E99B97C5141D2E0
5BA86C59535C34BA95FF3E383ACA0E037C7D2452CEB1BCCDB1A07C125475137E
04F44B274D7E517969EAC96EEE0474C3A2B34AB1B69D595CB86D1556BC15DD18
F65193851FAE3061F98204A78FD15712A42788C35669A787703DE8A0E2FBE65E
D1DBBC8D4E598EB02DE07496D259A648C2C5AB4D3D8C95A7908DDA36FF1F2556
8F29624F9DEE0AD11F3BD44DE0D698CC267C409C42A375581E8E383D3FE4D9F5
7AC1FBDB90DF270EF8D420286022EF1E1B87A821F49341C7723D718EE1DD8034
84C1F94641D053CF1DB40103DC748EB0F2E84087FD2F1FD5277ECDC21DE7FF25
6EF824A7B16CF0076EBCA4824B2368CFB378ADB54AD2CED7EF122581593C2C3B
4236A9AD9F6007C78530489CDFB7D751F65B866CD95E80C671AC62EF22D74CE8
0E419D5FD11AFDBED1F6CD8E8F4F8892495943DA0CE4D6A6F38F8AD981E2A8AC
D5A8A913729315EC1E3BAFA30ED7A611675A10244E8669A134330A7A200261AE
E198E8E947B5EDA1F34EE076ED13EE8DB57975A65510CA0691CBC12FDB9CFADD
75F967EBCCF954422A0B6F8FD7EA2694C2A0FAFD866213AFA1C261F9E42441E2
1F5EB56690AA3EB9DC71AC75BD0E4B3EF25DEDC0734CD84B4F54BDBECEB0B627
8540EA16AEB1DBF258621405F4FFD0D031F6A1C94C66DF3F185F8777B1CECE95
F6AC314CE9CD0757EA8087DFE899EF51EC837A61F45EABA3BC711421D4C27036
E92E495921CA39D69ECB4DE929E86C4A1C31C640FACDF4BA19C2337462A62960
B8E86F929C50936C4C0C9E4622FB9AB1284193B58B057B8CAB63579DEE20EA6A
04EBC84FC0457A476F2B527ECE9F0EFD6EA56BCA3CA0673A9E4C415BAA0B504F
18C9607C70743BA6061134A058208C3E590F45036658703436ED9855FB40156B
D65E0A372E31BA84D369A258848AE637F7290C5E0A2B4138D0F0FCC08CAFF917
2C0ECFDA89C7F208A638FFFC9C65A56D73C72117B8E26FBEA538E87B67145477
9459E8065F6783F91A3F24FC0434727B88A4852D478F5BCED2FFC83F6EBD9A84
9EAABBED6A01389E5708989C1E0F104AB92B5BB3E62D3F8ED24627B55EC9D4AE
BA1B01545FF577E965031B6E10475AD6D0750ECD1BE260D726F66E7D84AB4200
49E689FBE35F31AF1CBA84F03A65AD547591F02FD5C26FA451E486054F477C1A
367EC5B074EECFF5AC8973B8AE6B40DAC4A074427F593F3B8B0F1FBF6F71193E
3A9AF837FFE0C9A6DF4BB607BAB73B0B106EB9EC45C996C9592EA71A2F02D491
BED45513F712D704ED587E397A98B3A3F7D653792159D5EE616490CCEA8E42B4
E0384685CE2C867087DB2E8106AE766AB0B011743C5BEE6C1AF5F14DD0E331C6
C6AEDAB7993EA04C9B3DB7E6C86FEA8487A46BEF2B9CC218EA14B37B4D273CBD
4FA5311591A31A031FC84066AABD3BDB548B038DC66F8CB8DAB44DE353BDA168
0DEBB5D15617120DA74B620C0643D85061B19A2A7C07B2F471EC85645FDEC9A2
3A63831C36675AF9AE73F35BFBB5BDE7E708BED70A5438442B306BB584F3BE2B
53F1E8F70D0D9637343BFDF3F74FC12B0D18035C3C35DA467FA1C59347B07939
9B113AAD47E54C15560053B1F69446C612528F9DCCB0DC27108B1411E3BB7F10
19C0DC1C83E3C6F1B53884A8A97EE3E9DAF1C9503A513955400A7E12B2FFDC40
8C8179E2BF11F3F77F48055D0CF9E9AB3F4937812FDD41FCFC0B4787B4D5EA8A
64006C1C16FD315145EC7317E183A6FB621CE06AF165B97D24C55AED8936F5C3
C1353B559859C605F0276EAAC48F92C4C9FFB529453AE14CABE4FBC0FD5FFF1C
298B5E971C46B279A93A398DD1BB6ABAF4CF8FC5628E37E828180261DF2E9BF6
E7D192AF760FB039BAE0D2590FB26734B1EAEB431B37F47608FFE001B4656882
CEC5C30843690A61625DBA4E5FE6A7AA7842791BE79AF676E62E4B89ED596EE2
D0ABADC75AD4D0C1FB0BE696FD2F060604C346A0D209333F95368A66C7647854
8045B5171A66DE4939BF8137A93F8418CD278E42CCA2197D62252C650F6BF6A8
E656BC598DDD490B20E322F156105A055C1C4B810CA0E85272E3D4F38F3654E8
11D5340C31ACC65D312E8E0B4078AC3853831ADBE9BAC307B9022247DB85196E
1EE0452B21F0DD1C2340614BC5368245820A693A2685832EB68C8DC37FB9DE85
7FD1BEDC86660AB9762A8A481E4259DF9A74CA226BAD0E6E7481ED6F901C3931
0F0140855FCD3F91658B8132D73A384585E0DC342EBD4A3F555CBC6BEA37EAAA
E0EFB8FE7CA26C546F8640E28A58962CDA2E3702C4DD1EFAADC0455F106CB460
7E2B1E6521150783E89C74F1AD041F12B2F5B9573BCBAFCB00E84D57A43BB09E
2F22BB057CA0106AEFB58B45C95F6961FEC92040C509BA93BB9A02DF11FE08BA
F3D7C8F03844F9A741F8748BEC43A2527C9F05D84934F6C3E630506FA26BA08B
86D6A67C15A69CD3B038F45C2E90AA9BFF429BA0ECCD5F917E59D8582C229991
3B985FE651B934B1EDC6ECE170074AD90E289B11784FB20F67CE458B29F04509
7AA4AE6791A7D6B9717CABB14D34EC3AE4AA29517005629D901236F0C2EF1319
628EDB100E2C0607CCD26A25F63FEE7761617F3E9705BDC032C2C95031B8CCE6
97B76D978EA3A4AA322FE25327848224BCE7C3B3FF09C143E56B2501A6B92E77
C6A0FB8EC1F4FEDB88960D022CE688C4A9B2F160AD98480E1818379BC0CD5412
EB748C97977AB9DFE1959A6EE2FAEF09251F15D076AEE67378FC37793E289C5B
DABA262384E7F80451643474C403096C22359D6C8C9F9C91466A88218DCA8B76
CD890E979127263690AAAA5BA760B44B581C1899C338373F8168578757EA732A
6FBD096C6F61C79F0C25781418EC3CFF37D1BDB9EA95A7FC3F73C283C12B92D0
121497650656FA250F84A839DEDAE923C6697D301A6B6407ABC09D6470ADAFE9
2EB28899F8AF25226E2E9CBEE48B6B07792669DE7F11CE8C0FC9FE402CD27A95
A19A6E1B1EE41C7C52E840A32AFD7EA569F4D557600DC379BAD659E144FA7CCF
61D06642755490B3779C112893B929E922DF6DC3C343FCE6FDB46820B4AF8ECA
6503DE73732206FB7F06D848237D9445153BC3A1CCC4B66ED3AE914337BA51A4
46D7E0DA1F43C94F333585FA5662D4E154A3341ED39774FDB4CA3F137D3690BB
4B857D9C2BBFC2AE4338FD1EA3E30C8D420F388EBA58608587F750EC599FA059
DD54C9D7B6F0894988041909AB94F1A92249221722F3B325FABC3501ED1C92B1
DB0138EE72434BC7670D11AA2FCD4CDC55064623AE0EA88AD1E65BC6CE99AE78
5294FBD5B7A033D829B9E57BCD565CDDF6D8A36F8D822D1171C1A43EA7D8356D
E2E0D408ECE9B5C92E6DC4E5A5F8C2555D65C2A2CC9314C3C99C2994301B355C
C4EA7B63CC9BE8FE524A042981EE49CC614DA749159759494409B3943E813C50
45296D5894D6056BA66CC2D877D67235E520FF8B0AB25D953D0D05EEB4D5A187
BA52DB18D3F101140AF84D9C5933EB6EFCEBD8D8D471C1284F3B1F1470235A2B
6EDC7F061DFF1BED5CFC583B3A8308D3187E9ABE44AC931EAA4CBEAA0E652DA7
ADC96B0E2BD5EE41A6E42618025F21377143E7C374BBBD183E09FC3B7FFB9E64
428A70CF86C4306C11B686B280866AF413A22B313744CCFEFDBE4A025FCD4D14
E3D84A53B683EE5C583688549B0D441BC61B71A5BA4279630D44A144196DBA0F
70E8FF9807FF650CA50A099449C26854CB79A6783CB587C9A268F53508CE0929
0B08AB17F353FCCBA39D79E5A5AEC2ADE42FEC222F7D86F13B8D36A784C1151D
76605A73F4677919B3C4937DBD4132479E48E8EFC77A1C345C814F6B3B642275
DFE19B72F92D99517CBA985D989E8780472AF1AF038E990587DE0C547AD87C01
EF778871B6EFD7EF9B6F6CCB38627F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Bold
%!PS-AdobeFont-1.0: LMSans10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Bold known{/LMSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Bold)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /LMSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-460 -297 1761 1134}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFA25B3D2E21970B61BEF6BD441C0
853BA8F00600E933C80C0916170925A5E999AE3F4523441CBE8209ED95298D28
7897FD39E60633B3341F7B1EE39A74B7CFCA379A6C2390E7C26A4B9C8C556F25
96A90868B428CDFF58080D414AFBA9B90E752A5C7F4EEF6EAED9684DCA7DB0CC
268AB1DF914EEFDF740F44F538F1E841659F02898565FE3B1F13BC87C5713FE4
FB373864385E506D1C0BB65A3CB8E10A78C20E5BE320989BC3E8C8E8E399FC24
E0BD4271E70E8D7A8F7683A4756AA988C5E78DEE26995F197F2360620656FEEA
739826F54E14481B446F1D7F68111FFA8C859137AB1F8E90583B98BFAF5C6329
59CCC441D095D44570B010FEFDC0DAA465ADDF3CBAB31B8A5E7672C9EEAEA7B7
A345AFB8889D3C53E0F9619B8F0C11FCFA80839B0574D91CE6AD50613E12BAA0
115864303556F3EBF5B786035121016A72100BD90BB46818BE2E8AA15252FA00
9F20B1F01EC0EC35CBF7D6C9684AF91F00880B4F0721698DD568E1B3D09641C0
58E5856E324DB2E378120A56ED141762775C5AB88AE8BB5B6B18158A7A9202E8
651774A479D4308E7F29052733CD2724314AF8C61999D544071407B7774A5610
C7A8F6EFB5792C23498F7D5347CABBA2DA469A957BF2BF33E8E3045016270416
4B71642412D880A7601B66C002B4EEA76041F2746847EC01F5EB5744F1EA82F4
163BE681F7F568158C214BBB58CF2BED8BA9B4030D081D755D41B0F8DE4AD0E1
F33A1CE6E38EBEE8CEC6203C2474727309D75E85A83DD36CA1A05A37C9D1FAF7
E1AD48F23A222889F92F15AE9C33A8B3E343774FA496C5BFD6D9C1328E16F748
4D6390CDDA8EA19D086DC2E49DAFC1535299AF0F42A16E89B2D395B183098334
286F4678662DDD87FE71DAC85B1BEA9546CDC788FE623C0EC28B6F1208F01B4C
5956B9402DCD2BA235EA01291DE436B80388FE6B31D225383E1054FDC6AF7600
608EF8DD116B8443675F86A09522E784197B8AF0E94FB9D58D6EF94635AD5A85
2C19B5B7F5A937AACAEC366C096AE65B56E3CFA6862030A05CCAD0EC604B0384
3809DADFF492CAB59B4C0C0FE29E6DD2B9953609A7383D50F8A9A814589EE48F
34019A1D2FA36F076BE54353DF63F952998C3ED886221FE1A662DE75C772FB11
323AD065201A7943854ECF312964A0059FD24E9E54539DC2641E36ACE810685E
9921C790177E79FF3F279C52F72F03E439B6883552A1F0429478C0FE53F7656E
408CDD8A3C8215D594C6B911EBCD36C145CC25F858E34B6D27E13A4E773B8D62
1B2F28A52F9B53B3FA27F000DD189ECC42864A1D5AA933B10F327FA3BE68C541
EE8DA5E0A6923FF60DEA152FCEBC963155762A1019FE6A9467DB7E5464F6CB14
D786DADBC2D91CE0B646D8AB5073A179EE0DE00721AD7280AED8771C6EE2F7E2
D86C5661CDBEBB3548794F243C6CBFC3B5D8C8D09EA509188421C00059421E6F
538914CA986D90864BA13504A76E3B85EB914FABA0486DF5FD63771F4A7654C8
FDC3A533E44F41CA40BA5C1868021E69F6DCF2B27FF31EA794BC8B59C6F44727
073E848B2EC0BCAF7A59308F505DBAE59B4F725AE99A990B727C6C7020F14175
225EFEA39202B2352D8E5C8C129AE6DDC88039288277AA477D07BBE39D97FE30
F301D3BEEAB6F9716275EB86A05E8F77492F0CDAE87B801C0C536C101AA0D77A
3B65651CDF745F413B373AEDC78AC0CE9918EE8E8D4BBDEF36BCEE444A7BC5A2
9688E833A340237E6A7350C050921857B94DCAADC24515355F9825C8BF93F4C0
E919197020F092F2BAB79DD080D0A44CAAE0DB157CC7893BAAC530B5368C099B
59A711C4B67FC3B0E86EF0B39D244D27D3C8B748AB636082E7EFA02DCD670BA4
22113B3B90BA90FA72B3EEA6F3A8B7E7F21F1CA698A994BE0985125D4777602F
732DCCDAB71EB262B8A87DFD9AE2AE636315CE9D47B1A020296D23FD0A59D6AD
28E342836BE55BACB3C737A5C73C170B6563DA6A0785D62BFA51D77207778879
7A24886E2B4C9795FF0B0F87E426AAF37E86568926485134B8E657042D7E908C
22DC32B806286039E75042D590F24D8FE9F50D35EC6FF42A84EF98CF8FFC6A54
709ACC186A9078502B3AE1B12F5F4C7AAD461F3FF2EFF20DFEC6942E2E9BF904
C8312E79EBED8E98A4C8A688068C012538FA612293D2C5E6EC8DC24FDEB0B8D5
39D079FCDC56E9BC4B1EE0B25433212B4E4CA2D203D5E732FA02797B386F2EC4
A210B279F0F086050DD553553B3F87AC2CACF4375437B977E3C58B941166C1EF
276997F43FFD6487CFAA7842D60CB4A26A706440E79F43310E4B9C2EDEB4F1BB
DFED56FA3AE38C1C5EFDF898216CE35B7CF75C683A15DA0432E4E6B15F9E7C2C
8477AB5B1C5A25CF3F695B524A6C07661FE6953BB4C0EEF805F7A0245F6F2A04
D26899399FF91F4FB98EF6E228ADD22D093D1047D22E22E2A155F9249D0C7BC5
838E5864D8C8835E607BA2BE87050F8AE8EA728056655F9D9DA1ADB9298F2AA0
04BA3954B288CD9232F88633A933830B45DD9286B1C00698760DAAFCCD32B85D
6FE0AEF640CF0BA8136687788653CA9F5ED3F9EA7A85CD0B6B7701E27BE3E3AF
28807251F21C1EC7472D56ED0C13A9677B873D93D17B5F45A358A7A162679E52
850A292A07CAC2B96879AC6792E812426A33CD78A844120B5B63DA2F0F6511D5
92F4184FABB8C24CE1C4FAA347AC8360FED1325F77B07A7AF1B9480289790691
04F355206369B2357DB7A88096EF19171074364ECCBD76D05C12301556F56D22
BFDB9912882ED7CBFDA6CBCE8EE40DBFB9338561B425E7FB8A486E8BBD89226D
7B9FD2367E45AA87B3E7D151AF48008CB0A1F82648DA2B391A8E87F2C6E50D86
A356603A8642D8BBA1EEDA09F795DD3CD508B405C6BD07CC7EE9BFE2981B05D7
3B67BA0FE24D41D94194E5FC2564ACD7935C74259F5454A017C6ABC65E4BC733
F035FDA08CC184B178DD6C18C08A283861D5CE115E38AE2884231EBFD6AEE0AB
1944BDDAE1FB609F621928A3A51EEF5326805335937A0B37B5F1BC381AE35499
EA5A9CBA58CCAF82F185B2FD093493DCCD90A97F22BB0B70B8DA22B7404F4697
09A6476CBF11C97862C34607A7DC2871860D31BFB773789D9E08F493C93A3EC8
60A40E2BB12B97B32CDAFA0C2270679A62DD349CB6F6A20E796E715CD024D45A
9A51D740B3A96E7AB386AB4E1154350B1E3272E4B12630C2651431B3554ACC5D
07ACEA1E09EDA5F4712D1AE15D95EE92368F47EE16B78669BA73D68CF5162AC5
1A6AD727D94AA242D99B153AB4FD76B5364C164319055DF4B81282E0782EDD5F
5B3232974DF700581F8179E4B7182CCA68F8B35F57AA77C9744E3B91F292832C
2695E79BFA462D7789C875F6331286F86BF32146E98FEED2F17A27BA34968B95
8BA37668A5AC5B5FCF3A211021A15A328C151D5598D5C19DE50CB7069D9E3D8A
FF77E26D1C44212DE67A96CA9E355327F2DF9ADAFB6DAD382BF7E4EEF2C2FDAE
4BBF1332A95B595E32FF28C330E73A2D5F605E33B1B0EB2117681FCCEB541872
EA71001C654D42DFFF1DB2AAB63197426A1A86E9150D3A1EC4F892A2F092A3E4
50601EE32B2425551E7F03D504F27BF98F90DBC75FB814DDC232DA306F6F29C4
3472FDCC1CB26D7B4D256D0730F57792DAF2D43D99E9EB6392846DA0B01BEB9E
16204D8D0EC8AB2AB23D244FDBEDE098610F35EA1D1028A8BB64EF2EA43D7C1F
A208EF44EB316981B1C7A6BEBDC37B3AFBB141634F0D84EB6821FC9B0C4B5EB7
4A622EBDEA00FFFEB8C51B57F75ECFE7238BDE664DCD48D7F59EEF1FA42CDCEC
69E61DB7DF9881CE7C6820CFC12980C2E7E44967F3545D63CA72EC43886158F0
63F4C34E514326092096977A2EF5D976A0689E9EAA01D48C428D322774EC3C02
18FDC2174761E4ED43D4772E358CDEA9FBA4E782F0D41E2070AA3A421603EC3D
1FB760DE2F2604AA60D11C3ECBF5247BF3F222D51EF24DCBE949DF0F28C360D1
87286D4769A0166ACA47C3614F7E4C8CD2F737F19B1FDA0404D57AC0AE89822F
3DC3F10258B45C2A9EF695080C2C3A5459F52DF5237EE2205F898F832F2E6191
D3F22E335FF24246DB126C6397932331EF752D98BEDEBD2737E97DE815BA34A7
CF425621F06EEFB5E0949674C34768F001827F12F1BA77AE866F948749A09567
1A46A4D8C410705B100FF1033BE014B61A9CFE9F154411D1ECA40563B020A997
586C6F60D7543F94AE238F26B5D50F9C8BBD6CF8D6C6E7A0F0875811725FAA21
D939A4FAF40EDA07278DA546A1DD26925DBC56B562DB11A93A95D033B6AA4DB9
8BAF2B46850047DD1E00689644E9A9D6E22330BF572FF87B00ED797BAA3658B8
AD58435B34B1D7D501B561D3E187C0921EDF7B8CA9B4FF039FE7704B8D86E980
962317F6714428803979CDBBCDC96B5F791E79254ECD13F25779B90B7893E571
0855134A80FAFFA126081DEF3224534B171D6D0742E87C841EA0267D10E59599
61893ED52543013A961731D322161500E15ADA373D503552C0B76FC6514B3AE3
84BE3D9ABA647142B2B8815F321407ED2E3BFE6ACED73C8C771345EEFB470C54
3C59D960BE4E232CCBBED3F2BD829F18A73BA4F6BDA48AEF16E1AB71D7CE24E7
8DB7DF1DA1BB41D984B457154D1DF0103E0A79EC8C5D01C5E9A5ABF400254311
AF584C008BA19D607C517C3164AF5AA364DDE7579E59AB8F63B4E0D1C4D5047D
4ECAE8B7B0E402EB7ED23E493CD05C34D4E12899689A3660AD357112F05C939A
6FB075136208DE605765573824EE24E9B252D12950A0B43047689E519FBB2B77
90BA64EAD1C4D7019C9D7DB4E0B11EF82EA35ECB85486697BE5651DE0F5DDFE9
3C21AF4E50CA9D2E0F4A930BED450FF8923BC705351AB2DA194885FD8B550525
B75CB9C6D870FE9CA500BCCEFBC89C8FE5005A196389EAFF598241368502A350
A0D4C3C5629CE9608BB7E77F5201C8A046181A94005FC21822F84466E3BD897F
50A7A62C8A3F55568BA175BE511A90A773A97D8956A65CF6BF8D3F29A8376A0F
5E6BFC9D408297302124C1A7A32D8F5976F7CA9EB5969C73CE26568F78981B48
0F688646A5C8C563B8FAAF1F5004A4B42F39A4935E10F10BAABF5FAAAA47A65D
31ADA88AF1A0B3BE75E98F6E712917BE7D4DCC8E5F7C553BC1AAAA8A72683C54
B45F81F355D9D19496D0F80477BF0F366B61EF18644E80E57DC95D3A51508B5D
2E4B9FFC76B3CE53E504C6BFAC2BEF3663F1C2350D6479115F904EABA74B228F
54D1025997833778A5DE2AC5258B41041D67AA1F04A4C533EE8B901CFD0AF403
EEBA2C528EE2729D0F7855EEC149F95C853E0ABA4975049E84F395971AD6C244
D36FB6F2A10673088AA9391CAD3D4BAC7392E65BF9C6B42EA671743480E6A45F
EA04562958033991E92505E3ED7565083022A07F2DABDD90859F3DE0E6A89A72
047991F13B71F527D425312BFD58FCD53D79F81EC3550922E73CFFBE4201AD74
62760440A2317E38B52C617C2C1AF8F72103F1A7415F526A2CF3C16B800786BA
ADFECB08A887E39D1FFCBA9B62757C21CC2785B71FCDDD27A92D2893658CD5E3
F769CF5080E398F6FCA427D2A453620D60B14983E03E456469890FF47C2761FF
C163A406C10DEEF835FAE67D3EBD682120F16D0C5CD183D626883D5D0AD26254
38E577C63265C59F3BD53A8882D82929177263931EBFDC4C7A43DC069BA92CDB
E98424EBF8ED5BA75646FBA4E43DD949FFDBC1EB5419A9DD28A2554BEFDC96EA
852C54A355CB6F4CDC952EECB9CEA4547D57B9EEB3ABCB38CA40FDB69362996B
1553EBD742F260009449B6284B91A907A17C647A6DFCBE5BF89E5C56D299A58F
1BFA1D0FE7C2E3B80761EF5695001EC347713986999A6BF440536FB08484D515
C0D9BC826EFCDB25CC23092555066C2B09D1FF6E8BE11546D448B07D0D6408A3
845FF656ED7180CE63468E0AB1620CF517E98EE8437F47D2A1F30D99CBB19CDA
8EC4D2120A75F8FBE6B0D64D790962336CF0DD8B976210456F13FCD152FF9102
718D0FC57EC5B27A8FEE3A4373691772A120BEE77098BB898BAD21749370F6A1
CA41DD1A493A88B3E8BDB15D32C5B35103B8B0346C461FE03D435D01FFF15E7A
613EACE41E72B21E93092C2359F2535FA1D1A508FB5023D07D392FDDDE2AC74E
FF86436194093E227746DE035B33FF9862E3081AFC04E187A44BECE5C6C1E4B0
358124B83444B94A006DCC63466B43EEF7035544EB76199525FA7D80B4A7D80D
A1BF10860EED4BF3E929DF288E1BB1BCCE88D89ADE52E0E951D4B5C232674A98
40F94B9CC170284FA71225B2B84B50716F96B850D6FF61144F6A9E51CC1B8A86
A35082DA5E6E8DC4F671A68F8B02EF2EF44976FF68DF0865B18B10CA2367C4A1
234AA8AF985A3B1B3AF560AAD8F7A4C8E81CF29780690190D2E829323F3BA9F7
ED7D399CE11A1BE5ACC76D12FCB66B4CE90406085978F8EAEEA93E04B90834C0
501DA25AA2B872B756536736F4A79DAAC2556087820D6BFC7BDEBB1F514D9469
502241D4200BD22A95D28162CF3A762A40310717779DEA582740E49F0B2A5851
CA265048A748D61C4B7C040606D6661334764D91BB7DC517F403076BC8897E6A
8D5B3683C9BF396E85D83575C377D3C5C7267BEFE151C52A60427176D702F75D
8385952F764CD41D74BC87F8FB363E28C8AB16DCC72C35BEC350358D62B7B015
A019679B0B8E742902AAFBC10CAE2D5E87BFE61302B759176098C0CE2464D643
609143E3BFEDB380026F89F98AE88D73D7174B84787F6396B5B50FD44F61E2E7
C76E18A0D573BE4BE58E0D110665E22CA630B01A0EF0761F13888A4306667786
F6967AC1713EB3E53F291A7FD40567296174F0AB0E3BE746A4B976C296A11ADF
59C4919F63C78F9B7C2FA998F5BEFF8553E34B9DAB4671298B2512B7B9A70952
03545C01B0B0573F906E74846306E52E324E00D300A78B984ADD80D34E03E5A4
1ADC0636AFFA3A9031A7D52AD383ADEFEE56ADADF89E8F9B0B086AF6A25C6901
3A095E5D061651D028148953187801CC5CD18FC784F3E7FFE8F2DB95A4AF6099
BF01F74A6CD04E80FE8CE8FC240F3323EA950B489C0B6301B1902F233736792B
3CCAE73DEF3F7438E92E28B8F5FEFEBAAF35ADF8B5DAD7FA81685829A47BE47D
8080FFA7BE37E8A4A621D08846ADE751956AF6389EB1A3B80CCCA6788AEF2526
4822AB4D94FD51449F12FE85F816E2FC2C82A5A8D5FE0BB2929C94EC4E0AB012
8C153B28D703CCB29BB0939391BC57C2EBAA31C5741780CF40CA1E36570539BF
9B5C30B050605CB66F364269E28AB7331C62458523B7EAE820C10BC35D42045E
5CEEBD10F8EA7B75EDF72CCD4BB1D84D1BE81AE2EE6C98ED6295F652B2759825
CC4836DD015B037C08031775B8A3004E983ADCCF2DAAAD831000E27307D6CB2A
A6ECF5F92A1B3A7328F6F57B13A373A9E0DDCE6E0CB2008467372419BADDF2DC
4B8D59F781ED48E700F5B35BA0CEC0EE50D398016E04B4623EDD9332FD97D03F
0162CC8BDB0FF74A581041B0EE4D1E1AFB6B6FA6EFF9D626D24C4FCC91156586
A98D901BB47DE5D3C0CB6239FB2D5B4AE3224A70B9CEDA2DE760A98868ACB45C
CC8CC2370FE267830FB52F9B963C235A59BC191B84B9B6A2D87B85F21F39F0A7
C17A2A9B0044B050747E7D512F9C67296CB735C41593466CBF7316889A602D35
C37EF36DEC95AF26E9BB0A31B3F8C8CD0019B10BF80004A6B31F1EEACE14F17F
4FBB1A4C8E807806C7D90F8C2414CA1669749E13E6748F7C1EA489CDB5C599FE
B9014C662C9C68868890B42D92F3BA0B93D5479BC8780AD28B965C19DF138725
7F2013EE452D881DBC770FE98B8287A1D69D1F80068C9B0AED83074C6270B177
BAA18F1975F43F45B2767533FF7F98ED693455F82F098F49FF48762C6B8C7BF8
8EBC67BFD892E35E6940E94893E1CDFD2793D02413AA146D643432F79AADFDE2
0FEED119AF2AB84BBD8AEBF44CB95368A12024C0BB437E97A0EBB4121AF68C59
C3F3561B1CA13FDB336BD4F041E9FE46C75BA73D543BFFD51B5492DB49BF8810
AF0BDC54BB1D08740819FBB4EE3580C618C1814F112E445F32C0970817BC4051
4DB7F310794A648F0D3CD8F51792E322DAD8CD3CB421CC02D72483DD8EE22792
6096F165FAB755DAB5D72511ACEFD7ACD77C30FB52A523A63E5294B8EAB30ADC
5158DBDD7FAE6D0CF0B2BD75AFA2BB38DD97C6F426AC06714DF95D678008FAB0
329BDB6AF0F2AE4E41457830F8D213DB2411CCCEAF45E1ACB497CB6F88ACB8C9
0E71F6DC61D91E6C85B2018E78352250261E141ADB4233C55765115D9E3B1C64
7F00D147F33C0A680456C5008EB66FCAD41CE8ACB8B4E56AABF265FC35C70118
E421AD66D3A9454E7FF9FF20D50D96B41727A72FF76E7DE651DE14A8F4F77B4C
BF6DAA00B960B965E9C7F789DD05BC094547F26AFEEEB5E3AABD25FCC13339A1
037B3FD98125E92AE3BD6083B0267E52474998E3E6319EBAB3D1D4F44B21A86A
B691DC36A30ABA189BF305BEB48A5422CA6E434F0923E27A065EBC126C816B00
FF5AF1029041682E2C543ED29235C7430364163AEC6E911191B06F159BBBE9A0
004C4CE1C6B388B901F937A299F65C3217180D4BBDAB861AEA4554C959537D1A
C094541331B0FF94968EF45E4E0172520647FA07B7B6A0D06F3C5A9923AA703F
DE16707DA2D8288D07CB27623F0936B1D6390A4581052B66DBC9FD7B4105F597
D9EDF534831D51265DD59CF4A57E889E0DB8FF54513822A586932D1B1219BE52
5A61FFEED5E312F3AC9421A46A3FA3F6BE1B968E6F1750A2379E60C0729F65C2
6996C69E6486DEE35F247C439B8FBB6A186F23E36E65B9D87A982B8858D24BB0
C12715940D7E7367D720CB772B840B1F52CBDB39B6E9E037705608D332929276
2B1119C8FC5EC152984A0D172D7B3F99DAA47965B086FC994070DFCB8299304A
5AB02D643D8B74EC6E88A7A79AE3E5A9D013F904770B1F2E9B707453F8E9A44B
0B73207821859BB191D53398A26D610D53AE6A1B0141D3F4F013108405DF82E0
D367A0200CEDC0AAE2ED77DE5116533BAE1B750318362BF85D9A4FED0550257D
C82DC5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E6BE6C9B3A29AF9112D8DE
2BC6C8A5C88261832DB7FD0D75EFCB527595851B12A3C1E1FB53FD9B346864E6
AF67D40253F60EE0BB86C4FEE17290D7535F0BAD8499A55E8791F161095D5433
BB06F9A25DEA07FFDB2155DAE8F2B122563B02CAB57B9DC5BF98B15B08D0B6E2
FD051D5DC90972577F941648A1EAB4225390F130D83BC8D134C843897D338295
9C18A903DF75F4A3D5762C29295E4317B6F0472686B200B23FCE6AC13FAE056E
A1B304C5FA763C6E22585FFF03959033FCD255053F73F9DB10850A3EA4289CF3
687C86E22DC3C48CE9A3362FBC02F1967CFD45E193B5F15C9CAF3AF3BF89D94C
253CDCE592272ABA119F89D7B160C9596D3FBEE63CD4BC255839707BDBBBD663
2C12606449ACD326A76B011D9FDD66C24C5343549CA26B2FEBD568CB936E2125
6CE1CEC3BE4E078BEA21D25BE16201B40407019A28B699901B1A6F7C9D698511
308B6DD2B9A8F686D6AA020E49172C02DA888DE03D13040E48F4C18CA819FD21
73C6F3F2FEE9E418AE444B4AB8522BB3CA2A986A3005BBCB68F9AE872E75C24E
F420478B120CCE1C66F5489890731D895BC4215406A871963AC697DF01C1F094
DECCDD9F43AAB88640D0E9347F6CD35FA4757B0CFBF1A0871139A66BF3E0988D
81FD93FC5DEAB91FAFD236C47F453B38DB0067907A28EB5E992ADED0AEA1C81B
C3D6DE2A45C15172FF2CB08E341A3E016245F4BBCE60EECEEB2B7B9B392B5E0A
CA15C2FF59E682E54ED33CEB36CC87DB0323EA4794F91CB93CBF19C2E04D3A61
F54B46D1DE5D40D1815DEDA70A37F7C83360DE36A3181C7F0944360D37BEEEDC
C2D4DFCFF453B917B3CAE365F6E262500B0209CCA5CAD7328D8654B7628F0188
2EA96A4BC7AAAF9EABD6BB272B4DDAC2A26AFEB7E54E4F919BE1FA278AD38D40
743CF176A9C55F64CF58FA674EEB53294C36C60F1F06698D3E30BA3AE1061897
081EF90AF10E1D1EBE111BC6D134930242730DFD14B49CB710BC75E0106F5F94
BDCD5EC3826DA19468F81D4884A92F74C72430C349E0C6EEA3B4835A64DEE8D4
BCCDB2421AAAFF1052012B1DA153F7095F6E0C2E80C3C82FA51E09627186E9F4
0DF393CAF0F0AA8A81AB0241397C0F8E8CF3615342A3944DE09291239E7CFFD2
39B908C63C09C19EDD9422F77B27BE343F685149BC5AD00839BED636DF8A6A81
20413945FD120302CEFC029100F93F16BF165FF099E2D5173413B3995A7DB9B4
C56C828F8FF9FE4FDF4C1C0D8AB9DB1C4EDF7F1982539FBBD85CE3CF192620B5
3DE2A271A527E27A42CFA3BFBE458C94738E3FD8FCD712D9FDCCC6E94970DA68
1DA58AA558BE6EA02AFCAF8907C43D36DCE606D8D89FAE426033708CF599C6B1
9F9211DE8E3C682C96BF0C1C0F16071FE6249F5D7A5C8724E649F9FC87745C2C
F446055EF14BA832B78936A078A4716A24CDF975CC7EA03D80D1B3F78C5A219A
B2B3820273858FBC0B31DCB01D1535DD82C80647C8B8CDE802732D4B23AD08E6
4CD0EA508DB893617833CD82111D9FCEFBFD625B7348402BEE59368220EB2EC5
788CAE0589EA038360616F45D67D53C58C1D054321E6F4E9A99CA02B5877B537
47D33126D4E427FD7ABAFE5A7604D2EA808A251E388C77C8B304AA01866255C1
E881ED7056CAE6E96D15597F67372229DE04BD898A1A9271B1323CF6AAE1541A
B6B5EF2212B7C645986B3B35D7FFF36C88EFFB6FDD31D495CB4679DEEDC60CC1
163F4AAF3A3C3E59B2D162F74C827007AA5A4BF65B0FA7D04C5B72C3A4D49E15
A3A455E3490E888FC47F9FA03C6C48951E0FDB4CF4B1F9DB41360FBBD4293931
98DE3BAFEB3D445F5486BABD5339CB99212AF856D17FD2084FEA438731660F53
07A9090C5C310FD71115A0B725E9942DD2D16C3A800AC4C443525D711D6B70C9
ABD40F1977FDE42A506440F3B34C329E6B9EC1B3B7D78A82D9D6D54932D54954
76440B9864E747A41E71A915FB663A04001D43A504ABC776456B69DDC85A9045
E34FC40DE4F2C1AB3B8A063D0C75AEF496466E451E21B8EB085BAB7D12B3B5F1
AF9C403D65CAC4A7A6E5BB17ED74243FE51E6BAD891BC2CCACF0C9E1BC503628
B2361D551D1B385BD6E116AB4C51D88BB4064EAEF7622829680C0EF7184211C8
79D1CFA2AD398856498188E52CC6CE183F72C2571F46E81CE317A0B867554FC4
18A3469A988692F0931B645389DD9EEFA606C7C16504F9BAB8984AB1D1CE0BB1
799BF7417AFD407564C80EB1E200A0CB79A6FBAD1E171AE3D8D4277E0496F0FF
797C814A1EBA6480099E8276173D443884AC0600329C607B778388472097BB76
56081ED5206F2827191B4CDE8CFD7E4D190746BD0A86AACFEC7C2D4CCFF39FAC
7EB56BE27835471BD1D7AB84C2DDCF5DA974B2068488AE47A9F079D74F88B0FF
585B561BD3EEEAC3E8BB95BD1C6596BC5FB90420E46FF64199038C006B74DD8D
060CE5FE0B0EABAF162A17F6F69DBFBF14DE59470962F632C45DE55DA79A3CDF
145253BD827ADB43D157A1BDFCB3233B9397EA3C98A26B2FEBD568CB936E2125
6CE1CEC3BE4E078BEBD59E7B470D9D91F2C1BD1ED08C01D4B98559AD18A41813
8DF2FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D0FB35C28196C45BF03932E
9270A38A5D5FF22CBC9327EAB5E30DA2B09FB2012717AC3CCA0F72FD3DD6E6E2
47D5B1BD5757C07FB38DE5C5CB5D530CDB8376E52631A32C5F65172139C9EDD6
7D7654259E6EA9215FAC0FFC8FA2A1D13FE57614EFCABD231130531CAA841028
DCD2ACA3094563790CC22C491853A1669114BCBC5B20BB6045BFD5AA4BA26DC6
9F2A2628FC5A35FAF9EFA97C5FA81702C04838B81829312A1ACC2C16A88E8FC0
194CE3B471CC2C4DCD7EE8DA67D9BEC0F62754AF15E6F66D5889AA38107618EE
D26B3A0F90F6C7FC0DAA0822F331CCCD4B8DA3F4CBDF92D8C0515B5812AA3421
7BC77B1E075A4BB99145EA55CFD1D12CB02C65C35C72743413D41A56566E5111
ED7DCD009BB3E6D9A49F03FA39177E5FFF4A9205E20954906ACE661BF460C278
AC3ADF0223DA6C547263340213128BC9D5A34D941A08EB58846A1BC0079E1665
4C76E72A1E10C8A1938B4927A7253E20BBCD42F78C462538FD37E22F38AC4E3A
8F414FC06E57BCEBBFEA411FE48CF96BCCFAF7A173C1BFD4B934D3C3358D770B
2DFA3C80BB7D7E09A12CFDCAE0432930CFC34EF65317B6009EAE101A774CB618
44FEB21466DEA111589DA5AE3199BD45A3407A477D1A7D972649F1E5AAA05722
18BA0F3B272BCFC8EE865A632AB4A611CAD82809B72715C90390DEBA757BEA45
FA3171095052B839F7A2A9E2B07AB7320CCAD9722595E7497392C3C46C5FC40B
B4157469C688FB09D2A8E94D0ADB138953A982A7A78D7EB860E93FE4730D3AC8
B2C9AF7CAC8DE97F6E7AE9B17337A3A0053AF9B9A07F8F3CF06897E25E09B759
4DE5F864411B67DAEF6A6F1018DB60D5F833010CC108B716D5DB16584FF2E613
EC3AF9EECDF5BEA87E7C92105FC83182D6C308FB774FBD896843C02A163DEAC4
B6BA52A7CDDD1AEFC0A8C926EBE5C0826541C257638711E28C333FDC8D9E8C64
D91EC6D5B05686A26E8B9592059F76EF585AD0142407DCBA76E49BADD94B9096
086EF1506642CBEEEC94A70042EA7FD8C960D6B0A97BFF954666906CB151C070
9B81A2598C9422463D8B1D450DC7E71CA5DE4E258D3DFB16636516C6190C9681
EF5494CA7A44222AE28A75AF6BED409322D1CF9BFD2B5CEF6E08F7C9334D3290
3E2C6496D02DA951336995D2DE6BE506F7CADABDB3E3849830DEE742311FE4BE
262660F33321AECF7862664F02605BC49BA3C89C2AA19CC20F76FD420E7D6384
152CC4D66A13AB49D23BBBA5D38653AAC7B813F29F4507120E6B8848DED6E8EC
6A58365D7A62C2FDBD0B7FB6D86E90945468DA40C617C9258067536022B74C47
E0081BDA3F83804D1C0062CDA6EF5CD1062CB8415E4E385507F54A6A7869550C
5C73D8A9AE183F083F4068CD684517F152E90A7B58F0B3A71010CE8BC3CBC469
8763770EDBD72BE6411E624530F2BF04F22CEA7384122E6DA850F1FD0810B764
CF1DCE3D95F87F1ACFC209EA16B2A6A5D0BC7CFBD3B08A4B47513E1F8CDC2763
558C93AC71A4C6A7414BD265B61AB7EA4EABB4E952B6F2A20051ADCAA1AD23CB
31F868C5092BE089745D082DFBA7395913C4322FFA612289353980885FE5EF05
4D5AE538348F53736896B0FFB7E99FF0558F644F2A1A8DB5AEFF0A584F6BCC0F
69BB40C9D6B45614ABFCF417F6FD17A704C4668F6F85EE5B4F2F6C38F1786DB3
C9DE2BD6CA02D74451FDF61617263D3C8C26B70C9DA4983601072BE845DA623D
F3552546531B462AD740B4CB6070A178427707797E0E88004730989EC38FD637
2FD614B3A67B1451591E5274917DD33ADF111B23918EF93CE8C1147B93A7EE8A
AB6F15B244544E355D312E8E0B4078AC809300807CFE4BF7CAB61937CBFE3E0B
F24777EB917E73BD2FB9DB6751F7C319FCE5671F2A80B7BD216B32682375DF67
0EA86EA88BC91F47A5C1C441D0C9D794B9902C9C1A8E85F575BC1E7D57D04D5E
7C7227C76F79C4261DAC82AE92065F2FA5D45BF33F40210AD2AA6E54311C5D8B
76218DE43DA42334D0D9E5EF2E9479938162B353074502EC5A9386F0E3B2B2A3
A4B882CEC1C97B589ACB73AA9D2C389CBF12C7B48687D7D2B0652C35B5C82BB0
EA061E3521CF9765A451B09666C9CE3D5F6EB1C5D7524C125C86A63F7AF293CF
C75D59428C13E4D090E30886D8F1CE06E367580D62A4CEC2320F3DEFED7E037F
D3F259D95A32C4DF2AC088771D92DA18158C7F8B0BF0F3B22DA67E7EC571ADC7
C2142F647D061CBAA805921D4EB1B72AC8F83A69A5AF81CEB2358880D5E2B1D9
C87CDF16AE86047B3D6CB83D9A7D4A7AA6C97A4FB2C2CA4E89F6003274118D0B
8D1E0D14098B537FB7E6C9492C2FC9F5B3B18C4FA5BFE8A5C211B28CD31335BF
56C3BFA9A6819731D70E62616DE4997C6E653A171196E3422408601C926B5876
5B8698FFBBB86E47583255CB5BD83002BD6CE5C271B082DF83FDE3D736048737
52CAFC5F902D6E00FA1DBC770FE98B8287A78F32B00EE34F824317E8766999D1
7EAC8B28132D2BCAAB13265D1BDC9AD9DF4202E2704E2D855D46F32DE1798FDC
438F54353D1245ED78D1614CC69764EA424047A6073809A230B2578118918F97
C7BB8B62E532972120E2B0496813AD014D02F85CBAB8AC63097A6025CCD2128C
6F398DA5BB8BF813CB9DB27CB44AA47AA0D4E6482408849E3949DD3BF9F14F61
C0D2C711322A8F87BF7A118F83D96EBA399743D35021FDF6A848FF71AC4935E7
9D35EDCE514BD77A293EF8593996C53735C1B0468104D02B3A4795E3A4A5C17D
E6823755F59BB9E3A052F69C7809A48D6CCE78CB5D59BFF85288F1BEEBD85C8A
2EB58342F310B9B0A39590295049AEC2B509E09EEB88297CC97474111EF7CEAC
F4063F1B86C7D5C49C840257BC6918117AA97067ACCAFB470469798AC194B31A
A1E693DE59D5585EFC3569911E100A036EF590EE09FFD84314D9394BFC068097
B778D17B0AA1C672E2020C946F0F8E03A359753977EEE12722F9712F9A88DBA8
330981646E985FA5106182EB823194818E6DE249207343C37BE9B926EEDA3ACE
A7C97A82344F676958CBE764ECABE84ABED150C4F135AF11509A59F3447A2465
6D33CC5D961E345D6198D3BA6CD0F0F5D5CEB1B55022BA9D729630C537E79CAC
DE03CD27DD1FDF56247DD3F1CE4AAF3A3C3E59B2D165028AB0178B3227810D99
B48361133B54A6DFDC87274426034E780A9B59F3176A5C5AFB83AB20AC92EEBB
2367F098ECFA42CAEE34B742B0526C1D6B872A1AD8F4364D66E46AFFE3CDE50F
7693D5A4D6BF6BA810B780AD3D7E316F4E34DC85646396AA84DF28CF38994138
E0F4E0A2C7F5284FB2BDC18FE07B44B71BF2602A64A1FA91CC053DB5773609C7
0F69CB94D169B85A32C406E6238C39A70F76B21AC9F5DD453B1D3838591BD4A0
179BDDE652489013DF1F827CF41845BE0BF8AFAE8348F559D6AD28E52C2C4B71
16517ED596F3F7BD651D9AC4C4AF100F18714746EDEC23AEFA3FDB17EE7A70C7
AAEEBCCA32CB4A83B9B85C153CC87BA98F5A41853CD3C9EA826C974B4D051B71
DB16D9BEB4252D67C718C2A4595075C1818F6A18C855127FFE601E8ED0AD98E9
E8AAE92BBF0645F4CE77A3A86EFC9BDF91470F1F504644EE43EDBB75AD763F06
01126AA0AF078126540BD2D435D0AD6CA9233144A05459772B76A05B88DD2148
F33DF6F561160A09EAFD6CD28F7FDFA5428CD87225C7FF28FDCD4FB898A052A0
B1A3C9804D9C66FE5891B484C4F3ECCE8A8CDF069387E4FA5D4D92045C0A486B
B5871AD692296D2D69F6CF1E9FE2200122335CA4F819DEF0C6103AAA90690F83
4C207BCA9BF0C4844A59841C7C7682105E23A374BCA91885E7449DFF45B93F5A
05EA389DAA2721AC6E6BFF0015EA34785FBD84E6404384CB70707F4F0F088114
534F6D36E4D098645AB22364382116A593A43A2564A451C9C2B5E8F33F61BB2B
8842FA5714AFF9E5F519ADF4936D2D0C1BD34DEA801BE77C27641D2C9EC25EE9
65F04F42B78D2357D21D91373F67E464D8057C5EF17F1C3EB72CAEBA74F9B752
A5A15F4BAA4D77BCA32DE67243C4871F75B38BDB88E3B70F8524CB12BC34CD34
C3251813CE12B7620D98E30A60D93E9099CD8C0CE8B3BF58E971F0775CE085D8
5988AE740022F764C49FE9B49A108931E3CB077A9C56563D3695FA6890A620DD
863BD5364A28DE4283D969781EAD784052953E509CD6DF4F2A88B66B9BCC14F2
5ADCF238DD95A554E64ABF5421FD338F17B562E955B4EB2EC785929599A0F81B
43C52F5C88CA3242F20984B44BB4B9F234845C6313BB0B4C5EC4889FC8C0F634
CABABB7EE83BAB27AD15B45820BA2C8942FB131136588242112B11EF116EEC34
97D2D84B19F68EBF7125FB02920466AB3851CD45FC323019A45BCA3DE39C3E76
18C6322D264069210634C26BE4D5488927E83A6949F1F163BAF4EB99F9A89CDF
A3B4D22C3552E70D8797F7989036A0602295F85DD96D9C79201BCE9DB330AAA5
7575E2B264F8D2C86245E64E85C73135133A1C84C65793AEF98DA25996ED440A
11F95F8ADEFF72173E9A5F2AB2F62C427E5BDC0DE318B6D6F872C83B5C895A13
26893F66EFA17D7535B02A78F0F2C8E96DF0029E23A244DB1F4E1CD50860AD7C
73E15E29994EBA7BFA669EBE57C23DA2FB25FBFCA981355ECC31CD5366FDA286
62B8B1E5B0D69E77228C3972E003B51384E7425D02E35C8F3A3ABE25D10788A7
AADE6F8797FCF8347448BE6E53709C51019EB4FED063631D1AC0E4F85E3CC5AE
F1EAA75C658E90F0246C18C21CF61AE3A77D3E67E54011D9DCF8C70A6E4AF6B2
69BAE0CBD3C37321C05CC9FE8D9AD16D04DE108727FD7C001FC3A3327AF9C22A
2B3DDB491260E067DD767367DAE1B68038AC53A7428F28CA6FC859BBB8440376
547482A1BB7289CA8494AEB75615C7A8F64D13FDBD4FB5AE98A4AFF73A053273
D8D6B92F86979F67036C2938DEAF61D75DDA7BB68E16C2BC75772E05F668E491
182D78018466DB279F3FBDBC4262A26D679ED4D87F89B2D3FF1A88AEC67470E2
6E0D75E77A06A2EC0B7193DD414AA8135C8E1DC15D93D25120B0F2CD2815C6A4
C22518A5D3953256B49A13147A1B7ECE2D245D29A9A0A522F695F0C4CC62A0CD
53CEB6B41CAC835A14B1FA3C5919589CC2B5DC72244996A653A2099524F362A1
88688DEF40BB855F6102028DE1FBE48E4212282BB7BDFC55B4522C394B3A5441
598D77384F91B77B22E158BA172BE33861E18AAF3A48C728373D50F4D99B48E8
F29169E04E1631C16076ACF45773286929F287632F9A1000E25E76AEC5B22FD0
73701F4CA953553E8660DF4FC881B1B290AB76EBD11A36DF260F421578CB5FBB
61218034C721F5EF704DABF60091C432C5A84E20DB60C959A39542360C63018B
FDE8376E2AF60B677CD8A3ABDB5BD6F1DB69DB1D0AA39A2D9F2BF9BE29098028
902C228DA6F74ADBB32F783DFF01439B53B7BEE22EA43A04220D262D9A75F22F
3EFCBFAEE828297F3C9C7B7BEE83F73C6651FE0F3E6691DDF1D7314511820E4D
E56A53E5F1717E73B7308CC9866228BE640E9FED0B7B05FE445FD2D83EDCC57C
37E2AE9CC0C2AF4E11DF83A7419220134CABF1B508B8C8EB7CD9C46D39E59B6E
203FB14833F7130AFFB5B0BC79F1DA37F8AB7BFBA311FE17FEC2FF13B697DA4D
F3FEE824B277DEB9489E1A2312DA7F2B295D688F8BCDD0C204E86BBA0C4F03A4
4E9CDC8616428D0B8E963DED6BF850591A5190ECE16B0C7F2197B91BCFF5A445
22F7A5920302D69A036F07791282CA7079DCA2A28886CD1BC79A878CCB9382EA
FC9A60A2FFF31FB973840317C6D25C7AE66D5AE815BED7491A92F1D645BC78B9
083022D6E73E10C72DAD41B1909EC6556DECBE2C6958C06B51578521CBAAE62F
DDE67198688271E10411EFB918C59163B02A092AD3D79BF7E0ABB618DF291DBE
0D2F1AAE86C8913E61A3013013D1B5DB537A4DFF3B518AF202839E49C4416075
E1290D0B0309D7EBAD12E1955C958E377F9184E457982B317D8BA90F3F3A4B1E
DA34F141B2C3572303688576B552D1A85D1990353664134911BB2AAED0B437F6
03BA35C6896FE34C3A5C0DE4A884418CA5E726C5C045AF49A827D2A61D5D357C
732D43A502F56F40C3E61C43735E8836A4A6AF80052BFDBC0AEE7589FE033F04
E96260DF2F60BB8FA9F416F8D427C62193CB4F24D90AD8572242B367C209BF27
6BD7CB940A5692934B59EE110E4050EA58D05058B884ADC83552B8B8A38E54BE
881F77BE7ADF336E0A244C2F298413A2EADA1B4961584C008BA19D607C55B605
988E9727FE6F8AEF5969EFF87EA400501A3B32353B4746D33DBFA07050957559
01A3D5F5E1D77074A03FFE991A44F80F064C19395FE8C1A743B49A7B1CF99DE9
D19045B4B01C7C4446D84F7D48D61F185BEB0DF2B1B79C72F40DA329ECB8B4E9
34F5F950C8E38224BA5F8F2EC30285EDFC9A4C9D7C70898AA8F3ADFCBAB64A05
2AB7D94DA9E32526E05DD3235EE051C12B06452018CC6A6BFBA3FC22E6C14591
5A43775EB1D7A5CFCC0057DB5330B9E1F60ADDAC48A9CD70475BB89E04104A0D
2BC1DFAAA96C8E563CA598BE6D7CE6D5AC08682F8A6DCAF15AF775B2501CD050
D3E0B8A238C88BEF867A23E7920E27DA48102D392FDC689CA4F13ADDA9A906C4
075AFED8729AD0373F86C9447F2C29DFA00B569F26B597AB44612B0330CB022F
4789EB00038BBF589E6B214FFD62144045468F7664E5A96B4E600A9A20EDAEE6
7EBFE094EE13C05A0F517BBB35DC823331882A9F6B05A0EDCCCFEC4B8A06F4C6
6667E569110DD83F4AABFBA340108B3824795F928AF04C833497F7C4B1B692D0
495AB7DEFFEDAC25222ED323BF221EDD0A303632D0B8B7D41D0EFC0C41727DC7
874F3EFB224A91E937A75D59AC91EF7DD32344C3A2299F1889ACD284F89F01AF
6D3827E6C4CAD6812A7F962A037840DFC6893FD29B7F49DA3D56B2EEAF8EE01F
07E9618FA4C91E2BED2CB68D2D8FFCFF5B77F53818E413941C7466F9E34E6DEB
DDBD63B0A2EF189C4DE4DD8E028AD7DD891AF4A025B2BB0CE5903E5C19549C86
332833AEE4BB0D4FC5102065BF7CB8C6AA411539C0D9260E339B109ADD67E422
596B49BF34A98CD0CACC8D2BDC3FD993D3D5F8E036DD7DCF375E9B7CA192C169
175511A431F92575B0B07AFFD347754AF32699210154DEB12072326A07710415
372F75C299F71B01AC09D4228981C36ABD348F942386560E2345508D83DDD116
AD2A4AD99BB71178819AF2A02828904494416E3DF1D46F5D5F80B2FEA256EF66
888CC3CA21D9B855B9419301CAD3D49955B5EBFF84387DC0AE48DD5960C9634B
E3AC95FA0C5C5910B1B5124688487CE08FCEFC752BB1744DE326A1F7A5FD4865
408FB7FCAAAEBD0B17B7A0808810D53B7013405ED8B04DF0FF2741145A846673
B880D9EA4B15AC54E047AB99D3E4E86D31DF9598D2C14A06AEF67BE26C73E038
D1225EDEE83184AA4A1C1395547F1D594860832AC272A4FDF70F2C39A0A4F001
5FFD1E7CE23E12BBAD827E7303500689591FACD61F7C69E16C2EF43F5B45E2AA
8CC33199066929DDEAD48EEDB28D31559C8B61790857547C6FCBB35A79610367
CE439A3DDF111B23918EF93CE8C1147B93A7EE8AAB6F15B4283416D0E6AAD719
A820F2262ADF2ABAE1E46EB10E81321BBDC1582215779292470FC5F0273158A0
A96241917FDF09B35CE40B251C5C02EA32513A11B5D9A71D6614928C2F551F4F
54CDB17E9146B3E8016A57814DABB242B06215B8EB97891EEC871BDB1907621C
141C605336EBDD09392D57CCD292BA41E499CB1364E21ABA27C6A6D359E7C898
2A5903F4143B15CEC43F1CE34C53236C4864D461AEB0945241080ADC46645C55
EE47DE4AA52ABD988594A7EC882C3255628BB75CFC3BE8595738E3F5D3003710
B04AD8F1767A495B8B1226C56160914266B1D28D74185B0E0FAC89BEC950A0E7
A8C1AF60D163801D296860FFED817B1F5B4DE32EB5E83BC884BDAD2E7864F2E5
21ADC7C069C46B4659C0F2C6BDDD95BAB691BB29CFEA534319E195268F9BAE41
F085CD7A51FA9EECBF40F78F9F3BDF92E26DD7DA4011FC5B38C9D87EE04D5A32
A73A20DE7CBA38B1B05A52CB340AC351B29C6BDA7E7E236B76C7E91C62F5E953
1071677727954605F91BA3404BCEF29256AE030E7B3528A0967732E7BC514637
F7360ACDF3167FF236369C43CADA19C444FB1D1A35F6F9F2E52B28CAFCE7E6EB
689A0F69E262640A289060DE4202AFF6751FB0E9271CAAD9E76A0C5F93097129
01FD044F3AAB455EB7D85772D6243D16082645C50A99F058DE70A3C16F8CE40F
74F7CA2B5AB00E11F86B65BB10B62593DEA56DBFF08DF61B80CF18E4F4236756
9CC2354D7B725C2E2B38D20E81C0700BFB66F45849011BD76FF8489964A7848F
C6F3CFA44B7F578887ADE676ACC5E3282A3F2F35F415C5B593CA786F5619106B
C84955402CE2D267B6F66D9465907BB3E7B2C1BA38AACCAE08206EABF5E61E8E
B6B71AA4B19F80378418FDD1C909CB4C01DD94075FE397D7BAF3405079A9EBAE
EDE2EAF70680BE2B3D13B9ADE40F20C67E07A91DA5295539868F02138047E972
2F77F39C29EA6F8251D4565811D147311B7C07C17737878305488298DEF3FCFB
7F5370BF17B6AFF561681D2E5567934C717EF2D6D8562A7CBF1CE157F38FF8FC
5FB4F32144D79724193EEEA74CD89C2B91ACAAC6BACE7B97A9E5400F8EB656A3
487B329939B5D0287AC19B70F2E5248B743F7725A85F7C9A360108DD7EF38D48
4686A3DD60D193BB6F126F8EBDBEAF62F00E36C577A88652188E0DB5CA45552F
8867037B2180897707BFB89DF29932C19E128DB67D6F73FE591BDF942BCABB96
81E68B720CF1DB67EDD3D6CDFE2221396F2D15F5D60F20CDA494453D99349FC4
F65130127A3BE6784780833673C39F2762CD95B4BE8C22431014B54551378F52
F29CBB2F30C4897D51AF17B9562670633526DA154F2FC6BEEA110C044A7F9E3A
959269241F653849C02805E1C56022BF709907C3E14616874AD27FE89777BBAE
47CD1B4DA51B5A95192CEEA832EB995E27D36E1E19B4955108E57EECD7F7BE3A
96144B2D788C52421B59882275302850ACADFE7DF18588775B7A80CA875D252F
A71BEAEB2C4C95C424311AA2718FFDB2FFDC98210CEA7EC65EBD7456CA9CE341
FA3BCF23B87039FE60495A6E8855432477FA2FD3DB9D1174B9379E0550A25860
948AD5AF099007FA4498B24D1CA80140F994AF6AE2690B12226E472B9DF20DD0
3BC020CC3CCFA7CA7D3C3A6403B9A7675DC69ED861AA0478A60A27FC10DCD929
9ACEA7D4AA01770D98660F8D9620B751B95775F20E17DF7C66D0B692FE7C17C2
ADB25147EFB3F43F2D4E7B94636092DBA188640A8CF2184502EA17E7F5E6C8ED
C385F5C77D7FCE88685BC192FA67BB67844E1BCDCF66320A4C17B6825C82B8F3
D782F86642C286EC5F4DC9759E884A860C1C5F85F18B9172E3CE5E7EF0DA6003
293C820A42E3DA944318206FD5252077F98CE25AB741F5DFF44F759EB90DF847
19736B362D393A58CB456F1E32792C3F6C3B01AECC58B5FCE01532AE1694E5C1
EA3D87459FCA9ED5123D2C60F9DF0D2922CAA7A8676A83FA6E29AAADFD82C658
5E084B83C4F54E2A347126EACD37721F56D09379385581F3364F0A4BA40DAB5C
28DFAA3D32E3EF1E9E52662E86E41008D35042BB14AEC37A5FBE66FD2D66A928
385A4ABAAF5B180443ADCF37A2366C10757BB32CB8DD70B292E4DD157B0E18E6
77D9D1A969639D5E4A46B77924E111830C7ABAA71A91E9C01052E02F1214A8E4
C8F25346C978BCB0B56BFF435FC20E6AE28C6F9E32348310D7DDCB8FDE3BA483
F722840F70F5314930C9931186EC5040C0E900F525617207281D58A68EA334E2
70EBFD865AF29B01E0E3460AD940F23DFBD1DB253FA8A77B44B234007A695A97
A53E2CB4EAB87349ACFF02714612A61940C34D9FF47685FF21F36251BF8C5B82
D0B4A6833BACE8D08AE01E5697A89A6045A97593153A21012A6EA10D9C8D741B
AD7871776B6A4EE93BD1F362934E4EA330B8A48154D410482DA1202736A20BD5
ADBE1CE72DCE5CDDEEC7E3113C9510F18204616B97E576D67570DD0EE5E56361
CD27A8D96C72C6D23703C56C6B3CA9E3205DEF0FCB91CD757390ADD094C6AD6C
257194CF5F846F032E490190971D8465C3CEDCC05C71034A0476753E6BFCFE8D
3C78749EE31E645E6041C0B24A9C34DE650F7F71302C6786D05D4194461CC99C
4FD0FDB0357BB5233F3D0F6212F013072DBFAEF5B40817ECD640B52FF6C69244
E1F7209FC8F1F1C584518BF856A56DAC25572C3165258B512B98701285B86FEC
CE3C6C420F53DD1BA44D239C4AE71B9046CAD64E338A3795AC338C57A05C4E5D
56A4DDC4681B41A2536132EF0E3C26FCE96B24DED8A0DA83D58D8413A45EB189
AF3C9D48292FBDEC55AE303FB7ADF8AFA0646A4031EB15E0A161CC4783729578
878D2C654B6018C7827434C6DC59B62D3097D5AFDD5DA3D313F36746440C2E9C
FBD1E891E4554BA33624748823114322CBE4E7EB4CB08E11BDA47C18042D152B
18F96ABE0DE74727946E508FA8B164EE3ADBF74844E50C080A3E38844F5D1F36
E250B0CF3E0BAE1CF96FC4C9045DE5578D2056E29CA10C6EC5C142E0541F8F45
11FF82685B5B45BFAA85BCEDA81C401C31C03EB0A20FB3F61520F2491059F93F
B56841921BF80E0C42FB3C4133673F7FF134434640248791B2ED72BD5CF46386
D697F0BEFFD97CBA22BC9465AD58205BB58DA4D70291A7F5492025807E716F24
C8BC2E02A3DD4125F41F656F7701F36823C86C38BE998704DB8178325EA34884
AD76DE085F2EF87AF98FFC52BD298B1DE626D05038AB23F6AB4EE9EF216EBE1E
9B0B09749ADB136A35F12634F0EEE8420CF6B478F7B17982BECED5C386692380
99608C27E76C984E054CE25800DD25631C8F22059755F76EEBFE36A6E658BD6D
9B72486CD5D51EDEB3149061D18E703FF2732D0D1797B70A52A1BE26E3051FE2
255B4CC7B17B1798199D542502CF851A8E51D73376D55B5E293319211D70F825
475DEAD154B8C3D8EBC748BB13A5D182670AD02981F33465E2B13EBA583B9011
C9902EF4D0355E465F969CA4FE93E44180C5D823B5604F32CDD823A5313386CF
449C9CB20D5FABE7BC82F61E5EF76E879261D56DF3B254084F007745889B9F39
83211CF964849DBFAAF8923C3D6A3D02864609665BF2695A44D423EC8CB3F819
FEC839F4D48736977F5B21F6961C8A9ACF42084DD753999F1101EFED7759E39C
831DA47BD4A0449435DF2FDB46A9FFE6D42B465D10C6658F234FA2E075B9FA99
99A584D93CEFED8768DABF7F2E4FCED47D16F4DD2399F5D53F203F331602FE0F
C138EDEFF078A89DCEB952B75D7B33D0F261BAB212A112D3C8920FE4FFA7E954
CBBC372BBFC8AD59B3F6634AB32C24553F137AF0D768D0EA309178B57C16A763
CFC9BEEC276944BDEA255789EDE81358756ACB344238EDD985C41FA9CB3C0EF5
88E027A57A812EFB9F870174F4D1BFD11019237C11E486C3C3B55EB14F45269C
5224AD15BE8F1A80D39F1B836E50FD17DA6AE111FFA48845C0A7FF2E0CC929CD
F9447D83A7166E7522FB0B5CE164677EB196157A70C4861E16C7332E11417337
5DDFD6EBB141D3DEC8A30975B3183F5DD1A9684C1CD31524E46904832BDAC955
45D58C40DA7ACE84C0D678BB4C322DBB05B04A2632153AE1BC1E0E5EDAB8ADDA
434EAAE6541A3DB6A13F6C42FB35256D93962CEBB584381E580898746A333CAA
32E08A8D2479BE76477E5193944353796D86AA5E2F6B3E71D1DFDD65AC866E4E
A2BF84FA49035EACBFF19FB9510AD024FDF38EF5624DB00DF1E4CAD46399F129
278230824E3FFE671F68FE16E5A2B3962725EB8557B711413AA7418B511B2A9D
4830A8BB71E6C0AEED6DA1EDBD9496769CD6DF35D58A33A10F2BCAA31920271B
E734F0E35C2866FBB1A496C728A721C62CF8C8139B45F23A297431B741C3C9C8
86D0CF4D5ABDB69F2687564DD4D443C1BF72B08FCC103C19389A746D6399A651
0828C9D3A8CC567ED8DF23894A15F60EA95A74CA355A6197A5A51C16D88F92E2
EE7059C9317CC1CD2DE0E62C839C38A9CDFCD90ECE5B4E42117D866ED4D240E2
EA767CC9DADC195E944C64EAB30929D5D0056115A25CE1D258A0D11FC7613307
4BA02C1099744794F7E9056F78D5D832EB4F49A5E5277868F70AC19E1099E777
C86E198C354D1A5140E0073F8618D52BE55B48962C844CABB7BED489A190D1E8
5398570048CBC3A71F2ABFF02BFD572B01F17BBBBA0E10BB4DF317293C733E90
B60F0DB14D360264AA4469FD8D653F4A16005E66A31AAAAFCAE6A03034E2281B
EC8D06F7B36DF41B341A01D47A5FFCC91ED4B7E13900CB00E970C9FE9C6F0BF3
5837ED9BCD7DE51AAE4D92CAF085D96D3E3CEEF9EAC13ADF5D5249AC0BC2B157
F86990D94315BBC9ED379FA8031FEEFBCF4035E4319F565C7391D8A7012B8917
D35E25BE199A9AB7892E680A23603F2267173D2E7405713A9B31042BB5A1A3B7
4395F8AD7A723EC10214621A5C35F6D03C056620C2307D2F7F407656EE3318EA
DC800CBAA90F3BF0022E66A54BE1059BD5D224B670514CDFC533F5B87A0D016B
3A67CAC1CE1953C9CF7333C425050258CB8B3F35F8ECC07BBB7E68F4BCB0B429
D3E29DF0DFAEACC9A2496A025EF93B8906094ABB1A7C177D34FF06342E7FA9FE
4BEB970EC45F7A56748D8DE399893A16D3DC3141E35806D8F53E04A6B193CCE2
98F8F3BD17E3A5A1CBF033D45CCFE1B198E8111BE86D7EECEB9BD4F3B0BF3A95
69640EA22F56E0065774F0771F28AB5940B6A168DACF4729074F09BC9E937ADE
20F8D82BA6D3143473218B6E51F82EBEF76BE7CC8B80947EB5D5021BF8D85907
DFF2849E4C3C7B62E653903867AB44E75D8CA090E60C409D96FCFA4637EE0055
EB8288CCBE49D339B928EFDA00F21BDC87DD2D8DE1BBD7947B768B21F4D17B99
7EFF71C0B00B951A7570A341DBF602CEDCE8290BE15AFC6D052F79B8FC23A4E6
FED2DFCBBDCF4F0FE32CA7644DAE010536B0D6D72D3EBD3C54FDC10618D71501
E1EE4498B7F8AEBF68A600694C245667C46D50BE43BE46363E2130C0EA0DF460
C5472E7D58C187468FE4A6CC21E16657398D5DC47EB68012394F7EEB8B381D68
C0EFD108277C1B6C547F34B4092E027CDB9142F800F0066240484A3869FCBBD7
D87CD089A4E7F9910DFAE5ABA0F17E1A3FAC930A2C3C2BEBA86CD8754FBF01CD
F97EDCF06157BA1886575C8115796C7219F735AF881482491852CE9D872CD46D
534EAAFA2CBC4627306C58257F49682DB6CE16E840BD0577CD58A2FC5B7D170A
AA23991D96CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53C467C0C6574F0D4
02ACED2B7D63523757F6AE29273EE854EA3B26AE30EDCB46ED7952DD4F10F3A2
F4EA31540AE5E2D16FB3061E4445DD5B88906B59DFE804795EBB8135DA0E5DCC
5484AD230FBC4EB1D310296E53F69B1CF8C231378BC384A1C4DBF2811D2AFF88
52F3FFFFDFD33D81EA635DC299559353F2D4E0A505CABB46271E2FDC13361B46
9DD94A2D1E4CB13D0D75659FB5F82BF11550B21E3C864DD43E21E306B69D795D
B3D6A4B29CC07D09FF32AFE298E9B5FD3F50A0FAC31F5B83E804C457CF4E35DF
D64865CB69A06A6C6D7477BB53CC20899219C8419214AB037971D100E1AC4418
BAAB58219EF81EE2D18888127B9B74855F37366D1B216F57E649801411B93613
AE10E6C7EC319DBF43F5357F70BABC5FFD5F430D0C0DA7106212666F9619D69B
6A178AAB53E5FCB8DF0FD5B9B2622F3ABD272318A7FB9D46130B571CE99DD0B6
094F0EFF9D104723BB022648883F61CD892B5DE3777908625E1A91DDE6077E98
045C390947D8A8D81A503AA8244A27AC8E17589140D63C6126CFA4131116E8C5
612AFB120993AF2BD84A48C0D566DA765DD67D6FB617EC9A77556614F0863DFF
9766D2536D0ADB49C53106B103D657353EB568DC7ABD95EA5B7AD60F1A573995
2A1400A64CA8F39636AD5030EC95E1EA1AEC746CA2670A1AB63F6EEF2B51E680
CF91BE03EF8671D18D0369780946C620160150D6EBEE9CB429B364B4B6E82C20
50DB58D75457D46B0F8E49C63D529DABF25A553A38F7266E63B260B6AF168A11
F1607A41D3FC4169BD41C769CCAEE1EC29BA8D4A7B9145C57EE8A0BB368DBD6E
533D154FA36FAB2CA195E3901E463F857B733BB64AF5591BA0D348915FAF4F3F
2C3CA8D51905F33283C9C740EF3FB52922784647364BFCA9941F3809B0AF19ED
917C49C7460B2C1E8DA8866E5266BD35EFA7F4B85C04D8BBB173F3A1285DEE9D
690E2258A832F9088002BF1D547E407DA41D28A1207045CB33D14C887A549382
F575CF89AEF427AA88BC450CD7C053A9C8CC7FB7D21C3FE0C15E06ECD8E473AA
4F1E11B10BDCEA1788DA46AA849FAE94A2F25A8EB6B31F3E949EEF69A986C752
3849D01BA99468207588C2897333632DF0689F1A97B9D3262AC9D1AED22C2EA9
8551424F267E9713229F7B3ABA30559D9E4B6B06AAF1C8E67A22B1E064AF38DB
6592B324D8CB65F21458005E27BC33E15149CB9F9BA9D2B5D329F9145A1ACAAD
2FD62B1B4E0A769E95F93F6629DAE30D14F1CB9EF105609DABCB3A858CE09E45
87B808417B54E603A6E083BDDB9A23C26D1761528870007CCA3A83192D97B128
519E4CC85AC432B97A00994F543BFDBC8567FBE4A28EAFA97A5FDDE6E90A5D83
04CE37D3D708FB4C197F972E2941C9919E97D6F56F1BE23D9AD3885E2CF29FC8
866B0F82F158BA010D211A07218CA48BC688FB9568E9474FBCF60C75448EB805
536EB7C7790DD4724B2E21E1F2F7AA31B99FD32FC7E99E6E7755AAE9AC8FCAFD
9D60BE2FC3A1B169B1729DA75FB2495EC87EB126A88A279B73A0615F840608A1
7BA22DCB2E8AC94B032DBA0F9B5D7C90EEC6B06D7DB4B3BE25BEBB2F54B227A0
C18DA8A43ADB7593E98E5E0C7519713C30690BA462BADF76E107548BA0552E4D
03D2F128BD64D3352F765EBB37367CDB40EB73F4BE5C47E19B535F79D69AA26A
EF1C2196A14A4D6F6407BF20BEFB6C5D4162DE746229853E46702B956F2C6AB1
506D5366C1B79D0F9E8DC751B319BD5E7C6ABDC46807BF1B26E589319A636C7D
42C6CAAEA5504DA0D6440478134FACBCE4B9961FC5AF117044D7C4F35EF475DB
BEB205EC6A898F6F7E3E0D97E46E70E0C1F15D91D34C4348889EABA9149FB3F8
A0EE2B5133302647AA2C6DD59F4CB5511FBAE3C48B1B02C9879849997F260806
0E2CC989BA3E13B958C0DF5AAF91F50D9A6C50BD73A01BBCE289A295CFD5C2D2
ABD635DA7FFE17B25DD02A8C6771364CC604446A77975AA682A1E37C877B6DCE
A7CFB6D6CBAFB766754C0E8934F9AB738930EB721E3A4EBF29885A69D8D51B47
E08C814B5A0C25055F2312F8957EA1805B978529CE833B1EECAF947E67DBA703
F74E72F8219F6D0A06EE6C0F733B035CCAC9A2CAA28C86F029D1C66EB4EDA345
525FD4FCBB4E5CB711DE81DFDB6FBC009A12A564240DBB494670FC1804D241E1
4CEFC6DD23621CCEF7854328220EAF1027FD08EC9C500F7674A8C4C7B1AD1EBF
980096EC4AF841E416430F8B44072627B3D0CAA5E0F1B44EC9D73D7DFF931F6A
90B74050D6CBED6A86AAD4BA6096F6E76B47FB3B37634F7C143B2C6B9B3BAAA5
70C4900E12D720F2812F28626DE3BD390669531DB9D7ECA48701B5D4511FF866
44AE56F463912D977A6EC2FF53F98821703295813331DA7761B1A0D380A26B1E
19C9249E4DF21EC925491C9DAB191FED4034B7A74DC11D9F3FFACA55A9F6FB29
234E0BE07C8D774A64AE80459495C4A1246A6213089ED1CF3539D6F733CBD229
D92BC9D9DB85EF4D9C55056AAC333473EBC39FA702BAAEAA4853054622B71E68
E8EB85702B446376F8D0D5B5FCA6FF6D2B9DDEF1A56DF68172A2FA4CE9C8F5F4
6E2C3ABA05CC5EA4891FBEBE1B6371CC3040E8299F2517F5DDD78DDA83C237AF
C3E15AC160E8431412ECFE54A0A3B1FFAD823D9E250309BEC8FF1969C15F017B
EF93A6640D1BD1A0DC70F36340D8417D27A83D007491C542505F3BD5D65093D0
4ABDE47EFEC71E4973F629B392CE3475109E2732E71A0A684762116477A4D31E
86315F29C0106A137A3B0F2A18B1EF60A4D042BB742B4C08754D9F00C2C9FB30
07B8F2098A92C807BEFC56908B359302BDFBCBA4C7B7DED4607C9B6AB0B075C2
BFCD5D3CE6C857D99DF7866D120F0B3DE8582E22D221142CB330B758336AD62D
ACDB71D75C7D6C23158B0D6A1B0568B966B0989355759EEBF774499B24DE5052
F41A8EC5003DFEC0732A013ED26B97944DB5C206999107D67FF7C8989C512DA0
66D6D82C0CD789960A8E2228BCB174DF812C2B93C26287A77AFCE9DDBBE7040C
150F8FCEE87AF41CD59D779F9648796CB98B2E556635D6ACD8E6B97C16C5EBDD
26E235308C06D7C86258C76426408640D82C0BFCEE123FE7D8B9FD97DA7C3637
99EB6476D06C881B956D57CAC632C2A6E9C725105A59C85A6138A0CB06C9A18C
10DEB0A97C184A2935447F473F4D10F3FF50620AB8D58922B7C3E2C53CFAC71C
F2763EF26955F5809F8EF098A56481F1F3C0E9B2EECAA01EA5C1DFEC6681A641
428C644710456758B49C4B75E97026A70A7D06D47649CBEFEBA511748EEA4132
F47399C1241AA3613DD291F5D1D49CA717B670A41F2EB01A30F2AE8C73D83360
E849EC851D337E00DFD4EDBF4044F0E247D957956045B16131110237ECA97FD6
8BE71AA73987D570CE2DDF953C6EC97AC28E8A1157850F48A5E0F299DD907886
6AC4AC771A783094A2575100A33E0287C97F91021615427B7572E801D9E55CD5
7E35CF2E4C380E50E189923E51821B8C9410673BB1C49CAC56D34F4980538104
B18FDA68F3048AD9831911A4B90DF7CEC4802FED785BA09507026699DDD7D211
854C5F3A50FB8F7AC6F3022448C3F8D17FCE2CC85BB5DAE10F0784F2C0780C18
1D0ED236ECC6056822E8AAA070D4631750CD03F391EE118BB4856F0FC779D2EB
4A2164D6023F0B911BA2928C77A4F13ABD480EDCD34370F71F9BFE330C32D011
A929BD9FE882315994E7704F256531E5C82CAECA85AD750E7EF4B6FF13D79202
C898ABF823D766BBD7F329EDD5DC15F57474D4A7B93FC151E114AE4FAA564BC1
7AD086DC65663454A8FAACC1807DAE2B8FDF5CD52C65C27E8681CEA83A39DD8F
7B7E02AF3E1B59B12516816675EF303FE4F01F1F84DE922D6F8271002B5FCDC1
B9E7775D3F365C784524E0BB5EC0224BE206D1BF5F7B254305E3C2A2B2764C83
F7FDA217D96CBE92099DDCF12CCC343C8B6FB1C29368F6CE9D13DB6A3D704FD9
FD5AC7065959E797BC0EA0A0C04F9BF6A099F36C9CB1B755EC5E1B8A0254490E
B1AE1279F582D9EDBCA4D467D56929A551B8800C7A6C788A20487BEA2D174A40
78A0E7DBAEF6933A753EA5F61F13D1B1337F27A645BD6DB6A7A50B07D3BA3E41
BC17DBD54CEF2C90C29A7B946387E6DF677C977AB426EB6CF686087DE12B3B8D
FE1F8F2DA6B617473941A1ED19DF2F6C55C067882375FD7D853689A023B80251
004C69E46C9C220B8A66430320AA9CDEB436DDAD0590DCDC535482E11336C362
AA9DE8376FC9E5BBCAB3731366C37EF8EF840B29452DA6B397E7945773A9618D
303CCBFBC6376653805425352FA182DE36C2DF6B22D50283D84C81AED0057A04
46E0A67EBAAF9687BDF1F5449C2169315824D0A6BB0AD8D5662A85E8B6BE5A73
365E146D84E1BEDEFB59EB7338E7A3A97D8B133C2C97458AD7A361512E05D95A
3737194E9447DF0043F78D41970883CD836D1668B85BD642F7F50AE117B50102
CC70AD584FAD5B5B1A5DCE841235DCAE82C541423C169B630D813CAC93DCFD90
43C0B70EA7C0B9A20E47EBBACBF0F8F96969ED4AE937C812CE4CACCE138EFD3C
F361D2F7242677C51674ABB5325CD9EDFD49E8901092FF6B232F3CE2B3245F50
59F772333E2CF7CB11FC1089804D8F69124A1D3957643E4CD1665167D26CCCE1
718CE3E63003432CB18F63B4E0D1C4D5047BD4E5C7CF63FA22D38E3EE34254FE
C7DBF37F4697E4B02D11FC5F591D697718A5E44B3A5EEE942AE553AF718E0CF6
AC6E6103A73E92348FE74AE5B8CED1F61DE6B4F56754BB3C587E4648B35B9C84
FBE4B94E616C0BDDB44A1151E2CD5FF447F772C8099CDDB5F3D586B9B5A9D9CD
9D7AC97599D78E73F721BBCC26CBB47A317480DAFB142380C6AD8FD3763F0351
6A6EEA22D2EA136FE2B8C7CAE8040C8428A5BBBF3C3B3194AABFEA61341C59B6
12180E4E1C700BEE3FE4730D3AC8B2C9AF7CAC8DE97F6E7AE9B173336DA588DF
0AFA1E08FF5177BB72916D578C2C6E72A18E2601CD24D7090BF490E997703646
1B66EAC5BB976C6CDF49973F65E63E37274D9BEB6C47FC02E53E6410EB7F13C3
E42B793B74454BEB72102588169E618E6B2A23E1866F2EAB2276195F1C8AB164
BE9E46AE5F5E9B7B21BF96415223EED0991381BBF102A5FFE96F8C6321EBF1C0
56E404529EF3D815B045C9B64F9E482B83280FD10197E137EB5D776E928B03B8
4C14AC3FB86694175B88F64FA0711FE40BC8A92031DF6F992B460A7114E13F22
87744CB89B862CE68A44EF57BA6AB6A3618EA101BDBEBE827D1D060322B22671
C9BF838F0E570E8CF04E85BA16BBB3123ECF3733A72F5A7E6A72A30B92E1D6E1
AEBF4510C724AB326DD8B68A87EF152FAF7E1DB701F8E345E74FFEE4F2237D5B
DD95546A95FBFAC89720BE0C02B78E9D05CD846EBD47D78825092A4982A66063
942F6E01E70B9C6C42162729D742D416CA50F1B85F57673C6CE09EFC4E229D46
3548AB42260F35719F209F34A9B75C4A2F16CD8D8F60C0C70D0E8385F588A061
153A631D123B037B74F7F7116D10592F29541BECDE7097839CBA65F0FE643357
603AB9250C899956B35933417993C9DB3C3350B121A0A6E9F97B1B3BE2BD081C
FB9BE576CC4C9C679AFE350E0168E12BD0DF359CCD59FA104F633F18FEC9D5FF
E44F8C791C47B490C8E3D8B586D52BBA0E6AD9EA30214411A8EC22E6D306A76C
391F9759A88B79613010F099C9F176D1881A42EB9D13F4685DAD3676989A89DB
039C9E9960E315CC0D5A741134B101D1BCFBC375798319F29DA8C996F21B95EC
298B4C5C980845B8F1A2521772F4FBEE308CEFA450C89764BF440ABF09C7B812
9D42A5A38F6C4481988AAE56C022A65EEBC56DE8FCF16F996C72356C345D60B8
57E8564BEEFBD55097D27A1CDA031BD6C638971FF77622866062969131FEB205
1645CDF6C7F23CA7363FFDBF5AE707923E41CC8FE0384EB218E076C5687D87D8
E5362ECF7CF968FCCB2DAA6FB234C404B0652F32175B6E6E4252D99ECED99B5B
8AAD0D13DD314A3FFD409C5FFF29B40110381ED22F58CA53CB2407E5B993930D
E5E32CBC4CDB2FCB9B16C0FBC29F1119199C1AF15579B8123C43E8ACBC288E83
D76A8821FEE6640BB0A78AB2C62629E0168FD113DF0A5BE5666B2057D0C58AC6
D681C9443D5316679DB6FE3DC9A1AD84567630456A7AF74795844C82281364C5
51E09FAD9AD47FBC8556A57786EB929558BC043BBFCF8873A36387FC9A4732D1
ED8ECD6AA69212F7C45D13270B156DEB2ACBE93939018F2169B6A5E2CD5422C1
EE55BC2CBFD1564AC7B8B988AE96AB4942C84DDFCE441AF83D4200F75981A4B8
617922C14252C218733FBAB9F1A698AADD94E503519131915AA738F2188BF5DD
1F33DFAB8BDD1ED89CEE02664EA9345B30CA6993CAD121EED4D48D5A3EA2665B
718F92FC4E466C6C497F5FFF1FE0417C1494A83F83DB25C9B482C5FA2033C138
8B61A79855CA73F0039CED3843E5E3989FB7EB0868428A2F1552C2D586753E8E
5F2A8E0965E299E11C24A143311EC892D1BB34567BFC4400F500B4BCE95427EF
D31AE9CB24BC631147973A49F896C3AD85FF7BE763AE2BC1AA83ACFD209A5381
24EAFB3508692FDA93B5134E0B4D447A1B6F96F06F240FDD5AEB9BB9D88B8352
D3CCD67BFACA1FCF8D1B775A84391795BB24881B0598B4D2E6852975E496F802
EB6C2478AB044270C2E66CF02A24475E9FDD029299B4076111071AF70977BF8E
B4DF79BD942B2464C672FB9782E7057D3B4FFE828AD97C2FB9DAE5B0C27902B7
FCB7D8C45AC7D42782421DB39391A53E6627CCD018A33590490050E678E4C86F
DCF5070294B5158F3BF46DBC46B10611AC3C1F8B97186BF434441E16C868568D
44B77C3AECDDBF49D08D75D5CCAC63258BD4A6AE9FEE690C5AC668DF9109D36A
D982BBC4B646DEFBE49F99823D0914F18543F58B4263E18F6ACD2A01BF666037
F4D2991A1645ADBCE6F94D451201D19F2A70D8ED2DC51318C51AA2A32093FA84
347331943C986965CEF8664F4F4626A30647A441313EED4F1929B0B5C8C01DBD
04F9983533D4B955B8FDE45977B41B9BD11BEB8C53B3EDF408ADDAB3EEBA1BC7
5CEB905E938172CED60F7DD846549BAEB5F59B2767FB05A8C8E5054D812C9267
D1464CE8A4FB03EB1C2BD3706A4B412AB5240EA009DD4995FA72B40BD88A81FE
4C24396B1C4B54CB6C356CC7C181295699577D1304FFF7776B7659A1B6539153
AE2062BA7FF503E7E4983CDE13C3587DF29768E6F31E358B573BA5FC90761E3C
0E2667829C21A8B1E3D8E4E9D8B2A1FB58CABD449668EA668D570A9300917BB9
C30AE5B6135D64784D7F9DA1E131D9921B2CFE60F2281CF278089613E950E0D8
DFD8705D197ED862752C342E64BCB39FAAE24B8BB657569150DA7C70A87E6872
B91519ADEA6C54B229F9F5897CE284E27CF7F81F43138342B83C34971D10E513
B214CD9E6CB8C1E3352618BEEF9CD5256DE997E0CE40F78ECBA22197466B5835
C2806FA57F14211FADF3C76FD1B76F39FB29F96CCEF713D26786043C3E1CFACA
0E346D1536438E6F9FFE5012F1BCAA05EE0F1BD1B4C55A48B5BEBA2452C90B91
665312ADAEDC273BB4811F11E3F9503A2D1437C4008E972AF523D42D121A19CB
99303BA3F342F3856F23EA2531FBB087B2F39786FAA5E8A9C1D5460FE784BA9C
B040B6B41D45EC901379ECF1B4D852FE5B66E1C72B8B7F8EAC363D0DC2110E65
A158ABEC47C28D649664789F2A7C5744E35DA64B49D7CFAB66AC051046A15AE9
4BCF34153ED1A5498017A572B7A60F867617450E360B5B7C5B6A7113D0C77ECB
51758B79B66AA5BEE8341B70DEC748B49430B9E0544CA6AB5B131A3165B89A43
4A109EB9CA7B8649F098DED6CC847E623E47C4D792E1B65D16FCEF1B985D2D9E
F130C35151B3A47A1361C81F056D803403A416F243F1B53E10B58FC2E1030B45
EDA9492A40133A5BB408EE0899193CE0936921A71018ECAAF6E5F7FB8F4C43B9
25A7A4CA15DB115597D53F001879C9C3C80618372FB935D2CC80B28370871EFD
4FC2CEAF29A10F8A495830A49CFD37876A87029D6D08CEA99839ADE41ECBF425
6FC2E8B109F3648DA8A7F6599EB6FC1AB15F6F86C4640222DC39E119E6D8D7DF
D0BD1C471EBEE23B7DA0FE76A5C3EAAFFC87B92CAABE1E022D05C1673CE865FE
F5F91CA08E7AE46586C09C0172B7145A3C2D4716580151922BB059CF2C79CE54
B57A8004BDB87B86D12E7920EF3B1417F441F5973F9FA351BAD926208102E631
DAFE0CD507647A6A24EFEB68D40AD2B6758F26BF5008CF809732699451795214
6CF4FFA31B7DCCC3333978CDF3212265104E9DCCF4D92F38E7E41EA65A1AF69E
C0E0DA791C0C08DEBDAB1D6439887400FDD3895F62E21813A130A1A6809ACB68
BB8FEC12ABA701A00413E49FD0CF9399FB0C25EFCAE256702A3622CBBD0BA234
28042A61588AC6EC69FC53F95B10FBDA5C8B81E24D0D42DB97DAE79DEFC383A6
D9104F2CA111FFFD6DEDA4861DE9ECF7EC5332F147C88D532AEABC0667535E2F
23B2B3CAB9887B1E777C5D513C635CDE827EA9B8C1EE3CD2ECF4E48D9C7BCD76
E4576A3CB8FC801769515796429ED34F46269D9D2FD3049A81E3621D14972543
CD01DD1298013E3A0AB247C515C084AA252FBA847DE3CE56A6A1391D36BB3FFB
017C5191D67D938264ED0A0DF45623872BB6A5603D8E92CDE721341E67D414BB
0C1302AC81A232B253354D240BEA0B321F9733C0975511A1ABE0660B4F6320C4
CB72B891E1B02FA86F618A510FBFA82A62865FB54E7849A0238C480F89CB02F6
F167A4124345
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F65058FE9B
3AB95CE02D75BD2FCC775E27EA978A312A88AFEBF38541AD1BB12E1C38C34B69
5E681E537D3F79B52E24284B8FB0941BF71DE5A8C04AC209B5C2EEFBC3160A42
630263A36ACF465ED120C5D9C0B97D4883621CA300ECCB25BF1330E865801A5A
5CEB0D48135B483BC8155E7DAD9D85DD27CC7D9729CA797CBCCAB15E072F4D80
E6FA1492BDE59F46CA026F44D0EE7C95D6264824385F1E9C6AD73172B8777A6A
9C8840E64C4DBEFD7F9A354A8C3592B6B7C3975718BD9899D6F4EEEE809BCD93
6FF4B76DDB821EFFF0BF941BB550DF4B609AA7E8683F0D72BB9334996DDCB190
230DEBA1C8F911AEDE793A435F04B0A8BFEE7C64ED51B37C1F349D3BEFAAB891
87A28EF131E429251F2CF777A36EB26A2B905FB8E060AB87F85696AF202D90C3
1BF961F6E6BED4A1655EDC31C235D20B206326C7E3CF7FC3969BE68DAEB153CB
883F4FA98854D55FC991C092380606C967D2C7AEF96871F5A379CAA95E1C0FD2
345014D35EAC9BECE4E62BCDBF60C6047783E1486C62193E2EA3A0861A653F3F
4DF8192D7A94FD4BF6A01D1645E399B20090DBB60D0B3F5EA1A13FB288AAF7C1
6ADFC9E6BBF635DFD8CA407A41CBA205AC0B5014E57F7DD45F7724B451F6CFC8
748E8D2AEFB25091032346CA7C8EBF4325EC599D755882E751A70A0EAE669FFC
3D37E8641DE801976E2333D8A7C82BBD60B0C9B5F70D96E3AAEC92940EA47189
0B36BD310D1A184C084913958D22575E85FC2C992B8DB550D7488B296E21A075
7882B1F0FD65BD3FB77C65736CF4DE904FB5AE36286FC74158421FBEB94E217F
2F0D505198133884AB9CCE04F7EB112A04829E820C1827BC3667B2B8FB2B5595
BA0B6B45D04A29E7C3BF45F83594C8414346194894C0FD39FE3965CA20EE35C0
9580F378E3BF2E5FBCF238601608ABD57E5A6E99811745E8A331411D9C5A0AD3
F65818434283570DBC57F4241720179EDD288428DC05CC52750FA3A2296DEDBB
F8E2EB5DA89463202311E0F66519015DDDEF46F228FBFA9A2B597EF22301EF52
D196EEFFF2D9E6B8CE8CF9F32866ADCA85FAC7591A43973F4342D0B05283E667
C213E1EFDFE27427CB3381004C26B6F5F74A12FE16D28F724FFC77F65A6193C9
CF70B473DF109A7C3D4C4D2967CB7BF5C0EA25E35A5F0F81B80C9DA0EB028B84
A130FDF9FDBA7E38409DA085A2924AFA002FA83DD86D63E9FF5B5E359103B190
E2F324EC58B047D5703E9176D34737E1B1C333F104AE66CE447123DF5C434956
1CBC7B1FD9B0BC253EFACB7155F81135F30EE078434B7BE9C720EA222FCCDA3C
D2A9C193BC563E5B01C3DA1CFC8918C7F4528F51479C03EAD7477181F724D242
E49D3AB03EC76F0B831BEEBFC973CFE32377259D400B4B5EEF185C378E7C7961
340E398551177A7D13B2A92141CBF09AC718F307E80B29885BD8B971C8670EB6
5670D7AF5976B26B2363262545732285C77EBACA3D7DBDC2DF2CE86DDB34598B
8CAED5B6DA81A6C816C7475E1C8218E072C7DCBEBD4A57F54C4D5DC893C92249
F56AF320A5D28216384F61DB0CD008AB7A26A46FF9C093F61E9D66510A1A86F8
0719F3D684436EDE35AD66CBA80134127BD0D3662E05BAEF2FD08793AFD1D55A
7E762ECA597BEA84B0633460821B7B47E5BB381646A652CAAAED470B4E2C6092
898F3F20F172D46B6B94412E8E2CA6EC7197A55FFB23788271A10C403F8B3928
3DABF1E8A5D682CEE39462AE0CC1F19E342389DC96551AF68EDCE85DC25277E3
7E1F06D63E00809B5367D7C28D3B5E151424746EBB42C2035536E8F7DDB7BDAC
6AE0AA696CAE7D14B53B988282D82139303D7E425B23D382687EA3CEDD717B7A
B5ABC9E5C7BAD5F27D6E47F4FB9602AD6E1158543D00A6C82630C8CB2F55A12A
0B8BBADA91A7C1C1A1878975828777532D15E08504F525DF166B4F587AE41977
105175EF736823B5592535E911EB0BF8D18845893F59221410C1709C5782DCE3
042DC9767C407C0DB4D0FD1A4881A34FA68261CFA8B2F15ED477673AFDE287E7
2E5E9C0AC03135BC8456DB43399E6A6918A887A64B2EEE98060E47C0F3721E05
091A434A3A19CAC124561650FCC4B0F0FE41F2D946C236DBEBC18195D4BA3F2D
9C1BA99FCFC7C1AA06E3EECA790DD1991881327327B9FCFACC880DE8D5FCCC9C
7D918D48D5AB8E9D210035CB507736C7F69AFC502C9A131AC9C5461E88689442
68B357BFE6A1D4B4C5F215F3BE8EEAEDB7572EF2A27D194380B6F4759A563EFC
1DB8E88B3F0B2BB6E073B24129A768EEB9250E230B503B5671712FAB10D7586C
DE9E8EBDAA4EBD37CD241A807CD210AFD2C02131258DABAA1CD08127A538F434
7975577DDDEA8FB03F750A52C070289822BB030286EDA7DF92EE50089F30F3C4
ADE4D307305271D9982089D0583926FD05C8FC76D9F1E4BA09FAB2311285D5B2
608A45F26A830558CD47D3C668D629FD1923CC317961C98E8DEDC522B8682FB9
88983C1298ED156A0881303EB6F8EECF166E1DE908780A52B5A8F6F848FFCB69
156E8B1D8D0E322F11492FE2D4693CDDA5926F4D6643907C7FF0920B6EF07098
D4E97FEBA8C650810E23D6351C7E66DBEB02E1EDA87B8C246F89A0EB22D1C6FD
B17142AF04780F879AF1500FE9A95034D47818B8235920A92F4F2CFBE5B6F9BF
56E8861EA17A672070F488B0EE73ED1F660059DCC17D90D3E1489973BED751C1
233E6D4DF600BAB69E751B8E0C9251DD4C68226F267C021CA4C0E99CA64FCE96
F77C54CB9721D906B19C23039F6C1AF155ACDDB0FCC52ABCB20C9076666F7AE6
0C952F882E4F236F11B43D85601ED4EFFB48E83B9BABAFFDF4A50904186C6B89
5C8F3034F885A299EAF758FAE0CE786342874C493C3956E05DA1D289D470C53F
BD6E3F72660ABA56491A8B380A42D3AB886A9197C0079E12D9A79FE6FD1F5CB0
9B17E090FCC1137C613AC61B6452571F9A33E0498A129E65F42D7098AC8A89D3
B772221192E4238E710DBBEEBD1EDF8835176F3154E8757A1C21857556EE412F
4693B8747ADE76E9E50E17C3EAEAFFE3DE0ED7C1C8E4959BCD2711EC377DF941
25420E1EFEB789F812D0565F4BC740AEF26EFE447E2C60D7B8FEDE9638C09DB8
EABA360ABADCD32C16E9F72E311417E8DE7FC8EDD79922578A095F71EF4FB9E7
BC9FC8570322330F6BF3ECC9C1DF3A2971677A6FEE34A55083596D18A12AB299
AF582319835EA30E51B12BFE2C886A1528C3177F223B472FC1EA02E013B690D7
88D9F51231B36C783F019E874F2C339E74CEAFAAAC6085F994AE334A6AD662B2
69929C431F13BDA571E3523E5AF46542857C8809FAF5273613D3368B9DCD15C2
0059F4AE947668474518738B957C21F9F65A1E0E99276392472EF7838A46FFD6
E606B1C0C840DEDEB3A8F8A35FE58B2DB2251B500F38A317608B21DCB3F0EFF4
44C5D0D23F518D05ECC9E29419BACF04FFFF38E09A1337FBF361E35F61C38150
203E4115145678B3E1DA267CFD9A7398E6A8E8249D19D97FAD69A0B5EF27684A
63D7FB96EA45D8959C5D696C99972C8E5416030D4076D4C09B16760306801032
69BFC91F4CC63F2B9EA92EAEE2AE999771B71AF9B30F2A10446F4AE151FA3B1F
D7795D169C15DCF39B860BDF90204C948F1B06A1B8A026B3CA477D4CC612D0DC
8CFFB56C340A25158AC6596F45656333170F697E088ACB6FA8051A89BC2DB138
1ADB11431C97A8DBC052426E3C954099C4DFF94FBB5CF83F65A6F1952EB4096C
1B91B665787358F5608562153DD6A09E462ADBE677E6F550F9392627202B07D7
42C3BC581F463B390F50E1D2DDF3FDD7B29CA9D8CF343D8A73BF2B8DA03BA98D
8A95E7D14DA39CE416B52CD8232E2BB8D40EE21FEC76772B068BE06335AB3FD0
AB6AEEAADB72DE788D21EA16D247D6D3A4545F383F4EBF29885A69D8D51B47E0
8C814B5A0C25055F24CC59CC6D7F485E4E870BC7C4BF3CB01AA002B9839348ED
91BA4C7AAA81B42EC94C58208B09AB2854450440900F87974247A8299D8F4BF4
22EFC489C6A256FC5FB2E6BF0FEBA676168ED633145AE0E97EAABB279579DF67
46E11E789FD4BBE40DF2F03232480D73FE00AF577494DEBEF5BE0F732F55DC22
ACC3195E9040B7DEC0E8B841FEFAF2BDE40E5DFBC1A171A7280E8FF4AC0D4C8A
2199EC1A2C08B6D4D644BF03C6D46D5553A1BD1AFD2474342DE00E890674CF9C
F62D79BB3521128814A1B75DD571F6CCD30739F5638F9917A41081B83612B3EB
27C2D8530FF6BD424A3AD4F4DAC719BDB54D617A5DDE6E44FDA013FE7D74C2F6
10A11E46A75CE560AEA4C017EBF96D1736CD34989EB6EEFC121F01818FD4EA81
82D993627B44BD9FFF4A243F8C74C0035ADA5BBCB0E724AFA0F51B8E2B47A7D4
EB49510DB2CE5AEC31C91E211F0A7E41C25DA8ABA818C8319F95F8038848C132
C113A06897714746142B77DD6B19F8454D63D6D7B882B2A0852348DA855F0A17
8F92ABAF509BFE737B0E77F4156977CDED3DF1760628CADC14A357F6F211E57F
183210D7A519DA083D6B19D26CD9ABA3BAC6348A60BB0097BAC6AD4AD2D77631
8912CAF3F2280D3158A25301285BF6327E2535A7A5BD0D79AF87D099C3CD9353
DA1134B7EF26D10EE05685EA4B31E5396C4281B409A5BDAEC2033D77840831AF
54DA4BEA83F0986EA34C1A34FA5D00D6B30371349E91009BFA77876957BB8D47
B9D32DBE5348A8648151E6A1A9E92B081C5CC0BA45A1954976D2C189CB1AC1CE
9A04CEF2E45C67D82B8112753F7E01A0FFB1DB0040AC5876B209A2D6857D7C04
2CC7BC17E084BFD0A3606D42EFBDAD44BB98A7440207EC94E62DC90F8BAA20A4
9AD863023AE1DDD067F152B48022BFD65F44E2866DD32FFD5ADCBB44C4851CD9
27C5AC198995DA6F09568FD192E619591F4674B74BF4CA9EE0CF14DE4517D2F4
DE84F7193A22C569416F518B0DC2539EA4D1D928B222871F54B0B774CB1F93F8
3A7F1C70DFACB044323CC083D9D5F0CC23C7493D971C8AD739BCE83604E4BF5F
3F15F919B6826AB02A989FA4CEEB0C836F8118C74156D1C73DC64C377C8A4BF7
E0E3A0E93D890C264B3AED6F03D917F0C8BB0CB3120C3CD743789E435998F5A6
11E34677614B1E7EDB0F8935947B35221BDF748A861E737ABB84A750A16A4999
D5A59AEB5FAE6FA51F6F29CA5DA18A0F9447DEAC39141E4A8C8584A38E57436F
BE6447F7DAF2599EF2718C3BBE737BD085229CD7C686DBC48D353FC68A770143
65407D48C1350E58ECA8C735187BAAB8C78E9ECFDDDE7F42128EAE3004F46894
758FDF71EA7A458EB6620FCBB0A5872C27D7B74DB62ACD917898219241C0DA67
E5BEC040A958B14BB3D782151355ABD7D4E3FB13343F286E505014A567733A95
0B86CC55A44A64AE823BA1F14749B68E2B1CF93711A7442266BE36BB623E8C75
DCF88EB2184643179D449E729853994036118A584DBD875150EB9A6E9420FDF5
0A7DE0827FA0884443F64E4037AC19B46A1050451ECEB053DC8EB4251EB139D1
380519B5616B704E2291D1B3819F8EA2162A417433D52A8CA1EBC4E87387ACE2
F4D31C0D4E1EF9EC0089D062FF7E5E2C57FA9762ABD83F4858D32AF74D8149D7
1E5344F2DCAE69E08F1BFE2F05C317E60CD877EF2CB5286103B7E529108C25F0
B0A3F808E890D1582866AA126C66B7EF67D7F0788071415B1E7A6CACA81F2799
33BC4638F601D167121F2EE337886D0C1D801AE1CA5683B1BAA4DD57ADE95040
1D73E1E0FFFADEDE5FB469A5B9101F93D4D5A6D539C11187DE78BD21561425B6
778905B2E1B8F18CC386797D2A9A40DD7EFA8609D2E3094FE1082D8DB99454AE
F0AD0088753DEB92924B8AACE73F46EEAA337C69B5681BE101627FCB6E622B8A
C60B8740C535E206C199AD291CD4F0E033445E86EED3003DF9EA583E0D63DDE3
740886171B178C234EC509FB9D3F188005112BF915FE1CAD98D0EAC02F1CF6E0
9E92D6215B0F1FB374F049F75FC09E974E64A63E36F76D0DCE3B3DABD69ED325
8C6DA4AD3060787B31EABA5D487A5315005BCB55D9FF7B893CC31F7949ADAFA7
FD22C8F9537DE79D34956C3EDD05BE74CC57E6AD93A6A8549ADEEA0BCEDC653A
11636472F5845AF507C8EBA6518215D7503410ED2E8F5E7E5ECA274083237775
897E5C3592F703E20F2071F22E7443C25C291BF7DC9E7E5716541A22A8090D0C
2F7096DED4D540C35D6E9506D0237A4FAA5286F53BE69F3BBA3D0CA1449B47B1
BED28A8EFEE40834F0B9CA47A6F1BD211C1B4B9499BE97880C77C2181FEE5164
282E9A5038B1FF70F26B8DF7D51C4905B01AC1FAFD3673ABDDB76FA1EF4EF6BB
01FA810D33E47EF014766A31E112726E3C1B3FA304A7939A559D26AA8C515A3E
58B2FB781757737D7D4778CE2C1789F5D48DAD1BEC00876E4DD100C2B127CBA7
70F6B6A655DCB8D246EB634FB2BC583D15080EDA7A6A7F4F2F5231A2FEE784EE
6B64702F3F95C5AA0E785079080243CDBCF22284D25B669F5D791A7D8AA02ADB
B4BD729A2F49DCCDD5C058073F7AFFACC5140E6C61387A2AAC32CF65FE36A4DC
075DD4821E9C70F4264BCC6A7DC3DBFB464844F9D6A6BF415DF5818344B19D26
6AD62D05AFDCDCE4E33091132D471EDCAE386078D6F9100DBDC9C4A58C2B81EC
99E8E966AF3390E3FBCA5ED1F3A2B9511EBD13E6A5D5E64C41B6BD1F16D657C9
8442C927DF8321C365A5104F1AEAF8EBBCD44A60F2BC0A3E1396B65C30054793
B82E7449725260F4476B1FB2BA1920111B23918EF93CE8C1147B93A7EE8AAB6F
15B37983A8C979E696CCC57988D3B725E16659ECC4344E756017CF08D885343D
6DEF53574FC70B3CD1D2048FE03F132BC03D518F52A23D6051557830982E6D29
BDD2AEA5AE3BCD9ACC3C44B5755DD9071DAE1E651ED94B4CDB4AA729F9A99CC7
3A8823086354F120209525EE410DD0FF023A8DD48AD94D0DEF00E25E76AEC5B2
2FD073701F4BFDB69753E7688CE5356D6BD2F73A46212368CC90124177B4DA43
267DA860345F4E5EE1A0E99E8AB406FB94F1A48CCA70FB7D927E36A2E4A6F34E
754C8DD8EA2571CD8D37462408D7E9C1807ADA0EE6DBEF935E883098AC97256C
34CE666E3D028E9791E70477CAC75B1E69BE9B77107E2EECCE114006FFFDF09F
B92E17D06B177CC07FDE856A52F315B229493B35F6193A77E998462D6A4AF1D7
EA19001B4BCA8BC0A91867D9BBE00B986837CF9A24DD375D47814E1FF110E5BA
8697379A27707AB74F4D4C6C1264FBA1CBC2DA26BCF2A5DF594688D171461067
1D3923BC1266B050B8BDB935CE9F0ECFCD11C81AB178587B7F411FCB197A7DF5
73B91E5481522C7E5449ED049CDF2D84F3C2FE513C93C7EB2528CC8B0472B5A5
79EC88E8BBC149DC345FC8249F699D5364BBA3E4FC59D1F7378FB06F1FDE88C3
656A7D9095905AE89E0904AC946EFC2DA66BFAB7BECB0339036F3C3B3A2FB108
872E8860AB6F62AA6776ED2B262075077004C7AD97187CF449C01794227917D3
CF374279ECBE4F14E8E62E61026F8AC2417B757EFB52BC20C689BDDDB94BD679
97F60F31FA6239387312FA72AF04F2704D9367231B1B8C4102A58FD66612061F
F0895E69B08B19376CE9DD0AF31350D4D6836652D627B5D77069022AFFBA9E20
CB160B6BC81E54551B29660536F32E102C1294B2B18D9A2E50D908571BC74156
D1C73DC64C377C8A4BF7E0E3A0E93D890C2ED94EB182BC80EC26012417DC2A6D
2C4DDA1C21A8EFBFACB62522F3DFCE5D81CAB26B366D771C3ACBD801987A7FA6
9F270BE9F4B41D0555E6B3D969E12C4E871B221B6CCA46C1C88BF1A9550F9DA1
6C9668315E9262C1450DB5A32308D449594273440430824210531E56CCF19F6B
B2975266138B7C516819F07C1F01EE32CDCE87348DE66B69BCBD30416E874194
A2C4AA475A156096793EF552EC4025D45A68E6713BE049232B3DF2EE4EF47A38
B5398F02FA0753A44EC9E581AE3691C027FB01BEDE9F707CCF8DD60FD6FAD3C8
ABCD673A03A694FA7709C320C5453CCCA7AD72305F06A987174DF0D9A5FD9C2F
D58F94330D27EC5439715BFD8F854843EA1D080677F64889D4F00934EE76FE6E
B0B3A2CF8CAF784224CCE088FC75483DE5EE2D19133651BDAA2896B0DCBFDCD7
B9B45AE74C0543040E889BBCE899347659CDD152A758D6237E52C7C203DCD7C8
34EFB8455C231D0F70C71E2F5A1C051675D3419B22BA82B6E4A5BCB4E7A62C46
55FA5FF17B14F01B02C1A4E8BE81DE71A923A3FFE140672C6445756E4E43CA8A
A6C934ED4A4F1CD848E67AEE69EFC73CD12533D3F6BFA0FB13B42E2924FBE4C8
35B057D5953BA549C0742D661C8D6BA1F28613AA361965E1876B223B74553E18
AE14EF37FC9FBF87489FB5F327842B7C07EDDFCC655BC55C28705A114218D4A7
C3478692CB7AC1136868F4A544F0D25DEF0CF4C9A45F2E06AC34A1963C88484F
6200033392BBDB3D0995260CA767EC7EF8F34D00DF035B7ED2E30077811C4E37
1BDE4517D2F4DE84F7193A22C569416F518B0DC2513AFDCB3A3B7622E5A70440
2F59B2EFB224107BCE6BE8BC3C883D9235708F3988B2668540D20345FA57D34B
F9920E240D1CCABC97F3829D48F5E78825737DE521197EC316EEE95F611616BC
36801F85F5B2B4D380F11A63AC1D4E7FFB36B2867E0B88169A56393222CAA9B9
6151B9016C913A7D988627BF757E7E3AE3BF9D3AA5AD4F5C865A09839634A81E
CF5A229D2B16EF77A39178507E41D9084CCA1F6A10254698BE7BE357F70AA574
B9258017959D3E1094338DABEB6D84A0136B85A552A80AE3E6451EEA1283D2EA
E1BED5DC111286EF517780172D12AE96F37753ECF70456C6FA92367F53163018
F1C92103F42A74568CCAAC6DFFA20748F95FDDC8F878D7655957F1D1D6018B56
DEB99AC4C60BB469AC2C2CDC1E415746055911FE1A05C5591EEDC1B75251BFF8
576F1C9CC5C0E5213D76FEC13A4F0786FAFF6850867C9A46507B6949BCDB9F5B
F0D899B4D1C345C18970019E0686B41219E201FDFB13D759945ACDCC8DA70D53
39C919D9954FE91E079DCD0EA53EA906842C86B5147254A6EB06C3E874B88A2E
4E9554982909CF872FC9564795593A72697DB76C3F761460001CD30D197800D0
63241B190836D5A9CA98BE49C6B24E9A99F998AE7D06DE000B4293F4FCF1D78E
FDE070A3F311352E2BA87A65F8949B0B7918EA727DE4A08DE2DF182933FDFF5F
9C602EB47F15219CDD489083E9086F096E8D665D7AD4D88D93C0C8AB119B5417
6F13818AD5A470C1BCEC94950AB01477110CF83586C3FD9DDFB32A6E6EE7B82D
C191365103F27EC65E777C4FCFE9351275AA17860EED4BF3E929DF288E1BB1BC
CE88D89ADE52E24F59DD3BD613FE60049BBCC9B483042A2D4B25C77BFCB1EB72
943531DD69B4A14D977F37DAA777C91881793B7ED6048EA67AB4E1DD05CDD42D
A117D5956FFE7111F343132D4737DBC8CB8E5487232F1EB4E76EC19851686E5C
DFCA9C4F672C37CDED2C60E4232862C16D1DED415F2E4F2855E235CBF72F4302
E35CAEDBDC63E52A8313DBEF21C42C2ED323BF221EDD0ACCA578928815D319AF
713584D1C19112C669F8F85FDCEF2A89AC6E6A8E718F5582471B0C5A9DDA5BAC
7801BF0949E4A2BAD35ED28FC6DD3EA76C2B1F015C7400C5AC4CE9C669856108
F8E19C1CB21DFC41D36A56770F7E779108021E3AFE578357F571C0B0D553E25A
C6EAC013678CBB9CEAAA318B96629E378B92650A286628FE70E07414F411C092
F1DDB6F6D08FDF6F98F716E605799F3800C68000941A52D6916407640A3966DE
70AB169B30BF30074B701B39665F4BF4144CEDAF5A7A1EB68C7AAFD6A174B76E
C9B4E80F6AAB4328EDA21722A92D55AC7449C21E216CE350BC4C84C904906516
69E0D271F30024C0488C71FB30791F330A89ACCBA9A8C346EB436961C2AF7784
A47BB023B3ECFFF53B1D2CFE5A01B90848A5ADCC95DE49241DC602F4B71F8902
9CA62EF42340AE1622BE6C34C82424E1627E053530DD2C2CC910A787A5AA51B7
9CAFDCD501C1A5CC0B61F072996575A8D085F14DE63891EEB88FBC9E57392327
D0F98ED31EE3902D9683ADA479FE08929D2CEF858CDA90860C510BA9F24361EA
4C88733185E2FC5BD3720DAF7E80FF411AF90632E54F8CCA66519CBD3A850793
875694D39FD98814A4E62E172C82D0B5EFE58F67669D0F2F8FA06A5DED50E264
B14FCE5DFB40F7EC7E46B6E9DA84B889E3E73F801263DB7DC7EBCDD9B3D84D1C
D5BE08DB0682FD887EF65595B67ECBA01F813A9678108178F33EC11DC01C1881
425432805A253CFEB23C5EA0CDF05C62FB741D9D01840D01F61B3059A4FFBAA4
6BEDA4208F9A013A7883C940266CB994EB977112BF47327A70393F396A9717AC
D19EB566F647A9138A2AAC3F60F99EE1E646A5AB050C92C3B24432F7D29BB595
5814EA226DAFAD36DDEA61BFEEFB41A343AD66AA4D2FC6AE27B27A17C510E930
9D0B3C29536DCB6D816B53B45385444EE30D969A19556D63C1587C09CFB05231
6D4D96E57440D0CC6DB88EACE66E0D75E77A06A2EC0B7193DD414AA8135C8E1D
C65B2628A632351389FA5027404BABEE9B38A41B2049FED6C86DB5842407EEF3
46C76EDB1A1853D0195D5E74DEFB84414DEF5E701BDC76E7B9700EBBB54DEAF0
039BF95CD3858747EAAE222B1D550213BEA06364396D2794861DD42CAEA78801
DFF16D0C5CD183D626883D5D0AD260F4E2C18D37F725A61174D35E1220F9C763
BB0853229EAF52E01B5D249B2D4A7B741383613BFEC38C7ECD1190F8C47933D2
8585B6D59163EDAE458E91E7EA641EA38D37AEF227D57119A0D31F9156AF4D76
E60EC29311F266F2C011514EE22BFB83C77161145FC0E4FC155733F1066AC506
AE612BBF80F4BD0A76B801C53369EF2AEF19259555BCA32E0EB863C256F65A8F
40EE3AC0C9F6154C4BE60E770F19A5292DCD4C30E8928CDB1375A67FFC936939
CE78AE7264D6AC158960359E31A4379AC573D700BC6E19D09253A010AEDEACE0
1E30D3CB3FE2944C3A15D0E71B8E86C15426E4FA49EB9622E45801FF0A29945D
6FC6F130C0154C37F8B2D7F674B9D137B168F36A6280DEDAE5B98BE96684BFB7
8BD03562DD6EE838D77DDBFB3215195A10C4231BA0D23BC56E88AEC82FB156E0
51F2DAD3DA6013FFB560C6B96CCC5ACF55B7175117B32C32694B5C1A47585A47
36B1045640800B0984898282CB81A1D2C7D18568C06D4DC79BE0B9754B8F8863
2FC3A74FA6F29B4B43F116B0E2F68451E738E564D8EA0383B80480014D74301C
8435A64C9A456DD6265D8D0D15BFFD41221A056F47A2F21CD6B7480D63381B1E
2022957AC237C683C38BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A661E0C6490
7DA1869966AB23C9930A5861847008DB93076EB5E0CB8F686C1919BBA14602BA
5474FF7E82E9C5CE6050E3D19845D63A6ED2CB38988BA640D58DE8CE8101F0EE
F0060E87FF1EF88A9CD5AADBF02DA65BB417EEEE61F5763742AA95C63E50BF80
993281A0613CFF98053018C2960911BF280BAB6E887613801BA69D895CBC66B7
C7F6BF104C1D3FA29B837D378BCF35DB43628938193BAC21233111B6B5FA3410
8CE6151D158AA7D6F4DBE64EF49D6411B43D85601ED4EFFB48E83B9BABAFFDF4
A50901F08C8BA68094FA7E0D033E338E149518B5493D7E35055D2F3EE72CB33B
FBFED297799B3A802E0D2A06C44FD4DEDB2BFBBEB52F816EFDBA9CFF83AC072C
75218AC4F66F31EFA43C454B12960451CEEB882BC04DAD2CAB99569E92BD5E4D
C2D5C51DCFE8289BC38A60B266753A0AF8325E60CAD59B4B3B349146BE16B936
00F1254FBAE5E22086221BC9FAAACF6B0888379674172137D2E696E031E93D8B
3FC88BC2E1A043811D01AB475AD8FF6F8B61A88E04E10DF0E9641DBB70577AE8
28DD3CAE98FA9E1A73C65DD72AC7474753A387E4FF6B9907F28808DC922FBB4A
925A7EE4C1FF02C1A7A7003B478855D76CD3E8D71BB899C0B96915C2ADD25EBF
77DBC319F814A38BC01861A7A3FD4B57CAF14B34FCA46ABD97B5AEA02A3BE106
4C76A91E08E1C53C079B8BEAA3E0F907086AA23BCD6FAC125A5178FBC21A3BFC
4E230375D47F4691E0E9E35436D0B61E0069833A45342B060EF38B19B97882E8
F13AB03CAC213E0A0CBBC22A3CDE0856BD8640D2B9B1844E06CEDDBF3D251445
6D6EC34CA66C04BFA09E8706E8C94374D11DD94D3A6457369A57F0B9ECE37C79
DEF7342F865B4B317DD1752DF6AF33E5A6F2CDE17D845A3706D0589863EB7EAB
D3D44DE5C2197C220A4E6C51AC3CCB3B6A5CD5ACFF0F2E068EA70ED2D5CCB9AF
9913BBC020A416011B58DB4166E6EA59A4BD30F90835BB5715353EBF1DA70389
0DE811B5C40572093246905931BBFB2A882A3BDDD259C51EE7A31E4510F5196D
F93DC22D53B21CC59C16FAAB6D1CC91AE662CB73E82E06DD21A7C173D5BC34F2
EB79C967DC7FC302C4D295E606E3BEB5DD0B068D69B4ACE7C9E61D62CE0FCACB
72E14C2FDB87A97F47425D7BFE8952BCC0AAB8BBFE5C889EDAF00C9C984618D8
0ECA1257E6DF36D3705E771E93F9232FEB35A8AC6CC6C89CDCBEC5D0C7C8B614
7928A0CCDB842F2F84219987AD8510F50883A2233E299B71E8DFF3FA4DC43691
15AF702F06734A510548DE1788FF9C89DFBB823DF700E40C28E3C26341C8A7EC
2293B61AE30E3EF5B467D6293E794FC73DC6AA3C93B843D8CD8A652A665EB31D
6B75D752E27F317E0C0F1BB457048ED47325A221E91DC93BC429BDCBE82FD56D
9A2D450A755AE435B474352A65C0756F8616A40F3F9ECB7CCE3CFB3E66F9334C
2DA766219CD918DCCB3973875938BE310D0033D4C73CD6C95A76CD17A30F7867
CD85EF39D00AF0F37FA2971CB3884245656DE3872B58D01155020EC83B7A464B
A7AA1E55B9ECFB39FC556512DA5747C134526614329FB5784DAC5557A602EC1B
B4CE77697C7F524665CD2AB7CCB157D88E49686B64BF36A6BAF8FAD751BF26B2
493DFEE44FAC4B0288339755DC5440585524AD00C04BA139245E95B76F3695B0
B2F5B06D603E8D09061E486AF75A8C1BCEA9D21057958BE5516B2E3741E71023
81706FAF2CF674AD2CF636B219079A016F858D6608F304E3C1B9FDF97FB541A5
9846692A8D4D6DA5B95B9F1D0202567080297D7EA536BC895106D214626D101B
4E117C63F2E7A60627DC40CB9AB1653B82EE3BB7AB14D465CB0E4F622144E415
EA54E08AF0848306D57725D1051C7E8344B56F83FBE176C468E63D81B099DBED
532F88CA8C433284613A150BED73EE7BF30AA49973A308FC31A15F849F425C90
DF7BEB2428FC63906984F6AC47CB3022D3751E6B7123FB71403E154155E71E53
22B97803DF839374F073EC88745B54FAC04CA498A5BBB90D85756EBB96B50214
81EA4E845488B796836E291CA53ECEB88F7A7E15CA638CE642522876168F0DF2
E65CD2460FC8F8BA2C70E744D0C9ECB5CDFA5812BAF0AB8E4B46122EDA7F4170
C2DE867625FC6047E74144E1F23900B6DD28F30D56D1DE308C49927AE04C0CA3
5CA354676BBFD7134114B90B48761BBC79372BE821B75721E4082C0CA07D5E9A
31F28B335C772B3FB6E71E7B82FE1B2DF4F7CFEB087725D960A54F2535EED864
F1B740E841C04A62DCC8BBCCB2D9FC04EAF0AE36B55033A11156D7C510075251
1C02B6F9C5319EC128CD1E6C0C8D30C8296289EC141CE623F9E93C6FBB9CA418
9A1F6EAE69FEDE84B0F6FE6DA573F1F3B4797946430EEA702DEC6BA8D35795B9
840EC8B71EDD2EF1E793ACF1971BDFBA6D8A485FFF9019E824DF29620FE80FCA
E9C8BEB0411C24D132A2E15EC068D770E56E02F2490FD38E3250F95D1374627B
15447A636F06A1C13163484C37A6C553D22C500DD33DDC491057DB61B4737273
FAB81E5A279049FE9A621E04A967B924D55A4BB49A80CA4750694E18715924E9
FF4B42159E5978724D0874215B49AC3C1B0A34182DB3A346C4AD12C31467458F
FD0E77DE1506BD36CDA7BD8EB07DE3F75AEBE886A4914A4CAB2510CDD4D144F5
7DCD833CD31307703AD3E4FEBBC368C78CCA1991A594CB380F25A4E856103BF7
AA2C9A359EA65E9DBDF1A0A29C7368E4475F07D2828BBE846383BB550A27384B
A1B95E94390BC0CB9EBA9DA929BD46C1C5A25030653A049FDBD3311754C1FF2F
C832DF482C39E80BDB6CB70DA287688A931E6EB1B49D16889B3C7D35C1FDFFBA
962ED683F8090A51E65A3FBB336A068C803A7B35EDBE394DC5F2AFE32F26ED7D
62E428A3895B80C264CDCA37FDAE1C496B5D0E7C1D53E0B769053BED7A98DF78
A113B8383B904D1B2694EAFAF8467A2D59170E74540C7C2668E1663315B430D1
C80D2D39F88E87D4554C62AF81B87B3FDA2CC3472D6D40775CD82E40FD770691
F3E667EE46E0FA73157A7D2B86A0885D0DE7B71FA985402EE68B3EC5061BD48E
6FB8014B002B0B4DCD06F10B34762FD41B5C7A57A7DBBE599F3762BE3C5CBB3A
1202BA51480EA92766B94181AD22C5A88895E459A0D987CDC47C96A1F52CFD4F
B86E01865B6309CE9F7F548A2432E0CBBFA533F892139101B01961D997722815
5E033D75ACED3E66CFD88B6A3068BE62FC900A077FC81DD8AD32A6EA12835FC2
A189E4BADD4883C3F50D17467D806EB8FDC40BF27C180CA863E66ADCFAF82EFC
3924BCBE732BA8A3156BEDDF56A2FCCF035A8CE7D272DC5524884B4AB935FE60
371E9E3618F85A8F6667641AE20B324996DD0C875D1C939FC76BCA004EF72988
6B8B4D23228A79F78CA4CB16D78153E64D86EC95C0C49D95656E12D829A517F2
E2DF4A297F6C85FFEBF48B6AA3979CAA9E399379EF8653E3EBA8D3E1C7C77711
D0B77A77839F13394E9D0B72F1768452D1E62017335DCC39149A51DABD48E771
69D17CE4BA6AA586C3559968D7921B7ADC1625CE8F7BC4D289DDCB685315F2F8
26CA00C10FA09976AC4D5BAF4CB71751907E7E85080A6DD110506D4A89A42423
515DA4DB333EE424F5CF1BD3896914E0DFA47DA3B2B1A2A0E6DE9F715E914705
624C1791D4F4211CB7DC317E0E071E76A543B2625DDA22592587A05FF0A323FB
F663261F80F02D5575FC16589FAB2693CD5FB68E74B21B02A9F69CB191E2F8FC
FF6FE23A3ABC8D6EE1377462D722BA2229C8B0D4A9DF0932F6AF67C63FB0EB6E
F3E7239881A50C3765942F2321EB09ED414AA9861BFEDCDD124C8E807806C7D9
0F8C2414CA1669749E13E674894F746CF825DB774EFD3AE4D7F6B695E7A7A4ED
77EE114157676B729A5C500D76AFA2763BB34CC63167197E6D4F1650FDD11F79
1B3CE3455A4985ED699F01D3CD3248B85C6C1AA0E3D26C56EBDADA436649A0E1
4AB04AB9A5E4621CA87C63177395EB94388654B91AF65067C3C493AF5331DE59
CE2BF06B0C40C1294FA9FC04B12E0026B457CEF84D69BD5B50DB0379832507E2
D44391785BDA36532225C461BDFAE1AD42E8AB26F4FB688CC3ACC6E5FF033F15
49B38FD699485A7E03E71D555173A889D06CE61161E3275063E8AED13B880059
36E722389B83D957514F719BD7C549A0230C1B3B986C1D71971DB1C3DBF14EAA
D24E9C5E7719CE0BF6737FEBD15B81A673659E19059758FE9B7F7035783F377F
5B9BCC8325AF3B9C73BB2C73807BCD1C159E92DA299FD2B33A44028A200ED652
2F3FCCE36EF3B2D41A0832D4CEDA6CF08035271A6CD470061A1D580BF1033B82
D15589D5B59FACDBD235FAE9DC24349F29614784C3339DBF4C4D4D952308BF5D
D3B94BEC96107E64F621BE09010CB6F43790ABA1614F8F91198700B04CEAEA60
3A88D1B16CA0CA00AB08C5DC7C97217BC9AB66528362301E153EA4E4516DD451
67EC15FE1C810FA623EE0CFEF9DBB928F5AC60542200C7E7AC473ED04276588D
75C5448285402B3CFA8E05794855187F95BB8CFF5DF40E521419ED074505382D
7A0B9CDC07E3BDAEB057C1276106F7FB3C608FF37988C7DE6A41FB1020DBBCC7
62F2B85B934BFDD5EE6DEFE6056EA4A0E39A39B7FC1A6DA063D6955B8E690B5D
E0D85B3640F18B169B121155CC018011D813D95425DE9DA289BB60135C7008BF
CA327803319DF0B7E81EFAF7223E9D7B39DEF7203248BB6D5ED9A2CE9DE6B9AF
FA3E9950914CB0781D5442DC61E235A20A52C7D21CAC6764484364FBCE6D701F
B389257B8BC390A0B099DEB62994A5D3A331145DE671C282B7E765EE64C6AC17
96E3A6B3F9196D17B0033B391FC3E3EAE475A6BDB3752FAEDE581AA7810D388D
CB84B9FBFB15CC54522E1C89D9712EDEA4D8717491B49B3FA75418621F268AB8
027CF65360F17072CE61D43E2F615611C9A9A7B3638C58227C05A389EC51A232
6F5AAE1B655BC752952B33B4669F5620170A0803516B2693D24E6E196BEB6B74
4F30B548CE0961F55109F345D7EC077DDABEB04A8F516B28633F5F860DBFE9E6
E11D342B90919CCBC80959BB777E32B9FD483A3F11749389306C9553A69EB951
93D4670CE0AB68B1FC2CB870C052CD06C4B825BD36AD426CCFDB5B900E725C57
0B85573BEE4C3CAC18D8BF978AD818C50474EFCA6B6DDEBEB85088971B2CF9EF
259737F27B3271EB77B4E6CB8006740B0AB54A7784D3EDD40001AB6DF9674C26
D30E351A980FD7926D3556C21DAD02808D300763853073AB4B825B7FE04546C6
3454206399D37BBA7042AED18F22D1C315991EB170FD9F2C42A62986152E97C0
CDBE04311D2A14518DE97F0FD70A968E300C9FCE75EBCAC380A374648F401054
73FB424ABAE5B91B921E6B1D20B1269951CFBB3E23E96C714E7BAA56BDE2C4FD
331CEB502AD286857DD67D898F8D656F948731E7908F16B9080FDDB4E1E86D6F
0ACC65A83B3254B1FF948391589B431E90D4D72E0A7ED9A39659775144347AE6
59C85F5DDAA88CD00E36C5FCFC27728D76BBD6E8024863509284905C5B9FBE2A
B1A833AA99ECD9BEAF9EBF5A1C8D8FDD005B53E95FA171221C29DB3F3D231FD3
A4A1CE942F2A66E96A8E3D7ADC2DDBF9B3F8749259897591163219389B0F4A3A
FC1863A282AA9B11484D9D6F0B971CED52B549950D3C265A7062E98EC48725C8
9655E7EDE94E688093428818557ADD1F8AA04715D76A0FE556CE44D1C4E2A119
CB2C9328275F53D38E8FEDC8A2657B4413AB623D79B34393C2913329445C4DA4
E059114D5D58C58CADC578B8323B21D5808D636ADC789843A91F21C6772E2613
10D2073DAC2D5EADE4A84FCD99EB09E131D6395DBF4169D158E1B115E4BFB215
F78134A6CCD9B4555EBD9C93D7D887ACC3D6E2AC4D82E661E5A45CB902EF9E26
17F3094945422D16C6077F046C5DC0D03D6472239FD566BBE4ABA796F1740BA4
2BB2D4940009B579901CECDCC17A97F066864E02B56EBE64247EEAB70E5CA464
B90E3793F5C613C6CE08B77165CEF2619C342C3BB6D99ADE2402058B3183B0DC
26EECC483712B2481CD2FFDDE5D48BC3C38E9B607C7F598FF25202A886440D7A
FDB7E5F0F639C21E2E5F7B473876E9E928A02E13A44EB5127C3DBAB84A96C2D9
BC543C24439BB8F9521BCD15ABB95B9A4F63E82747CBB98970AD3D2AD2C8B193
113C853D2EEC50FDDCD73F2E287FE61B3AC6E94EF7B3A3B62836A6A804DF66C4
9523AB4124AF32D731FB9A7979E6584AE3E7F847E3FD508AB0259F06FC4A170B
A453BBABC55144543F6BF99CDD7E1248EFD390BAE6297663955E588AE8A369D0
48015170280C74FC77A31420034F0EDF672F01B6A249F1F854BF013A1669143C
7FAE56D9AFBC409178AE62877588C558B9F2EB0504A2F8002B1B13E2A496759F
F425421EEF73AD5B6DC764101CD4CBC3FC2A4F1010CC1DE2E51A5F7A9C2C54FF
CD2C6149FBDE14DF473917009488F8D8727C6DA6E2703BB52ECACFCED1984A91
7F349828C1234FD63313B89FC1A7FA16EF4FB914495CB383E9CCBD62CB8C5277
F4B9B935A4F0D98354881A934B4AAC12D856BD8C2EC043A994310F4B78C62AC6
BD56E71425F869BBD959B3808BC4CF0E66D882B65A4FBF7D6CCD9A9A3089CD9E
DEEDBFFDF24404E050CDB6C3D0817A69EE4429EA78920D62845D12F9A5A74A7F
2AD8A587C5923DD1512BA8BE7D6136C56BA2E5D880286D66ECBD0FBFBD4A38F6
B173F87CCB2C012E27664789E3C5D9E37A3FD3F7D2B8604DCA10E81A97AFDDDD
BA0BFCB8203F8E520B6EBC4C27D15126379FB5A51BD86AFD987F1BAA2FF2D9F6
4614F9669689CEE1A4CA42551D08D62DD8693882B9148370EF4D4BD960D9114D
00C71B77875CAFB5E4ADBC27F1D1A6D28C2DFD8FA0571D0F96B18F190CFA201E
51D48A6887CEEE576D4191A964DF8D009B7C30364A23B9942B367E41BDD23F42
A04FF038915E692890568F24D29B9BB1C270892378584C19CACC13F06BBB4853
AD7006DF58082448008603A0F1763397A4C7346E492D4FCDCD09126CC46D6C60
4DFA0C2073FC98BE95AF020AAE36B57C5244013011F77093247388125CFE99B5
A0257F0D0E3595C2F2F772B9BA1A7AEFDDE4BCEF3494BEF638403FC569A955C2
6E97463EB3819B3D3C1288633CD14EAEE8F8674DC05C804463C285A2239E8A39
610C1E6F44492AF3BC7E2C0EFE9539069C23F16BB245286A82082261EF1F63C8
59AAAC59D5B14314F70D4B5D84AF77A1A9B7F8FC835C637B69537505EEF3F9C3
0855C6332DDD58A2809F9B3D44C4D39784ACA3F8B9058850A3350F75AD6D546A
A7CBBA14013E7859D68CDF0BDCFE954601924C473B761F51683C60C06F051212
FE8E4E33FC5A2A50F85B0A05E29989685DA1A997F36464883F3920AE960C6B11
91C59E67B4667FD74F8F37894C22E9D9E55816999D53E23176BA358983DC8837
DB5B592093099E0EA4F1F185BD66FA027BEE79720942F31C7CA70CA44119E1F5
239617DD0D36AD7CD6CB000018ACED61872E8BE53FDB0A9FB4D7BD59E92911EC
D5FC0D9343070BC392C5C86FACCDE1295B615F37F1395827E29E3A1711FB2B68
1E7068244A2EBBB9310ACA9EF05193524C4E85AAA0D9BE54921CF2C5C11A3A9A
52E09A006B8124A80BBF26C5F5DA7F7E9DB8862B0D4909282D49EAFCA976E2D2
5DC48E10A6C08FE92F1F58911BB81CF4FFBFD327C91A2220A3EA1CF0123F7E32
B5C5A66149BD897EF5F0DF3BEEA564C352DB45A2E8BB824F2E0310C59E864A74
877AB524B456525FADEE1CDC8A35E72C9407AEB30F46784FAA3D985D5C24533E
6F5CCBC57809367E3202862D227A86A9FBB1231CE768CE98172F30CED304FD23
B2D44C9B592C393C64459048E713F03917ED448A5951491149311FD5FE675970
F9D9907A85815CA1AE3306233BA301341CF48CA81DC83BFF918FC60843D1751D
D0FB67FF10DD87E3187A94235A2F8AC52BF30B0DB3B29E1A3CC98E1AF521B145
83DA6E0A801C1C10780F7FF8981CB58461FCDDB4714BC1005D49D62D5B14BC98
B19001268AD16FE6159E437A127FAAC9940257105020B6B49064356A5DAC8A22
9C059D5AFF59C5A52D6873AD5E20989A7345DEE71556E2CC94C469974779828B
F83C91E9A7C160216CDB5E99B27F5A15C8A81C6E23BCF2BC4A69B4137C42F775
680FF6AA0A18E74DC148E58116C90C7B27FC74E95EA2F774F5881E3AF035A96C
D83831472E3879DD0ADBFE59B74C19F6098ABCDB06E2D56FD40D8CEFA0534789
953464C470E1FA47143652217754C88197D0715F078D41E1569CB75EAFC6C995
DA5501FE2137F893BB2CA47F623C6CA516939D8F074C91302411C4B3D1F7C351
6595A08356F07039761C900ABA46C8E1E8D30561EE8D84857517A5F51E22F0F4
386BC1061EA7062E1616C58AD50B99310A0DAF0C01471CA364B615D9AB5795D2
A08D94F4FCA4923CBDE12DEDB14FFAD0B219E79EDC9659AECA3A9E7B999C3EFC
CDE00311FAA3B2D4B1CD759E02FB9D9E74F41B61FFDFCC3F55D630388563FEDB
8468CAA3E1D293B7697284F9D1B1334AE44B7870D343DF102BE43CD5058C3BD0
263C6FC381307DD211433C8276293FAEBC789B1F6DF42411B2ABD92A8C677136
4CC604446A77975AA682A1E37C8778DF2CD37B062EF87D9D053A72A1154499FB
10EC9B4DF017B3B06A60AA3CCD51563C7A9409549E96865A69E8C7D843B3FBD8
5D255DF93959D1986269274F929605F5779B4A21B51906C2B4438A409168C578
6D1F0E631141B0BB6882879F60A049CED5B48411A51BD0DB5EE6FB825DE32D97
1C2981BE2A98DC8F23BC236741EEDADFD1E7595AD877684D92CBA782D0086B42
B6A427DD5BB69B7607279862E41917DA08F87D352652A3C1D299810D3A39848C
4AECF40555C99ED63E70A93D368F9D4D16247EB6DC26F3B9B5CE810F4D01E330
DA29486AB1D465657C485FF7D48E2C2AA8284ED768B1555C02A862B519681D34
DA7D5C1EC21BD233FCDC655E808CD601553C90D48806219B7DB3ACF4427FC7D6
C640672801A01B0B1444E379817760012E1331E9DAB047409E478B5EFDE5B587
4BFEB12D4C3841165C1BC88EC51072E5A46721922D1579163E2C1558703259BE
4280E87D6D1122884CA26741092E0A86E3594AD99CF08A6D1CA57B967E161B6E
762B77DE46159402CD710C9494C1FCE9421F0EB346FE5703CF5877205AEF5368
FDAD7F86556D7A49C65A2B28B030CCEB0EFB94A3E89985A94EA970D57AEE7F99
B2A930890EE2689F27A5BD6D3466701360B64A0E68B3E4ACEFD98F22E80F8C94
2C4C3A61A645A681C23966AB83B4D93D4FC5D149A1FF93FE91366258A9FA8623
ABA8C1AB7B6E448C5466E20F1EC05004B25B3433DB6921D7696DB969049031B0
CFCD90189F92F62E89B545CC8CE837F774A696E6C15815F4F20CDD8EB65DD482
3A5F159EED4F065AEE3DDA7B752E2929CCFF84110B95B96B3A7D476B91E66FD0
4386965E5924F1C5186F78CE942D14E6DAB705825E8C14C8A12EA2EF76B7559F
73A22B21D4E3752B95EB228674E6EA89BC16E48A162A41D7050034C57F437E6F
B012D449E1ABC815A475EED9BDD433A96D940D54E9438921B72245BB1495AAD9
8BC1B687408F072FA391643405435A09C1257CFC5DAFDBD994B41EB70093103C
9C1B931168DE5DECF91486D33DCCE128401BAB4E33222A22ABB177C6607F014E
5F8994E3EB0ACD844E3367DE4DD297BB97CC93105EED85CEA85A5E5CD2939024
7D8B8E852609120916423EFFBA848010BF40C836FED0D8BAE4B109598A6E3D04
FE29E2F0A6D26FB26AF884F5A45A2CA827AA2574D36EF0070DC938D9D6D92DDE
4B0DA61C03BF4360FEA49064FDE916D1447E324D3D0624F94540BB17EE50DE7F
287C29FD473CDBC54AD1666090276C020D0983979A82009507CA1E2F561AF122
DA22C4CD306406B316B1705EB7C713DAF4F239692A8E50D23323398D033104FA
B5D185231DA4EF9A3531437DC8BC95BCDC6E602C3A04F637137F04DA29ACE5A7
7353823CC67E36721E6AF0AFD9EBAB73776E7E4B6FC8AB6FB3AD6AC55575E667
21F58FC39D634E3C6700E28B7F76786DBCC6A57280753DCD85073376B5C15777
A715CE6EB800D16745C5E8F74E77818CEC06549E973193C58349BEFFC4449F83
2807549F2403488CF2897AD9A0F17C220DF312D33508279355F50B3A93FF5A9A
A26CA832260E95199F6B19286AE258DC9E2206D9705E4935918FC7A22B23D257
4425D4D3739ACE775C6F589775DCB0C31FBC84A663DBE4E3FED3696B649CFCC8
102613E40F0CC252B957DFC1A97D522C07B0F972DB969DB77506530346CD9F59
A3E70196ED37E6BE3262D1AFBA823CFE6871854B27E61664C83BEEA0958198AE
0AE0E053DE8255EC26FCE9B0B2F86AFA951DC95EB60125C764E5B79CBF98154E
560AD3916A4BF46125230457020CA3BF7173889FCDF5B2B270657FE1F7C46ADD
192C4924EBAF8FB6629DAF7F285A0120393D54F35F182B68A1B09693ABF521BE
DA2EF6922A1E6C069C3EDF148C4CBEFE5BD31C5B14439B80CC4209DBA33E12D5
92111A13398C5E2C6382E8D88686A618E5C8C93CA42D6078BD278F0B18F1786B
34B381A758771DA3BEB50D73D186A309FDE91032AA1444A5B24BB5258BB81E24
8987CE1A14766F76AF88BBF04AFE12651C41C74CAECABF8616AD95FD9ED3B11C
918BB38D116C2BCD62C502212ACD4ACE665C932C85AF503A78F14191F553CD26
01C5A7C39DE7FC5A89FB868D379093C76E4C48E92B286CE765857220244A9E98
E7F4D6E5435B0DACAE195DB7EB209E1E665209BF7F436E36EF8FDB117C417A62
B6F5AC97C7A8FD33D6DE2B7DC1D1BF81A5371DF6C1EB28740FDCA297D466D1AD
E28BEB853E55534D1FF5774598F51C22FB91A6F500BFBE6E03DCF3A144ACAFF8
9C086E1A212662770E9DED1AB62B2EF693A65752C845DEDC2504AD327C666094
E8706EF88BB955AB6DFB2EF2F8832FE658BD100111DE45C4FEDC6B7F90BF5774
254B08A31711673B0619D5F67EAD9455B2C24980073E63DD9C94000763EA909F
25CA31C33A6A466CB9B777366802EF26BDF929A1770D38441A486C7B34AD90BA
1FA4C3229B224D5BEDEED8EA305C71530FD917DB6FA2D8C8DA1049DDB96353A4
EA26558E2B5DDA4C515E4112E77EA7C6D7CDCCAEF4354A4F30F0FE4BCD9644E4
E7196013974EEF886C447E571F971527F8EA430BACE2BCB2FFD60B4CAA2DCBB2
31EF935994C3728A25952359B633FEC85A43DF440805332B452FD900B452EF11
685A7A51091536FFAB9077B73D777A9AFAE6A7CD65C78EF74B4C57434FCEEC35
831830A4581AB3426B888F236D57DB2F5A50B37FDF45AE1AB0338BACA1A1E179
F1AF0EABA623864E553A249770D4F26FA58059FA6144BEC7658C05E12BA3BA84
B9F250BE2EFD56230A94692248D224912F77E5C213D71703D1E9DC075A789506
9C3CACF33CC1FEDA4E030C606F3D34888FFDB0450D15ACA03D07E8C86C3A2495
B3D53B9DF23764E81E3594AC3AF5771BAC834A3CF62FF7833FAC5B1650C9E72B
F8E2143D43A1481140B10252DC8E0F51B40E719EBA27F0C96DFFBF5ACBF1EC59
7BED6254ECEE2A0BE08E60A872CAD74426C65A99FE4904EBB1EA1AD5FE221B33
3004463F958CE8C67EE6882E0BD8BB27F0CFD5299C89AD71BD8F24699F277CEF
67EC0E5B42D56879A4D4FA6C5D16F01DE20342101A858237E30DB8618BB04B76
5781A7EAA080503F9515F129CA3E012CA717EB0FB1FCD5EFE89956C5822207EF
D767D7479F81B25C8B73BE5EDF2461F63CAC91E253D1DFD548D6E58CF8102B09
B0CA478A6A6BAC8CD12D58C8FEECA7709AC97CCD001D327840DF12896F122727
5239168530A02E44B4D6E4ECBEF48CE181764441A5AAA1906638C1FB5D00CE74
D6D837EC54C0AEC9E7DBFD0DBC45E63D9C1E4FD2246F6D18AA839C18D02FD889
313F9583EF615279682124CD29D1841AF56D39804600D2E2FC7D7E10BA3AF2F6
E11D539AE8738156E2BD4031619F44DA4F5B3033001E34BE90ADB2A4C7681D2B
6BC9940B973088166D1E11241184DF6A69E46C9C220B8A66425C0D8A3498A8A3
7BF1F9C5C075430490AEA44D1C906672D0F457E0A38C1576C9EE90FE6E8A93F9
11FFAAD124EF2460599FBC0C961D3AB24C12E3716355060CC14D4374E27424D5
A7EB44F689E2BF9537330DBEB27EED75F22A4799C741EF0E366457EFC5B4DF8D
30F6E8FFBEB84FF65D8ADDDC0995B117009E9EA4FDDFAAB8F7D6B1F15E614396
3E60399FD2942CBA82B08B08EFBEF3E31C24376E079EF3DFD42216DF919897AD
E3CEA9438D6AD047F410CD1709FF4A5AB714B111D8A8FE8314689249EC2C6DF8
73174345CA68729FA1DC672296F6B9939FC07FB4B9F73ECAEFE962B1425579BF
41A3FA49AB06C167955904CC67EC08ECB60E2F452E83EF6D587F638339D03806
E103447CD33ABDA7E803F79C609E4FB7D7DC3C6AA831688E1E230E2E6F8C9C86
7B358FDD9919D96A6EC75E60FB853135E51A5859F744602758B712615F447638
9B27925C802BFEF566834D19E8CF42FEF3EA9F917215249AB900FD5C98BBE16C
2686652A5714A992AA605BB8FD4A03884AA9BC6F29866D5B9EB4047559733406
4CF73AB9D78C483E7C0BA010425AD426C183E5FE4C18CA96E889C36DAF2D9A65
E1FCF4A665923676CBB3229F32D00F99B504DD1602FBCC202CC8046ED892FA02
7FE054811B3EA3F5D23B9220A659E44717F793AD10E20DBD21C85CCC6C44715E
1D1185646D943218ED9E377C4C208CF264E9795059F7A9991F6EE897A83B18EC
2EF03F94DC211CB2CB94A27524A4C2516A81623DFE91A93B5A3EC2D3098ED38F
C4CBC6BE50F14FFF44555FD63126C2C136176ECC1145CC3BC61DDA6C89E780F5
F63DF752DCA4D16C84E03F22C9C61D0EF5C2431DEECECDF059DF384FCF569CA7
1C0498117EE72EE057ECFDEBF34F0708983B1028EE4FDC7E5869D1E0E8714449
DE2C55660FAA16910AA9EB967D0B382CC9929D8D11C794E103D439087BF78F14
B0E819D643B659F742EAF18494A5FA577DD90319D440B77814451D03D0B347B1
BD06E5691C6385EA00525372BDE229F1BC277751454170B6DBC896DDE7F75433
FB87932A162CCCA0114944A1AC1E57C6399EFC2F3919A7074AC1F62C3D65D601
102C3BE5C3B0DE6B7ECB0E22541651CD027D5B23BE4FC86005E73CF0FEE2D1CF
451FFDEF67FA97D58086B1BB39BB1AF6C0BC2D827C0DCCB7CF06445C229B5400
2FA18E80CD487D82B09EC36497C5B1ECFCB72CC82AFDD157550D6BA0CB49B25F
5B829A4972233CDC098AE31F54AA5CE44BE8FDC4516C7EE3EE4F8E17601D57F7
527CFB1261E1E42DAC8806F28F4191E7D48C94F67BFD060EE61E1A052F908641
625F5C1C0C6A364E3100A357D1063254B06696D20438400E0E78630FD505A174
BEB44068BDD335A83942A9F9A0D2322C8B3CBFDFDDEFB7386767ED53BCB74AC3
41B307C9106E1820F9F1844DD2EC4C5C58A9F7D2895BB5B6E1C1BAFF90F1E166
65998AB7612444903D4CD8765468462B9AADD9F877A33AE08A7D848E5EB60F54
2ABB1116532AD67AEFE0758C051241E301C7E139D2B495069298C245C2EEC225
EE3317550502994505DF3E31D54CA098321FE35A05FF4CDF11A2EF3FF5EC6E4F
95F8E12DAE40F0E80F7C388E7F4D07DB3D4F16AE2506AA548E2AEE7C54377780
B0FDBE164EB7200CEB625A2B9EDFD7CDB0C0D4E78DA460FB06216530AA86C1A0
346CE4C20C0FF79B4E98495C38C459297F3E0DC1BCE6086975F9714E19D57966
1F3E2FAA545818785350B0DB47FFA8507AD805B2ECDBD7662724D8265D505422
C97BBEC44F7E330BD51B07B40AE9088E7695DF1254040A5627B0E7A170134489
283F9B84D64B89D2C5FE89A45287595CA60E78735F149100A825C69E0EDEA69C
1DE478E7AEAC38882B21EE91A9B0495D57DB51D42BF755353F893CDEC9719E6C
0170629D51DBD141B844713E80E7366BDFDD5F4B3642663A9E2AB9B9EB373BA0
C6917FEBBE3C2037E510B9F94FED1E5CD0A7D663523417D141AD5FB499AE7CEA
454FC87001EBFED0DD4DCF5CED9CA44CEF6CAC90369FF71A3EB16EFAC41D22D1
BF4B1A3BE5EE5038A81C4BA2028E998C1B76F6E9E1A73280C9AE6C93A2B63136
0664A35CE2BF47D21F6A7D4E95C2B66FA4ABDDCD1A2C502230FCD91FF58247EE
C1668C8E78DD8829B9DA76F4ACAC9E7F75C86EE557077EAAC299C9A6D26F98D6
9649EF7521D2F58EC53EA096A19B01414A13BEDF8EB86B1978D9393FBA3D896A
E0CDA50176AD6D5DA9C5B7B6F742B9B00B0D294A8E1F25CD1AF401D01E56B576
F52469452A88622F592F21DF5D3CEF127DB53383AA2FFAC31D3058E6044EAFD7
F3A2A71B9E1F6A47F14E57CF25383AB2C486B2D79357D75BC626ED3A0752A698
D4275D81725E961D50F182C68C47BD393ADE09B98DF4129F9E8B16EE0C08A506
4D828E2940A90868538F8353E77F36DF75AAB9F195A0F1C4E9BFA4DC390C32A1
0912E41B77C22EC0D1B0F31398B13B3AA2BE26BD9497A3B908EBE9A2B47EEEE8
018439FD1AEF92ACED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EB1B39B915
F473EEC8A587B776F597724874212FCDDA024C1BAD97AA7AA98DC6CB5052261D
715735810768798C9813E7E531E835A00CB7BF1BF23E88BB7FDABC9B7809D5D0
5D9E066031D4383B2202DB203886107AF158F4F9C5B612341F2BB9442012F780
9D6AB129F905F7F25D0D7EBFCC8FDA657C5FB7C1EF58B1C8DAC7BE2803411D65
A71A6C43EDDB37864049CBAB6CF4D29FFADA86B2C55B58D9A154996A65A1606C
0E1387DD54F5C8BD071C4E9CD1C5647428F74126A18BBC645A5DBEC6014F3A2B
5DE119FA1B985F869B5ED92BF513ADD2A34677D5EEDE8D2CD88CE122C04A743D
E63B7A83957656B025AB8D285009652FE84FBC9184175BFC6395EA39F5E06083
18B9F7889E08B0B44A90398240DF656D5E8EA1872BC169F92A89067E25922821
E726BD4CBA7AE8BF83E11DFBCBC20E234770AD9A742336A93039AF47F5F3FD6E
D94DC2FD9C5DEB0FFEB1594B85C1F204B6509D5201534954EAF50FBA122B0D9D
F22A1434E7D661083C7F8D02F91CCD580EA19FC1BB3C0CD1BB032CF0DDA97FD7
C35218928C48545178C8532758D01155020EC83B7A464BA7AA1E55B9ECFB39FF
F9543F6C912BE760F64560F50BE70FE49B396B2E74EFC4BAB60EAF50DD4C55CE
7A9C0EC5AF7C0FB1DFCE2255B429F565778A8A07160DEB415DB6D60FC4C8FB07
2933B5BBEC2150F585F3BCCECA787EDA39D470DD97D636F8C2D83F79DB418702
FE073A4B6BBB85B887C17A33DAD4D4E5789F7B233AB8CC9F9E64756B4B5F2119
B20D5BCFAB27289A93B310E6BC8058CD61CE2731FDDF7FCFD676591F2C9B1D03
302A041F5CD3B37923E91589CF960B64F7A89EB8D386563A1C5ED539DE6FD5CD
5412150439080FB47F44979B722AA5195FEF30511D5C87876C863364CE4B089A
976F9A47BCEEC9E80A1FB8C770A16ED71933D242E8933B5344E547ED51848B1B
99369307CD4C944771B92BDE9A8ED5B7FA9B5BD671917F63D287B55C070BC725
0F889152DB29A99B4DBC18980D341FDA50EA0C33D256176782B90D7BE484BFA3
D7567D96A5687BD9F33D193276CDAA152C0C500791C76D795DFA1920714E0C86
92F37CF1D7E3DEFD43B2B428FE0FAAD956498BE8B1F3350DE3A8E689C1DBE949
D58AF8229AEDDFB064BB5E6F16A2C5B87A779636760C9A55D6BB5A05C9183E5F
70C838F679EE6982C30F3E1C939E028BC78D0035C491341A5D440F6A0B4F07D7
79D9E64F1E31981C57754A6722EA3A4ECBD084FC5DF1B26838D8B4CCA18E4B46
122EDA7F4170C2DE867625FC6047E741477660AB1ACE2D780F5624CF53DE046A
36EFB35B52F053D318AE5FB3FD08D95F9EB0F889FEAA41F3B26B7144D79B252A
2DD583FD795AD2FD055E7B3A1C57F0A516BF05B8744F5108CE1FB984C9C5B21C
F8236154D849C83E37669EFC593F00644D679B9F17FFED44F44192525D19AE34
281D658F7D31635BC15A0D56BA691658ACE98DBDE93DF9B6F38C5BA43CCF6B0D
2F195DE3343E04A62B730541BE4BF55DA4FFB033321740F4B82C9E1D604056A7
68D8904E59812F6CD9F83F21CFE1217CF272748BB9CD739E2844DDA97AAAE956
C340D4B6F08A87F4D2ADE310125D0CD78E04049DF748C1248AD03205458D6A17
2A4D01427621A0554EA68CD2276F23985B0041C332096ED817D7EAAE66593FE6
A8B43430B87B8469A3FE856445ACA47927F39C45D48DD9671757D5F5B4E85B12
4B81A22696AE5CF237F43B1E4E41ECFB47515298F08ADA5D3D0EB264ACBDF5FB
5ED657B3AA5C942ED0C061CC7E03513CAECE18DCB8EEA91DF3D3DA82309D7F8B
25CDFBC3EC2E6F8733A07A9B319C38D4221576C131962BCC5728D65B804A9B01
694979DACD3F5A953BD9E918D5E46449525A4F42F7C3D761966B7A6BA5E64FAB
4B506460C035C6C35EACD378A52EDC7798F752B0E99E05610C1E45380725255F
E32362BFA2F97270CF2AA8EC926DBC7FA9D8E81DEABC064C140B2A258962542A
47F7FBAA0447587C9B9B56E1317BE0C874EF4FC2E0A360373E7BCAA4F744FC1A
2A79955A76BE025B340E18E9E5FD87B11616CAEF6B64CDC70B83DDB069AD6043
4EF2824246CD4B7C7592758D2EB86327EFBBA5CCFFD4B7A508F64FF002C8332C
B1E5505E7645A5571023438259A1AFAA427959EE4927606F08F42558DC390D30
F871E16F52290B1D877C6381D1B21393E030C4B4C8C868FB6AFAADECA9158EC9
419109D47C0ACEAF2B20F03F6D79DC011146CA28EE32BE98532AF24D5D28E4DF
E1FA97D2920568999A59AD14685C049D0ADFE3AF30735EDE6761D7D722DB82FE
8AB04756697C6B1C89C2846C1B1B8750ACC4A585E0A394813216C09E4442D083
19019DA6DA80D33DF167B2D5EB80A3007FBBAF0BD71D6F5FA654485E27FC1379
2BF8598783704E8026D233E835D49C849952BCA75DA0B435D00A5820BD65ED04
1015A80AA03835605E573A5E9DB59361545F5AD98E4A79477074D1103036B695
EDB12D5762D8075F69A145829867F4E439BD4501CB1E5F4CC8301E3A683FAD3C
7ECE32DE3B6B79B3AEF9D6B4A0F466B6787BC2398DB5C2583D743FAF9EE53072
E06639ED9C0DE84F5BA806552F7ACA9D8422AEBB9DA1D8CE363F5098FA495925
D6C10E92E1A4FBAE8788315C7F9D6002CA068E33FA4FF166146E2ECF8D7EAED6
2367A9DBC787C988EAE84C8B919990793B4526B8A1705715048477E555FBC2AD
95B5577D09F9DAB6458E603695E1AE0C4AFBAE8CFD73A52B0371528E90984C2A
D64949B28062C71BE004A6141F89203571E0BD334D7B0084D473F4A14C75A617
192B6DDDBAEB4B047C30DC0E40C2D8A6436D5CC3C516C4A308F177C019D0AF5C
26B1020C8E9314E10E35A631546BAD1D2034D430AD7269EA8BB17639B6CE5B53
2E199F763446C2CF1249C4CDEBEE5636855666B1AA2984DA13B61CF4A07A8BDE
FC13B37773E57C1B7F2B807AE13808B53C8C8397054D6DDB4BAED4D3715CA20E
C1D833939A43FBAC82CABE1C1DB9852E09F68E57DD68F33CA6212E9C9ED3B96C
78A48BECA723E93F66531FB121265C047DCB885D6BED93559B8E0880E28F5AD0
8940973BB22F5DDFC8957CB30D28C585094C61F1A6E3B051403A81CD0FC8F6E1
F589BC241C37CE145D100111C5BE10A0E5B050087085C1D853AFF5D26D273C37
65741B486D7C297707ED3DE1B7DE616809BB7CEBA6E10F147E3A9E70DCD263A5
64517A279B236AFAEDAE4C1D887CBCBEC891DAB8C2E0F66CA4FC3BA33700076A
18DFA6F58FDC9099A1E81FAB7F5395A9655302AACDB7B4DC88A94FF08EC09438
4F50B461A5E3C50F8CC890179E563F66E54B74B96C0D22174B1D14252CAF0161
DCAD0D7DB720157CE7232DD7683A7655D6F229BEB9A6F0E8B6A817350D026BE4
60D51E224B1460017FC64E7E08ACC2CCA2C6B59B1B24FE3C6C13C0C6945DEDBE
0059EFD04391E76ED5969341B0BC741EC64519BF60909B6A9753CF2B999ED1D0
AC2DB8F371294B492A6B6CCE55BE276ED61199207FB99B2DB4FB068432C5F77A
E547319062CD144EA4C3728B6D42FE3DC767796168B5CF68766B8FDE7E50744D
E61311FE42B871C4F9EF97C6AB6032D89AE09FF322EB011C78C4BB9B7DE58C2C
6A28E24CB6AF124A39687A6AD710157CA626EC056A681BF53BDE29CB9DFD639A
8FDB6D85B2C2642989297940232CD9C54866C2609EE37223E5810EA9BC21FF27
7C7C8AFEAB29E9A7CBE01C367DAC6D515B92D30EB9C283BDF42FCA1E7F117854
9E7174B4B34B1270D0F14165FDEF1C8B3CD0B953C960D1FE488B99070FEB5A46
52DEB76000F47B79B1F65339265C8EF6C671754D5054E9B8B75BFD92015CA8BA
226E00766FF829367DD1044CDAC7051EABE73F297F795138FDE29CC375A3482F
58808AA83A8A8C1CA33A7D804AFDEF3E7FA5E9320D1A1822B7F7BB09DC05862F
674A3E6BFEA161BF834F9B6502E09D4FD18424ADCDF82BDDF04BF42BDD1C80F2
B2BB2C71680C730854E9B7B0C9246A8BEE360E77120B8C9F1D0C81AB78243C52
D4E02E82041B50E37B01E579BD60CA8BFADD9D67EB6AC38D3CCF83B11467457E
F9F14A8E15E0D6A91C3060C06BBEE73B5E4C25A956EBA242C75677A2B9A2D8D7
1C2C9ED415DC140B7723321C28A1132EC5B62994AF67FFB9D63D0F78B58B6AA5
FA9CBD2733032AD1077488F6E0EC4D7649046F8315AE5CEDB474E4C9ACDBAFF4
84380D1CB8F9D32FEB107C919BDA7F04EA2E6627C292001D84657FC192ED4EEE
F7D8A63AFFE08E65EBD95654A0230B2F72026CBC89D97596509520F528CEEBFA
2E544F7D01B8FC790EE2EED6AC435EF7418FC7478D82A1A90AFCDBACED243021
17544F3236FE2946596E022323522240A3881774C6ED3813BA83A63BEB8FB0FD
88FC7CDD6A16182F0308B085696E5C1EDB2062229785FE0E36E00EF6F3EE20F0
3069EA9E2A9F23BFFC63A514AF6B532E2DEAD39492424F7944AA736ED5D1AF1C
8EF10008232AB09B41F64802A82227ED897D45BCA014039054C23775F8E5D0B1
0FEA939AE443CDC9824F55F98CE5C57833FD3892FD16AF05E9C21340F8A49859
4F12D36A39866FD6566EA3E29526E201F09FDF3006544D693909D9A4DF17BC09
34BD8E491D8F710C5F8EEB63A8FA469E0984B6A30ECEA4AEC29CAEB86D6F0423
7CFEF80B0C1D5691329530B651CF88349D2B4CEAE3B34FEF770008DCBF51D6DC
025069A176C36D41080CA517D329D74BAF2D67A761FEA8F5FA6C0A7A3AFBFE04
01014207C99FE76969FC9AAC16D07E98D593E9CB48BEC075E0A6D5B03008A931
FB252F0335FB50B3970EA8B97EAD39869FE7C2A583E8F3D269250DFE501ABDEA
B932E85B4C308CACF0D56D52AE93FC0354692B25BB222BD706B41676B4BE67BE
7B77C3A857DB25601D69C9C6AE7DA96C0EA62FB52E1FD0D967812B9F0B951DAC
1EE058BE82738F2FF8FAD1A97FBEBCBB547D316E1A6FD9DC1EBBEFCAF260AD08
63F11D84BEDAB8D1998CBF9310149E1E77DACFE017ADCE250DB0CDDC0D1B3AB6
B3703E89EB30D5B0D18F8CA362EF8B4B71DFD18F4229E8154DD6BD14953D6A97
A4640C5C772B5F8111F2C068961F83EFBAB1FEBF16ED33449F74669D5D7CD774
12ADF8E431CB26D684136D59E946041CA38003F2324D8F0012DFB8FE2EDA299A
6A7E3BE8E6F7F42DE34A230CDDB36E852A3DB400F3563EF8AC611E9D258C9831
3B81C616DB7FBFED60243E80988C24C0F26B7386625943C18464F25AF7D4EA2D
0E8373223CB81A6541487C6183737F0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (main.dvi)
@start /Fa 252[71 3[{}1 90.9091 /MSAM10 rf /Fb 149[29
24 45[20 59[{enclmmathit ReEncodeFont}3 66.4176 /LMMathItalic8-Regular
rf /Fc 143[76 57[0 1[81 10[91 37[45 2[71{enclmmathsy ReEncodeFont}6
90.9091 /LMMathSymbols10-Regular rf /Fd 143[59 63[19
47[55{enclmmathsy ReEncodeFont}3 66.4176 /LMMathSymbols8-Regular
rf /Fe 222[66 66 14[50 50 16[{enclmmathex ReEncodeFont}4
83.022 /LMMathExtension10-Regular rf /Ff 194[71 3[45
45 45 45 45 45 45 45 45 45 4[71 1[35 35 40[{enclmrm ReEncodeFont}14
90.9091 /LMRoman10-Regular rf /Fg 162[20 1[20 33[35 35
1[35 35 1[35 35 35 35 4[55 43[{enclmrm ReEncodeFont}11
66.4176 /LMRoman8-Regular rf /Fh 135[52 1[44 52 33 15[47
39 39 48 13[56 69 1[58 13[69 4[45 1[25 25 24[57 33[{
enclmmathit ReEncodeFont}16 90.9091 /LMMathItalic10-Regular
rf /Fi 60[68 6[51 5[51 59[40 48 48 66 48 51 35 36 36
1[51 45 51 76 25 48 28 25 51 45 28 40 51 40 51 45 9[93
68 68 66 51 2[62 2[83 1[71 1[33 2[59 62 69 66 64 68 6[25
45 45 45 45 45 45 45 45 45 45 1[25 30 25 2[35 35 9[76
1[51 28[{enclmec ReEncodeFont}61 90.9091 /LMRoman10-Regular
rf /Fj 154[51 56 49 56 52 55[43 41[{enclmec ReEncodeFont}6
99.6264 /LMSans10-Bold rf /Fk 22[61 110[57 3[60 67 48
50 45 1[67 66 67 104 31 63 1[31 1[66 40 61 67 1[67 63
12[88 73 84 6[91 3[88 4[88 88 13[66 66 66 3[44 45[{enclmec ReEncodeFont}
31 119.552 /LMSans10-Bold rf /Fl 138[65 46 46 2[65 59
65 98 33 2[33 65 59 1[52 1[52 65 59 10[88 2[65 5[107
73 91 60 3[76 2[85 83 9[59 59 1[59 59 59 59 59 59 1[33
39 33 44[{enclmec ReEncodeFont}35 119.552 /LMRoman12-Regular
rf /Fm 138[97 6[97 6[95 1[88 2[97 11[126 132 11[57 1[126
2[137 16[95 5[63 45[{enclmec ReEncodeFont}12 172.188
/LMSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1122 582
a Fm(GD)-5 b(V)63 b(I)5 b(I)63 b(-)g(Uebung)e(3)p 0 TeXcolorgray
1180 868 a Fl(F)-10 b(abian)38 b(Langguth)f(-)i(1415571)1222
1018 y(Sebastian)e(K)m(o)s(c)m(h)h(-)h(1388035)1085 1167
y(FB20)f(M.Sc.)52 b(Visual)37 b(Computing)1528 1393 y(June)j(21,)d
(2011)p 0 TeXcolorgray 144 1824 a Fk(A)l(ufgab)t(e)44
b(1)f(Rationale)g(Bezier-Kurven)f(und)i(Kreise)p 0 TeXcolorgray
0 TeXcolorgray 144 2030 a Fj(a\))p 0 TeXcolorgray 144
2270 a Fi(A)m(us)30 b(der)g(Endpunktin)m(terp)s(olation)g(folgt:)42
b Fh(b)1706 2284 y Fg(20)1806 2270 y Ff(=)1902 2126 y
Fe( )1967 2213 y Ff(0)1967 2326 y(1)2013 2126 y Fe(!)2109
2270 y Fi(und)29 b Fh(b)2330 2284 y Fg(02)2430 2270 y
Ff(=)2525 2126 y Fe( )2591 2213 y Ff(1)2591 2326 y(0)2637
2126 y Fe(!)1096 2587 y Fh(t)1129 2601 y Fg(0)1193 2587
y Ff(=)c Fh(P)1360 2549 y Fd(0)1347 2609 y Fg(0)1470
2587 y Ff(=)83 b(2)1684 2493 y Fe(\020)1734 2587 y Fh(B)1803
2601 y Fg(10)1877 2587 y Ff(\(0\))p Fh(b)2031 2539 y
Fg([1])2031 2612 y(10)2132 2587 y Ff(+)20 b Fh(B)2292
2601 y Fg(01)2366 2587 y Ff(\(0\))p Fh(b)2520 2539 y
Fg([1])2520 2612 y(01)2600 2493 y Fe(\021)p 0 TeXcolorgray
3500 2587 a Fi(\(1\))p 0 TeXcolorgray 1289 2819 a Fh(P)1360
2782 y Fd(0)1347 2842 y Fg(0)1470 2819 y Ff(=)83 b(2)15
b(\()q Fh(b)1759 2833 y Fg(11)1853 2819 y Fc(\000)20
b Fh(b)1983 2833 y Fg(20)2078 2819 y Ff(+)g(0\))26 b(=)2371
2675 y Fe( )2437 2763 y Ff(1)2437 2876 y(0)2482 2675
y Fe(!)p 0 TeXcolorgray 3500 2819 a Fi(\(2\))p 0 TeXcolorgray
1096 3228 a Fh(t)1129 3242 y Fg(1)1193 3228 y Ff(=)f
Fh(P)1360 3190 y Fd(0)1347 3250 y Fg(1)1470 3228 y Ff(=)83
b(2)1684 3134 y Fe(\020)1734 3228 y Fh(B)1803 3242 y
Fg(10)1877 3228 y Ff(\(1\))p Fh(b)2031 3180 y Fg([1])2031
3253 y(10)2132 3228 y Ff(+)20 b Fh(B)2292 3242 y Fg(01)2366
3228 y Ff(\(1\))p Fh(b)2520 3180 y Fg([1])2520 3253 y(01)2600
3134 y Fe(\021)p 0 TeXcolorgray 3500 3228 a Fi(\(3\))p
0 TeXcolorgray 1289 3460 a Fh(P)1360 3423 y Fd(0)1347
3483 y Fg(1)1470 3460 y Ff(=)83 b(2)15 b(\()q(0)20 b(+)g
Fh(b)1915 3474 y Fg(02)2010 3460 y Fc(\000)g Fh(b)2140
3474 y Fg(11)2215 3460 y Ff(\))25 b(=)2371 3316 y Fe( )2472
3404 y Ff(0)2437 3517 y Fc(\000)p Ff(1)2553 3316 y Fe(!)p
0 TeXcolorgray 3500 3460 a Fi(\(4\))p 0 TeXcolorgray
234 3809 a Fc(\))h Fh(b)390 3823 y Fg(11)490 3809 y Ff(=)586
3665 y Fe( )651 3752 y Ff(1)651 3865 y(1)697 3665 y Fe(!)234
3994 y Fi(Damit)32 b(k\303)m(\266nnen)d(wir)h(de)g(Casteljau)h
(ausf\303\274hren:)855 4199 y Fh(P)13 b Ff(\(0)p Fh(:)p
Ff(5\))85 b(=)e Fh(B)1419 4213 y Fg(20)1494 4199 y Ff(\(0)p
Fh(:)p Ff(5\))p Fh(b)1718 4213 y Fg(20)1815 4199 y Ff(+)19
b Fh(B)1974 4213 y Fg(11)2049 4199 y Ff(\(0)p Fh(:)p
Ff(5\))p Fh(b)2273 4213 y Fg(11)2370 4199 y Ff(+)h Fh(B)2530
4213 y Fg(02)2605 4199 y Ff(\(0)p Fh(:)p Ff(5\))p Fh(b)2829
4213 y Fg(02)p 0 TeXcolorgray 3500 4199 a Fi(\(5\))p
0 TeXcolorgray 1196 4402 a Ff(=)83 b(0)p Fh(:)p Ff(25)1525
4258 y Fe( )1593 4345 y Ff(0)1593 4458 y(1)1638 4258
y Fe(!)1724 4402 y Ff(+)20 b(0)p Fh(:)p Ff(5)1945 4258
y Fe( )2012 4345 y Ff(1)2012 4458 y(1)2057 4258 y Fe(!)2143
4402 y Ff(+)g(0)p Fh(:)p Ff(25)2409 4258 y Fe( )2477
4345 y Ff(1)2477 4458 y(0)2522 4258 y Fe(!)p 0 TeXcolorgray
3500 4402 a Fi(\(6\))p 0 TeXcolorgray 1196 4684 a Ff(=)1350
4540 y Fe( )1416 4628 y Ff(0)p Fh(:)p Ff(75)1416 4740
y(0)p Fh(:)p Ff(75)1577 4540 y Fe(!)1668 4684 y Fc(6)p
Ff(=)1764 4540 y Fe( )1830 4628 y Ff(1)p Fh(=)1920 4553
y Fc(p)p 1997 4553 46 4 v 1997 4628 a Ff(2)1830 4743
y(1)p Fh(=)1920 4669 y Fc(p)p 1997 4669 V 1997 4743 a
Ff(2)2042 4540 y Fe(!)p 0 TeXcolorgray 3500 4684 a Fi(\(7\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1858 5443
a(1)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 144 193 a Fj(b\))p 0 TeXcolorgray
144 365 a Fh(!)201 379 y Fg(20)301 365 y Ff(=)25 b Fh(!)454
379 y Fg(02)553 365 y Ff(=)g(1)417 625 y Fh(R)q Ff(\(0)p
Fh(:)p Ff(5\))i(=)795 481 y Fe( )860 568 y Ff(1)p Fh(=)950
494 y Fc(p)p 1027 494 46 4 v 1027 568 a Ff(2)860 684
y(1)p Fh(=)950 610 y Fc(p)p 1027 610 V 1027 684 a Ff(2)1072
481 y Fe(!)1221 625 y Ff(=)1385 564 y Fh(!)1442 578 y
Fg(20)1516 564 y Fh(B)1585 578 y Fg(20)1660 564 y Ff(\(0)p
Fh(:)p Ff(5\))p Fh(b)1884 578 y Fg(20)1981 564 y Ff(+)20
b Fh(!)2129 578 y Fg(11)2203 564 y Fh(B)2272 578 y Fg(11)2347
564 y Ff(\(0)p Fh(:)p Ff(5\))p Fh(b)2571 578 y Fg(11)2667
564 y Ff(+)g Fh(!)2815 578 y Fg(02)2890 564 y Fh(B)2959
578 y Fg(02)3033 564 y Ff(\(0)p Fh(:)p Ff(5\))p Fh(b)3257
578 y Fg(02)p 1385 604 1949 4 v 1582 687 a Fh(B)1651
701 y Fg(20)1726 687 y Ff(\(0)p Fh(:)p Ff(5\))p Fh(b)1950
701 y Fg(20)2046 687 y Ff(+)g Fh(B)2206 701 y Fg(11)2281
687 y Ff(\(0)p Fh(:)p Ff(5\))p Fh(b)2505 701 y Fg(11)2602
687 y Ff(+)g Fh(B)2762 701 y Fg(02)2836 687 y Ff(\(0)p
Fh(:)p Ff(5\))p Fh(b)3060 701 y Fg(02)p 0 TeXcolorgray
3500 625 a Fi(\(8\))p 0 TeXcolorgray 1221 1043 a Ff(=)1385
763 y Fe( )1509 851 y Ff(0)1451 964 y(0)p Fh(:)p Ff(25)1612
763 y Fe(!)1698 907 y Ff(+)g Fh(!)1846 921 y Fg(11)1936
763 y Fe( )2001 851 y Ff(0)p Fh(:)p Ff(5)2001 964 y(0)p
Fh(:)p Ff(5)2117 763 y Fe(!)2203 907 y Ff(+)2294 763
y Fe( )2360 851 y Ff(0)p Fh(:)p Ff(25)2418 964 y(0)2522
763 y Fe(!)p 1385 1022 1203 4 v 1840 1036 a( )1905 1123
y Ff(0)p Fh(:)p Ff(75)1905 1236 y(0)p Fh(:)p Ff(75)2067
1036 y Fe(!)p 0 TeXcolorgray 3500 1043 a Fi(\(9\))p 0
TeXcolorgray 1221 1598 a Ff(=)1385 1318 y Fe( )1451 1405
y Fh(!)1508 1419 y Fg(11)1582 1405 y Ff(0)p Fh(:)p Ff(5)h(+)f(0)p
Fh(:)p Ff(25)1451 1518 y Fh(!)1508 1532 y Fg(11)1582
1518 y Ff(0)p Fh(:)p Ff(5)h(+)f(0)p Fh(:)p Ff(25)1971
1318 y Fe(!)p 1385 1577 652 4 v 1564 1590 a( )1630 1678
y Ff(0)p Fh(:)p Ff(75)1630 1791 y(0)p Fh(:)p Ff(75)1792
1590 y Fe(!)p 0 TeXcolorgray 3455 1598 a Fi(\(10\))p
0 TeXcolorgray 234 2083 a Fc(\))26 b Fh(!)408 2097 y
Fg(11)507 2083 y Ff(=)613 2047 y Fg(3)p Fd(\000)703 1992
y(p)p 762 1992 36 3 v 55 x Fg(2)p 613 2062 185 4 v 641
2126 a(2)676 2071 y Fd(p)p 735 2071 36 3 v 55 x Fg(2)823
1939 y Fe( )888 2026 y Ff(1)888 2139 y(1)934 1939 y Fe(!)p
0 TeXcolorgray 144 2413 a Fk(Bernstein-Bezi\351r-T)-11
b(enso)l(rp)l(ro)t(dukte)p 0 TeXcolorgray 0 TeXcolorgray
144 2619 a Fj(a\))p 0 TeXcolorgray 144 2791 a Fi(Da)30
b(das)f(T)-8 b(ensorpro)s(dukt)27 b(die)i(Ec)m(kpunkte)g(in)m(terp)s
(oliert)h(sind)f(die)g(K)m(o)s(e\036zien)m(ten)h(direkt)g(gegeb)s(en:)
1307 2995 y Fh(P)13 b Ff(\()p Fh(a;)i(c)p Ff(\))26 b(=)f
Fh(P)13 b Ff(\(0)p Fh(;)i Ff(0\))28 b(=)c(0)i(=)f Fh(b)2297
3009 y Fg(10)p Fb(;)p Fg(10)3455 2995 y Fi(\(11\))1316
3133 y Fh(P)13 b Ff(\()p Fh(b;)i(c)p Ff(\))26 b(=)f Fh(P)13
b Ff(\(1)p Fh(;)i Ff(0\))28 b(=)c(0)i(=)f Fh(b)2297 3147
y Fg(01)p Fb(;)p Fg(10)3455 3133 y Fi(\(12\))1299 3271
y Fh(P)13 b Ff(\()p Fh(a;)i(d)p Ff(\))26 b(=)f Fh(P)13
b Ff(\(0)p Fh(;)i Ff(1\))28 b(=)c(0)i(=)f Fh(b)2297 3285
y Fg(10)p Fb(;)p Fg(01)3455 3271 y Fi(\(13\))1308 3409
y Fh(P)13 b Ff(\()p Fh(b;)i(d)p Ff(\))26 b(=)f Fh(P)13
b Ff(\(1)p Fh(;)i Ff(1\))28 b(=)c(1)i(=)f Fh(b)2297 3423
y Fg(01)p Fb(;)p Fg(01)3455 3409 y Fi(\(14\))3455 3546
y(\(15\))p 0 TeXcolorgray 144 3790 a Fj(b\))p 0 TeXcolorgray
144 3961 a Fi(F)-8 b(uer)28 b(den)g(Un)m(terteilungssc)m(hritt)i(m)m
(uessen)e(wir)g(16)h(neue)e(K)m(on)m(trollpunkte)i(b)s(erec)m(hnen.)40
b(Wir)28 b(b)s(es-)144 4074 y(timmen)i(diese)h(indem)f(wir)g(de)g
(Casteljeau)h(fuer)f(\034xe)g Fh(u)g Fi(bzw.)41 b Fh(v)33
b Fi(an)m(w)m(enden)d(und)f(erhalten)i(so:)p 0 TeXcolorgray
0 TeXcolorgray 1858 5443 a(2)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 144 193 a Fi(F)-8 b(uer)31 b(\034xe)f Fh(v)566
207 y Fg(0)605 193 y Fi(:)967 425 y Fh(P)1025 439 y Fg(20)1101
425 y Ff(\()1146 363 y(1)p 1146 404 46 4 v 1146 487 a(4)1201
425 y(\))c(=)1368 363 y(1)p 1368 404 V 1368 487 a(4)2337
425 y Fh(P)2395 439 y Fg(20)2471 425 y Ff(\()2516 363
y(3)p 2516 404 V 2516 487 a(4)2571 425 y(\))g(=)2738
363 y(3)p 2738 404 V 2738 487 a(4)3455 425 y Fi(\(16\))967
639 y Fh(P)1025 653 y Fg(11)1101 639 y Ff(\()1146 578
y(1)p 1146 618 V 1146 702 a(4)1201 639 y(\))g(=)1368
578 y(19)p 1368 618 91 4 v 1368 702 a(32)2292 639 y Fh(P)2350
653 y Fg(11)2425 639 y Ff(\()2470 578 y(3)p 2470 618
46 4 v 2470 702 a(4)2526 639 y(\))f(=)2692 578 y(19)p
2692 618 91 4 v 2692 702 a(32)3455 639 y Fi(\(17\))967
854 y Fh(P)1025 868 y Fg(02)1101 854 y Ff(\()1146 792
y(1)p 1146 832 46 4 v 1146 916 a(4)1201 854 y(\))h(=)1368
792 y(3)p 1368 832 V 1368 916 a(4)2337 854 y Fh(P)2395
868 y Fg(02)2471 854 y Ff(\()2516 792 y(3)p 2516 832
V 2516 916 a(4)2571 854 y(\))g(=)2738 792 y(1)p 2738
832 V 2738 916 a(4)3455 854 y Fi(\(18\))967 1068 y Fh(P)1025
1082 y Fg(20)1101 1068 y Ff(\()1146 1006 y(1)p 1146 1047
V 1146 1130 a(2)1201 1068 y(\))g(=)1368 1006 y(1)p 1368
1047 V 1368 1130 a(2)2337 1068 y Fh(P)2395 1082 y Fg(11)2471
1068 y Ff(\()2516 1006 y(1)p 2516 1047 V 2516 1130 a(2)2571
1068 y(\))g(=)2738 1006 y(5)p 2738 1047 V 2738 1130 a(8)3455
1068 y Fi(\(19\))967 1282 y Fh(P)1025 1296 y Fg(02)1101
1282 y Ff(\()1146 1221 y(1)p 1146 1261 V 1146 1345 a(2)1201
1282 y(\))g(=)1368 1221 y(1)p 1368 1261 V 1368 1345 a(2)3455
1282 y Fi(\(20\))144 1507 y(F)-8 b(uer)31 b(\034xe)f
Fh(u)574 1521 y Fg(0)613 1507 y Fi(:)967 1739 y Fh(P)1025
1753 y Fg(20)1101 1739 y Ff(\()1146 1677 y(1)p 1146 1718
V 1146 1801 a(4)1201 1739 y(\))c(=)1368 1677 y(1)p 1368
1718 V 1368 1801 a(4)2337 1739 y Fh(P)2395 1753 y Fg(20)2471
1739 y Ff(\()2516 1677 y(3)p 2516 1718 V 2516 1801 a(4)2571
1739 y(\))g(=)2738 1677 y(3)p 2738 1718 V 2738 1801 a(4)3455
1739 y Fi(\(21\))967 1953 y Fh(P)1025 1967 y Fg(11)1101
1953 y Ff(\()1146 1892 y(1)p 1146 1932 V 1146 2015 a(4)1201
1953 y(\))g(=)1368 1892 y(19)p 1368 1932 91 4 v 1368
2015 a(32)2292 1953 y Fh(P)2350 1967 y Fg(11)2425 1953
y Ff(\()2470 1892 y(3)p 2470 1932 46 4 v 2470 2015 a(4)2526
1953 y(\))f(=)2692 1892 y(19)p 2692 1932 91 4 v 2692
2015 a(32)3455 1953 y Fi(\(22\))967 2167 y Fh(P)1025
2181 y Fg(02)1101 2167 y Ff(\()1146 2106 y(1)p 1146 2146
46 4 v 1146 2230 a(4)1201 2167 y(\))h(=)1368 2106 y(3)p
1368 2146 V 1368 2230 a(4)2337 2167 y Fh(P)2395 2181
y Fg(02)2471 2167 y Ff(\()2516 2106 y(3)p 2516 2146 V
2516 2230 a(4)2571 2167 y(\))g(=)2738 2106 y(1)p 2738
2146 V 2738 2230 a(4)3455 2167 y Fi(\(23\))967 2382 y
Fh(P)1025 2396 y Fg(20)1101 2382 y Ff(\()1146 2320 y(1)p
1146 2361 V 1146 2444 a(2)1201 2382 y(\))g(=)1368 2320
y(1)p 1368 2361 V 1368 2444 a(2)2337 2382 y Fh(P)2395
2396 y Fg(11)2471 2382 y Ff(\()2516 2320 y(1)p 2516 2361
V 2516 2444 a(2)2571 2382 y(\))g(=)2738 2320 y(5)p 2738
2361 V 2738 2444 a(8)3455 2382 y Fi(\(24\))967 2596 y
Fh(P)1025 2610 y Fg(02)1101 2596 y Ff(\()1146 2535 y(1)p
1146 2575 V 1146 2658 a(2)1201 2596 y(\))g(=)1368 2535
y(1)p 1368 2575 V 1368 2658 a(2)3455 2596 y Fi(\(25\))144
2821 y(Die)31 b(naec)m(hsten)h(4)e(Punkte)g(folgen)i(aus)e(einem)g(w)m
(eiteren)i(Sc)m(hritt)e(des)g(de)h(Casteljau:)908 3057
y Fh(P)13 b Ff(\()1024 2995 y(1)p 1024 3036 V 1024 3119
a(4)1080 3057 y Fh(;)1130 2995 y Ff(1)p 1130 3036 V 1130
3119 a(4)1186 3057 y(\))25 b(=)1352 2995 y(105)p 1352
3036 137 4 v 1352 3119 a(256)2262 3057 y Fh(P)13 b Ff(\()2378
2995 y(1)p 2378 3036 46 4 v 2378 3119 a(4)2434 3057 y
Fh(;)2484 2995 y Ff(3)p 2484 3036 V 2484 3119 a(4)2540
3057 y(\))25 b(=)2706 2995 y(105)p 2706 3036 137 4 v
2706 3119 a(256)3455 3057 y Fi(\(26\))908 3271 y Fh(P)13
b Ff(\()1024 3210 y(3)p 1024 3250 46 4 v 1024 3333 a(4)1080
3271 y Fh(;)1130 3210 y Ff(1)p 1130 3250 V 1130 3333
a(4)1186 3271 y(\))25 b(=)1352 3210 y(105)p 1352 3250
137 4 v 1352 3333 a(256)2262 3271 y Fh(P)13 b Ff(\()2378
3210 y(3)p 2378 3250 46 4 v 2378 3333 a(4)2434 3271 y
Fh(;)2484 3210 y Ff(3)p 2484 3250 V 2484 3333 a(4)2540
3271 y(\))25 b(=)2706 3210 y(105)p 2706 3250 137 4 v
2706 3333 a(256)3455 3271 y Fi(\(27\))234 3496 y(Im)30
b(jew)m(eils)i(ersten)e(Sc)m(hritt)h(erhalten)g(wir)f
Fa(\003)g Fi(und)e(im)j(zw)m(eiten)g(Sc)m(hritt)g Fc(\003)p
0 TeXcolorgray 0 TeXcolorgray 1858 5443 a Fi(3)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1880 1046
a @beginspecial @setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 0.0 -113.81097 0.0
113.81097 113.81097 0.0 -113.81097 0.0 0.0 0.0 56.90549 113.81097 56.90549
0.0 56.90549 -113.81097 113.81097 56.90549 113.81097 -56.90549 0.0
56.90549 0.0 -56.90549 -56.90549 113.81097 -56.90549 0.0 -56.90549
-113.81097 -113.81097 56.90549 -113.81097 -56.90549  false NArray /DS
2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0
0.0] FontDot /Dot { moveto gsave 1.5  1.5  scale 1  setgray (r) show
grestore gsave 1.5  1.5  scale (s) show grestore } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.0 SLW 0  setgray  [ 56.90549 56.90549
56.90549 -56.90549 -56.90549 56.90549 -56.90549 -56.90549  false NArray
/DS 2.0 2. CLW mul add 2 div def /Times-Roman 0. [2.43309 0.0 0.0 2.43309
-0.609489 -1.14477] FontDot /Dot { moveto gsave 1.  1.  scale <2A>
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 -113.81097 0.0 0.0   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.81097 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -113.81097 0.0 0.0 0.0   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -113.81097 0.0 -113.81097 -113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -113.81097 113.81097 -113.81097 0.0   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 113.81097 -113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 113.81097 113.81097 0.0   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 -113.81097 113.81097 -113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -113.81097 -113.81097 0.0 -113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 113.81097 113.81097 113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -113.81097 113.81097 0.0 113.81097   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 1880 1046 a
 tx@Dict begin { -113.81097 113.81097 } PutCoor PutBegin  end
 1880 1046 a 1880
1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817 1079 y Fg(20)p
Fb(;)p Fg(02)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880
1046 a 1880 1046 a
 tx@Dict begin { 0.0 113.81097 } PutCoor PutBegin  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046
a 1778 1065 a Fh(b)1817 1079 y Fg(11)p Fb(;)p Fg(02)1880
1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046
a
 tx@Dict begin { 113.81097 113.81097 } PutCoor PutBegin  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817
1079 y Fg(02)p Fb(;)p Fg(02)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880
1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { -113.81097 0.0 } PutCoor PutBegin  end
 1880 1046 a 1880 1046
a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817 1079 y Fg(20)p Fb(;)p
Fg(11)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a
1880 1046 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778
1065 a Fh(b)1817 1079 y Fg(11)p Fb(;)p Fg(11)1880 1046
y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 113.81097 0.0 } PutCoor PutBegin  end
 1880
1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817
1079 y Fg(02)p Fb(;)p Fg(11)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880
1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { -113.81097 -113.81097 } PutCoor PutBegin  end
 1880 1046 a 1880 1046
a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817 1079 y Fg(20)p Fb(;)p
Fg(20)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a
1880 1046 a
 tx@Dict begin { 0.0 -113.81097 } PutCoor PutBegin  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778
1065 a Fh(b)1817 1079 y Fg(11)p Fb(;)p Fg(20)1880 1046
y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880 1046 a
 tx@Dict begin { 113.81097 -113.81097 } PutCoor PutBegin  end
 1880
1046 a 1880 1046 a
 tx@Dict begin { 5.0 24.56052 7.60416 3.19804 225.  Uput UUput } PutCoor
PutBegin  end
 1880 1046 a 1778 1065 a Fh(b)1817
1079 y Fg(02)p Fb(;)p Fg(20)1880 1046 y
 tx@Dict begin  PutEnd  end
 1880 1046 a 1880
1046 a
 tx@Dict begin  PutEnd  end
 1880 1046 a 0 TeXcolorgray 144 2235 a Fj(c\))p
0 TeXcolorgray 144 2406 a Fi(Punkt:)617 2764 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 4.26773 0 CLW mul
sub 0 360 arc closepath  gsave 1 0 0  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 617 2764 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 617 2764 a 617 2764
a
 tx@Dict begin { 5.0 5.47499 6.89548 0.0 225.  Uput UUput } PutCoor
PutBegin  end
 617 2764 a 594 2792 a Ff(1)617 2764 y
 tx@Dict begin  PutEnd  end
 617 2764 a 617
2764 a
 tx@Dict begin  PutEnd  end
 617 2764 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 0.0 -28.45274 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -28.45274 0.0   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 0.0 0.0 -28.45274   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 28.45274 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 0.0 28.45274 -28.45274   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 28.45274 0.0   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 -28.45274 -28.45274 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -28.45274 0.0 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 0.0 -28.45274 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 0.0 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 0.0 28.45274 -28.45274 28.45274   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 0.0 28.45274   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 144 3462 a Fi(Kan)m(te:)1089
3820 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 -28.45274 4.26773 0
CLW mul sub 0 360 arc closepath  gsave 1 0 0  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 1089 3820
a
 tx@Dict begin { -85.35823 -28.45274 } PutCoor PutBegin  end
 1089 3820 a 1089 3820 a
 tx@Dict begin { 5.0 19.41669 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 3820 a 1008 3843 a Fc(\000)1107
3807 y Fg(1)p 1089 3822 71 4 v 1089 3874 a(16)1089 3820
y
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089 3820 a
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089 3820 a
 tx@Dict begin { -28.45274 -28.45274 } PutCoor PutBegin  end
 1089
3820 a 1089 3820 a
 tx@Dict begin { 5.0 10.9 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 3820 a 1071 3807 a Fg(9)p 1054
3822 71 4 v 1054 3874 a(16)1089 3820 y
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089
3820 a
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089 3820 a
 tx@Dict begin { 28.45274 -28.45274 } PutCoor PutBegin  end
 1089 3820 a 1089 3820
a
 tx@Dict begin { 5.0 10.9 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 3820 a 1071 3807 a Fg(9)p 1054 3822 71 4 v 1054
3874 a(16)1089 3820 y
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089 3820 a
 tx@Dict begin  PutEnd  end
 1089 3820
a 1089 3820 a
 tx@Dict begin { 85.35823 -28.45274 } PutCoor PutBegin  end
 1089 3820 a 1089 3820 a
 tx@Dict begin { 5.0 19.41669 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 3820 a 1008
3843 a Fc(\000)1107 3807 y Fg(1)p 1089 3822 71 4 v 1089
3874 a(16)1089 3820 y
 tx@Dict begin  PutEnd  end
 1089 3820 a 1089 3820 a
 tx@Dict begin  PutEnd  end
 1089 3820
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -85.35823 -28.45274 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -28.45274 28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -28.45274 85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -85.35823 28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 28.45274 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 28.45274 85.35823 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -85.35823 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -85.35823 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -85.35823 -28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -28.45274 -28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 -28.45274 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -85.35823 28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -28.45274 28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 28.45274 28.45274 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -85.35823 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -85.35823 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 144 4877 a Fi(Flaec)m(he:)p
0 TeXcolorgray 0 TeXcolorgray 1858 5443 a(4)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1089 810 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 4.26773 0 CLW mul
sub 0 360 arc closepath  gsave 1 0 0  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
1089 810 a
 tx@Dict begin { -85.35823 -85.35823 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1071 798
a Fg(1)p 1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089
810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { -85.35823 85.35823 } PutCoor PutBegin  end
 1089 810 a 1089
810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1071 798 a Fg(1)p 1036 813 106 4 v 1036
865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin { 85.35823 -85.35823 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1071 798
a Fg(1)p 1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089
810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 85.35823 85.35823 } PutCoor PutBegin  end
 1089 810 a 1089
810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1071 798 a Fg(1)p 1036 813 106 4 v 1036
865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin { -85.35823 28.45274 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798
a Fd(\000)p Fg(9)p 1036 813 106 4 v 1036 865 a(256)1089
810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { -85.35823 -28.45274 } PutCoor PutBegin  end
 1089
810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798 a Fd(\000)p Fg(9)p
1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { -28.45274 -85.35823 } PutCoor PutBegin  end
 1089 810 a 1089 810
a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798 a Fd(\000)p Fg(9)p 1036 813 106
4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089
810 a 1089 810 a
 tx@Dict begin { -28.45274 85.35823 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044
798 a Fd(\000)p Fg(9)p 1036 813 106 4 v 1036 865 a(256)1089
810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 28.45274 -85.35823 } PutCoor PutBegin  end
 1089
810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798 a Fd(\000)p Fg(9)p
1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 28.45274 85.35823 } PutCoor PutBegin  end
 1089 810 a 1089 810
a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798 a Fd(\000)p Fg(9)p 1036 813 106
4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089
810 a 1089 810 a
 tx@Dict begin { 85.35823 -28.45274 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044
798 a Fd(\000)p Fg(9)p 1036 813 106 4 v 1036 865 a(256)1089
810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 85.35823 28.45274 } PutCoor PutBegin  end
 1089
810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1044 798 a Fd(\000)p Fg(9)p
1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 28.45274 28.45274 } PutCoor PutBegin  end
 1089 810 a 1089 810
a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1054 798 a Fg(81)p 1036 813 106 4 v 1036
865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a
1089 810 a
 tx@Dict begin { -28.45274 28.45274 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1054 798
a Fg(81)p 1036 813 106 4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end

1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin { 28.45274 -28.45274 } PutCoor PutBegin  end
 1089 810
a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1054 798 a Fg(81)p 1036 813 106
4 v 1036 865 a(256)1089 810 y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089
810 a 1089 810 a
 tx@Dict begin { -28.45274 -28.45274 } PutCoor PutBegin  end
 1089 810 a 1089 810 a
 tx@Dict begin { 5.0 15.15 9.46686 3.776 225.  Uput UUput } PutCoor
PutBegin  end
 1089 810 a 1054
798 a Fg(81)p 1036 813 106 4 v 1036 865 a(256)1089 810
y
 tx@Dict begin  PutEnd  end
 1089 810 a 1089 810 a
 tx@Dict begin  PutEnd  end
 1089 810 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -85.35823 -28.45274 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -28.45274 28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -28.45274 85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -85.35823 28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 28.45274 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 28.45274 85.35823 -28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -85.35823 85.35823 -85.35823 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 85.35823 -28.45274 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 85.35823 28.45274 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 85.35823 85.35823 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -85.35823 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -85.35823 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 85.35823 -85.35823 85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -85.35823 -28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 -28.45274 -28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 28.45274 -28.45274 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 28.45274 85.35823 -28.45274 85.35823   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -85.35823 28.45274 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 -28.45274 28.45274 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 28.45274 28.45274 28.45274   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 85.35823 28.45274 85.35823   /Lineto /lineto load
def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -85.35823 -85.35823 -85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 -28.45274 -85.35823 -28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 28.45274 -85.35823 28.45274   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray false} false /DS 2.0 2.
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray false}
false /DS 2.0 2. CLW mul add 2 div def EndDot  EndArrow  } def /ArrowInside
{ } def  [ -28.45274 85.35823 -85.35823 85.35823   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
0 TeXcolorgray 144 2034 a Fk(A)l(ufgab)t(e)44 b(3)f(B-Splines)g(vom)g
(Grad)g(2)p 0 TeXcolorgray 0 TeXcolorgray 144 2240 a
Fj(a\))p 0 TeXcolorgray 144 2412 a Fi(F)-8 b(uer)24 b(Knoten)g
Fh(x)715 2426 y Fb(j)775 2412 y Fi(sind)f(die)h(Basisfunktionen)g
Fh(B)1830 2379 y Fg(2)1825 2436 y Fb(j)t Fd(\000)p Fg(1)1976
2412 y Fi(und)e Fh(B)2225 2379 y Fg(2)2220 2436 y Fb(j)t
Fd(\000)p Fg(2)2371 2412 y Fi(ungleic)m(h)j Ff(0)p Fi(.)39
b(V)-8 b(ereinfac)m(hen)25 b(ergibt:)1420 2617 y Fh(B)1494
2579 y Fg(2)1489 2639 y Fb(j)t Fd(\000)p Fg(1)1699 2617
y Ff(=)1907 2555 y Fh(x)1959 2569 y Fb(j)2016 2555 y
Fc(\000)20 b Fh(x)2159 2569 y Fb(j)t Fd(\000)p Fg(1)p
1862 2596 469 4 v 1862 2679 a Fh(x)1914 2693 y Fb(j)t
Fg(+1)2061 2679 y Fc(\000)g Fh(x)2204 2693 y Fb(j)t Fd(\000)p
Fg(1)p 0 TeXcolorgray 3455 2617 a Fi(\(28\))p 0 TeXcolorgray
1420 2854 a Fh(B)1494 2816 y Fg(2)1489 2876 y Fb(j)t
Fd(\000)p Fg(2)1699 2854 y Ff(=)1907 2792 y Fh(x)1959
2806 y Fb(j)t Fg(+1)2106 2792 y Fc(\000)g Fh(x)2249 2806
y Fb(j)p 1862 2832 V 1862 2916 a Fh(x)1914 2930 y Fb(j)t
Fg(+1)2061 2916 y Fc(\000)g Fh(x)2204 2930 y Fb(j)t Fd(\000)p
Fg(1)p 0 TeXcolorgray 3455 2854 a Fi(\(29\))p 0 TeXcolorgray
234 3058 a(Daraus)31 b(folgt:)1000 3199 y Fh(S)5 b Ff(\()p
Fh(x)1148 3213 y Fb(j)1185 3199 y Ff(\))25 b(=)1396 3137
y Fh(x)1448 3151 y Fb(j)1505 3137 y Fc(\000)20 b Fh(x)1648
3151 y Fb(j)t Fd(\000)p Fg(1)p 1351 3178 V 1351 3261
a Fh(x)1403 3275 y Fb(j)t Fg(+1)1550 3261 y Fc(\000)g
Fh(x)1693 3275 y Fb(j)t Fd(\000)p Fg(1)1830 3199 y Fh(b)1869
3213 y Fb(j)t Fd(\000)p Fg(1)2016 3199 y Ff(+)2162 3137
y Fh(x)2214 3151 y Fb(j)t Fg(+1)2360 3137 y Fc(\000)g
Fh(x)2503 3151 y Fb(j)p 2117 3178 V 2117 3261 a Fh(x)2169
3275 y Fb(j)t Fg(+1)2315 3261 y Fc(\000)g Fh(x)2458 3275
y Fb(j)t Fd(\000)p Fg(1)2595 3199 y Fh(b)2634 3213 y
Fb(j)t Fd(\000)p Fg(2)3455 3199 y Fi(\(30\))p 0 TeXcolorgray
144 3489 a Fj(b\))p 0 TeXcolorgray 144 3661 a Fi(F)-8
b(uer)31 b(einen)f(uniformen)f(Knoten)m(v)m(ektor:)942
3829 y Fh(S)5 b Ff(\()p Fh(x)1090 3843 y Fb(j)1127 3829
y Ff(\))83 b(=)1454 3767 y Fh(x)1506 3781 y Fb(j)1563
3767 y Fc(\000)20 b Fh(x)1706 3781 y Fb(j)t Fd(\000)p
Fg(1)p 1409 3807 V 1409 3891 a Fh(x)1461 3905 y Fb(j)t
Fg(+1)1608 3891 y Fc(\000)g Fh(x)1751 3905 y Fb(j)t Fd(\000)p
Fg(1)1888 3829 y Fh(b)1927 3843 y Fb(j)t Fd(\000)p Fg(1)2073
3829 y Ff(+)2219 3767 y Fh(x)2271 3781 y Fb(j)t Fg(+1)2418
3767 y Fc(\000)g Fh(x)2561 3781 y Fb(j)p 2174 3807 V
2174 3891 a Fh(x)2226 3905 y Fb(j)t Fg(+1)2373 3891 y
Fc(\000)g Fh(x)2516 3905 y Fb(j)t Fd(\000)p Fg(1)2653
3829 y Fh(b)2692 3843 y Fb(j)t Fd(\000)p Fg(2)p 0 TeXcolorgray
3455 3829 a Fi(\(31\))p 0 TeXcolorgray 1245 4075 a Ff(=)1432
4014 y Fc(4)p Fh(x)p 1409 4054 179 4 v 1409 4138 a Ff(2)p
Fc(4)p Fh(x)1597 4075 y(b)1636 4089 y Fb(j)t Fd(\000)p
Fg(1)1783 4075 y Ff(+)1907 4014 y Fc(4)p Fh(x)p 1884
4054 V 1884 4138 a Ff(2)p Fc(4)p Fh(x)2072 4075 y(b)2111
4089 y Fb(j)t Fd(\000)p Fg(2)p 0 TeXcolorgray 3455 4075
a Fi(\(32\))p 0 TeXcolorgray 1245 4257 a Ff(=)83 b(0)p
Fh(:)p Ff(5\()p Fh(b)1588 4271 y Fb(j)t Fd(\000)p Fg(1)1737
4257 y Ff(+)20 b Fh(b)1867 4271 y Fb(j)t Fd(\000)p Fg(2)1993
4257 y Ff(\))p 0 TeXcolorgray 1427 w Fi(\(33\))p 0 TeXcolorgray
234 4414 a(Bei)39 b(einem)g(uniformen)d(Knoten)m(v)m(ektor)k(geh)m(t)f
(der)e(Spline)h Fh(S)43 b Fi(an)37 b(der)h(Stelle)h Fh(x)3047
4428 y Fb(j)3121 4414 y Fi(genau)g(durc)m(h)144 4527
y(den)30 b(Mittelpunkt)h(zwisc)m(hen)g Fh(b)1242 4541
y Fb(j)t Fd(\000)p Fg(1)1399 4527 y Fi(und)e Fh(b)1620
4541 y Fb(j)t Fd(\000)p Fg(2)1746 4527 y Fi(.)p 0 TeXcolorgray
144 4763 a Fj(c\))p 0 TeXcolorgray 144 4935 a Fi(F)-8
b(uer)33 b(zw)m(ei)i(Knoten)e(eines)g(Splines)g Fh(S)5
b Fi(,)34 b Fh(x)1593 4949 y Fb(i)1654 4935 y Fi(und)e
Fh(x)1891 4949 y Fb(i)p Fg(+1)2042 4935 y Fi(ergibt)i(sic)m(h)f(der)g
(naec)m(hste)i(Knoten)e Fh(x)3398 4949 y Fb(i)p Fg(+2)3546
4935 y Ff(=)144 5048 y Fh(x)196 5062 y Fb(i)p Fg(+1)335
5048 y Ff(+)20 b(1)p Fh(=)p Ff(3)h Fc(\003)g Ff(\()p
Fh(x)735 5062 y Fb(i)p Fg(+1)874 5048 y Fc(\000)f Fh(x)1017
5062 y Fb(i)1045 5048 y Ff(\))p Fi(.)p 0 TeXcolorgray
0 TeXcolorgray 1858 5443 a(5)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 144 193 a Fj(d\))p 0 TeXcolorgray
1340 494 a Fh(B)1414 456 y Fg(2)1409 516 y Fb(j)t Fd(\000)p
Fg(1)1536 494 y Ff(\()p Fh(x)1623 508 y Fb(j)1660 494
y Ff(\))83 b(=)2015 432 y Fh(t)20 b Fc(\000)g Fh(x)2211
446 y Fb(j)t Fd(\000)p Fg(1)p 1942 472 469 4 v 1942 556
a Fh(x)1994 570 y Fb(j)t Fg(+1)2141 556 y Fc(\000)g Fh(x)2284
570 y Fb(j)t Fd(\000)p Fg(1)p 0 TeXcolorgray 3455 494
a Fi(\(34\))p 0 TeXcolorgray 1340 734 a Fh(B)1414 697
y Fd(0)p Fg(2)1409 757 y Fb(j)t Fd(\000)p Fg(1)1536 734
y Ff(\()p Fh(x)1623 748 y Fb(j)1660 734 y Ff(\))83 b(=)2153
673 y(1)p 1942 713 V 1942 797 a Fh(x)1994 811 y Fb(j)t
Fg(+1)2141 797 y Fc(\000)20 b Fh(x)2284 811 y Fb(j)t
Fd(\000)p Fg(1)p 0 TeXcolorgray 3455 734 a Fi(\(35\))p
0 TeXcolorgray 1778 975 a Ff(=)2008 914 y(1)p 1942 954
179 4 v 1942 1038 a(2)p Fc(4)p Fh(x)p 0 TeXcolorgray
3455 975 a Fi(\(36\))p 0 TeXcolorgray 1305 1394 a Fh(B)1379
1356 y Fg(2)1374 1416 y Fb(j)t Fd(\000)p Fg(2)1501 1394
y Ff(\()p Fh(x)1588 1408 y Fb(j)1624 1394 y Ff(\))84
b(=)1952 1332 y Fh(x)2004 1346 y Fb(j)t Fg(+1)2150 1332
y Fc(\000)20 b Fh(x)2293 1346 y Fb(j)p 1907 1373 469
4 v 1907 1456 a Fh(x)1959 1470 y Fb(j)t Fg(+1)2105 1456
y Fc(\000)g Fh(x)2248 1470 y Fb(j)t Fd(\000)p Fg(1)p
0 TeXcolorgray 3455 1394 a Fi(\(37\))p 0 TeXcolorgray
1305 1635 a Fh(B)1379 1597 y Fd(0)p Fg(2)1374 1657 y
Fb(j)t Fd(\000)p Fg(2)1501 1635 y Ff(\()p Fh(x)1588 1649
y Fb(j)1624 1635 y Ff(\))84 b(=)f Fc(\000)2189 1573 y
Ff(1)p 1978 1613 V 1978 1697 a Fh(x)2030 1711 y Fb(j)t
Fg(+1)2176 1697 y Fc(\000)20 b Fh(x)2319 1711 y Fb(j)t
Fd(\000)p Fg(1)p 0 TeXcolorgray 3455 1635 a Fi(\(38\))p
0 TeXcolorgray 1743 1875 a Ff(=)83 b Fc(\000)2044 1814
y Ff(1)p 1978 1854 179 4 v 1978 1938 a(2)p Fc(4)p Fh(x)p
0 TeXcolorgray 3455 1875 a Fi(\(39\))p 0 TeXcolorgray
234 2118 a(Damit)32 b(ist)f(die)f(k)m(omplette)j(Ableitung:)1279
2358 y Fh(S)1340 2320 y Fd(0)1363 2358 y Ff(\()p Fh(x)1450
2372 y Fb(j)1487 2358 y Ff(\))25 b(=)1720 2296 y(1)p
1653 2337 V 1653 2420 a(2)p Fc(4)p Fh(x)1841 2358 y(b)1880
2372 y Fb(j)t Fd(\000)p Fg(1)2027 2358 y Fc(\000)2195
2296 y Ff(1)p 2128 2337 V 2128 2420 a(2)p Fc(4)p Fh(x)2316
2358 y(b)2355 2372 y Fb(j)t Fd(\000)p Fg(2)3455 2358
y Fi(\(40\))234 2563 y(Die)32 b(T)-8 b(angen)m(te)32
b(an)e Fh(x)972 2577 y Fb(j)1039 2563 y Fi(ist)h(der)e(V)-8
b(ektor)32 b(v)m(on)f Fh(b)1829 2577 y Fb(j)t Fd(\000)p
Fg(2)1986 2563 y Fi(nac)m(h)g Fh(b)2240 2577 y Fb(j)t
Fd(\000)p Fg(1)2366 2563 y Fi(.)p 0 TeXcolorgray 144
2807 a Fj(e\))p 0 TeXcolorgray 817 3961 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.95999 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def   /showOrigin true def 270.30121  0 -14.22638  0 ArrowA CP 4
2 roll ArrowB /yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch
def /xStart exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq false
and exch 2 lt true and or { /viceversa -14.22638  270.30121  gt { true
}{ false } ifelse def /epsilon 0.01 def /minTickline -14.22638  def
/maxTickline 128.03741  def /dT 932340 abs 65536 div viceversa { neg
} if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -14.22636 119.50143 /tickend exch def /tickstart exch
def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor {
0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd 1.5 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke { 0 setlinecap [  5.0  3.0 ] -2 0 add   dup 0 gt { /a .5
def PathLength exch div } { pop /a 1 def PathLength } ifelse /b ED
dup /X ED 0 get /y ED /z 0 X {add} forall def b a .5 sub 2 mul y mul
sub z Div round z mul a .5 sub 2 mul y mul add b exch Div /z ED false
X { z mul } forall X astore {0 gt or} forall { X 1 a sub y mul } {
[ 1 0 ] 0 } ifelse setdash stroke  stroke} def /subLSstroke { 0 setlinecap
stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines
{ gsave 1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 10 subTNo div 9.99 { /dx exch def /x cntTick dT
dx log mul add def x abs MinValue abs le { false { x minTickline  moveto
x maxTickline  lineto } { x tickstart STsize mul  moveto x tickend
STsize mul  lineto } ifelse } if } for /dsubT 0 def subTwidth SLW subTColor
subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick
tickstart STsize mul  moveto cntsubTick tickend STsize mul  lineto
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart  moveto cntTick tickend  lineto Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for } if end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.95999 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def   /showOrigin true def 0 128.03741  0 -14.22638  ArrowA CP 4
2 roll ArrowB /yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch
def /xStart exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq true
and exch 2 lt false and or { /viceversa -14.22638  128.03741  gt {
true }{ false } ifelse def /epsilon 0.01 def /minTickline -14.22638
 def /maxTickline 270.30121  def /dT 932340 abs 65536 div viceversa
{ neg } if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -14.22636 261.76515 /tickend exch def /tickstart
exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor
{ 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd 1.5 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke { 0 setlinecap [  5.0  3.0 ] -2 0 add   dup 0 gt { /a .5
def PathLength exch div } { pop /a 1 def PathLength } ifelse /b ED
dup /X ED 0 get /y ED /z 0 X {add} forall def b a .5 sub 2 mul y mul
sub z Div round z mul a .5 sub 2 mul y mul add b exch Div /z ED false
X { z mul } forall X astore {0 gt or} forall { X 1 a sub y mul } {
[ 1 0 ] 0 } ifelse setdash stroke   stroke} def /subLSstroke { 0 setlinecap
stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines
{ gsave 1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 10 subTNo div 9.99 { /dx exch def /x cntTick dT
dx log mul add def x abs MinValue abs le { false { x minTickline exch
moveto x maxTickline exch lineto } { x tickstart STsize mul exch moveto
x tickend STsize mul exch lineto } ifelse } if } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if end
 
@endspecial
612 3872 a Ff(1)612 3754 y(2)612 3636 y(3)612 3518 y(4)612
3400 y(5)612 3281 y(6)612 3163 y(7)612 3045 y(8)542 4104
y Fc(\000)p Ff(1)913 4178 y(1)73 b(2)g(3)g(4)g(5)g(6)g(7)g(8)h(9)50
b(10)28 b(11)g(12)g(13)g(14)h(15)f(16)g(17)g(18)-2347
b Fc(\000)p Ff(1)817 3961 y
 tx@Dict begin { 270.30121 0.0 } PutCoor PutBegin  end
 817 3961 a 817 3961 a
 tx@Dict begin { 5.0 5.7794 4.71451 0.0 0.  Uput UUput } PutCoor PutBegin
 end
 817
3961 a 793 3981 a Fi(x)817 3961 y
 tx@Dict begin  PutEnd  end
 817 3961 a 817 3961
a
 tx@Dict begin  PutEnd  end
 817 3961 a 817 3961 a
 tx@Dict begin { 0.0 128.03741 } PutCoor PutBegin  end
 817 3961 a 817 3961 a
 tx@Dict begin { 5.0 5.7794 4.71451 2.12914 90.  Uput UUput } PutCoor
PutBegin  end
 817 3961
a 793 3972 a Fi(y)817 3961 y
 tx@Dict begin  PutEnd  end
 817 3961 a 817 3961 a
 tx@Dict begin  PutEnd  end
 817
3961 a 0 TeXcolorgray 0 TeXcolorgray 1858 5443 a Fi(6)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
